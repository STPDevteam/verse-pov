// Code generated by go-bindata. DO NOT EDIT.
// sources:
// shoal/delegates.json
// mainnet/delegates.json
package preset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _shoalDelegatesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\xd1\x49\x8f\xa3\x46\x14\xc0\xf1\x7b\x7f\x0a\xe4\x2b\x13\xbb\x8a\x2a\x6a\xb1\x34\x07\x30\x18\x1b\xbc\xd1\xde\x89\xa2\x16\xab\x6d\x18\xcc\xe2\x02\xdc\x8e\xe6\xbb\x47\x9e\x4c\xdf\x3a\x8a\x34\x73\x7d\x4f\xef\xf0\xfe\xbf\x3f\x5f\x24\xe9\xef\x17\x49\x92\xa4\xde\xd5\xcf\xe3\xde\x50\xea\xdd\xce\x85\xff\xed\x0f\x00\x7b\x5f\xfe\x9d\xfb\x51\x54\xc7\xb7\xdb\x73\x05\xee\x44\x65\x3a\x89\x7c\x42\x15\xc4\x29\x8f\x47\x2a\x49\xe2\x04\x2a\x9c\x8c\x21\x54\x31\xa5\x98\x00\x8d\x51\x4e\x3f\x8e\xcb\x26\x78\xcb\xe2\xf7\xe7\xb1\x6e\xb0\xda\xeb\xd2\xe8\x52\xf3\xf3\x25\x12\xd5\xdd\x70\xd4\x3a\x08\xac\xda\x5a\x7b\x5c\xf7\xc0\x2b\x67\xa9\x26\xca\xbb\x13\xcd\x6c\x70\x45\x7a\x30\x8e\xa7\x40\x15\x41\x29\xf6\xa2\xb5\xd5\x43\x9e\xe5\x58\x0d\x9d\xae\xb4\xbc\xea\x8e\xb8\x0f\x9a\x79\xe6\x73\xf0\x75\x38\x1c\x26\xbc\x39\xaf\xad\x70\x73\x78\xd5\xb3\x65\x55\x1e\x1b\x23\x4b\x3b\x9c\xe5\x61\x9b\x6b\xe6\xcc\xf2\x1b\x3a\xb7\x77\xd6\xc9\xed\x56\xb2\x45\x90\xdc\x3e\x3a\x73\x2b\xef\x47\x0d\x88\xc1\x62\xac\xe7\xf6\xb8\xbc\x6d\xb8\xe7\x9e\xa6\xad\x5f\x3e\xca\x23\x8c\xda\x8b\x33\x76\xb5\xaf\x1f\x5f\xb4\x85\xb8\x5c\x4f\x6f\x65\xd1\xc5\x75\x6f\x28\x41\x00\x7e\x2e\xae\xb1\xe8\x8a\x3a\x7b\x7b\x36\xea\x0d\x7f\x96\x94\xa4\xde\xa5\x7c\x7e\x8c\x49\x1f\x22\xda\x87\x9c\xf5\x15\xf4\xd1\xf3\x19\xa5\xa8\x45\x6f\x28\x31\x42\xc1\x8f\xd1\xf7\x17\x49\xfa\xfe\xe5\x3f\x25\x94\x4f\x25\x10\xd6\x0d\x4e\x15\x90\xe0\x88\x21\x23\x50\x42\x16\xd1\x28\x66\x34\x1e\x21\x16\x50\x86\x14\x04\xe0\x48\x23\x9f\x4a\x4c\xaa\xc1\x22\x0f\x83\x78\xb9\x1e\x74\x66\xe5\x59\xd6\x71\x79\xca\x29\x1f\x88\x59\xe6\xbd\x03\x80\xa7\xe3\x06\x9f\xd2\xb5\xa0\xe9\xc5\x18\x24\xb3\xda\xbe\x45\xce\x7a\x52\xc5\x83\xc2\xad\x36\xea\x3b\x65\x42\x90\x09\x7a\xd4\x00\x92\x73\x7b\x10\xf1\x60\x21\x3a\xfa\x43\x22\x58\x94\x5d\xb2\x4e\xed\xe0\x96\x6d\x61\xf8\xd0\x53\x50\x0e\x94\x23\xbe\x01\x94\x4e\x58\x7e\xe7\xd7\x9d\xec\x9f\x0f\xaa\xca\xa0\x3a\x59\xbc\x5a\x00\xc9\x57\x33\x5d\xce\xb2\x33\xde\x87\x8b\xd3\x36\x56\xe6\xae\xb3\xdb\x74\x0c\xe5\xa7\xc5\x96\xd9\x0d\xe5\xf3\x31\x3b\x99\xbf\x2b\x01\x51\x5f\x81\xb8\xcf\x70\x5f\x51\x7f\x1d\x02\x7d\x0a\x11\x93\x90\x22\x48\x35\x85\x40\x13\x60\x15\xf9\x84\x72\x34\x06\xa1\xa9\x60\x42\x42\x15\xb0\x08\x25\x4a\x08\xf0\x67\x10\xda\xb1\x71\xe5\x28\x2c\x27\xde\x8a\x26\x17\xbd\x71\x12\x10\x45\x82\x57\x95\x19\xdc\xe3\x6c\xa0\x1a\x63\xe3\x54\x30\x4e\xc3\x57\x3c\x29\x76\xc6\xe1\x5b\x3d\x11\x76\xbb\x8a\x46\xe4\x38\xd2\xe7\x78\x1b\xae\xf5\x8a\xcb\x86\x6e\x71\x3e\xbd\x6d\x4c\xf7\x9a\xac\x3d\xdf\x7c\x42\xac\x9c\x7d\x85\x77\x6e\xd5\x1e\x88\xac\xcb\xc8\xaa\xdb\xe5\x75\x6d\xce\x8a\x95\x50\xb4\xb3\x93\x2c\x8a\x87\x7f\xc4\x97\xe9\x03\x09\xc5\x68\x8b\x58\x38\x91\x41\x41\xbd\x02\x6e\xb7\x61\x64\x7f\x0d\x1d\x78\xdb\x6a\x14\xcc\xed\x74\x69\x0f\x64\xc2\x3d\xcd\x95\xb5\xdf\x87\x50\x9f\x02\x6a\x1f\x2a\xb8\xaf\x40\xfa\x3f\x12\x2f\x7f\xfd\x13\x00\x00\xff\xff\x1f\x48\x78\x01\x9f\x04\x00\x00")

func shoalDelegatesJsonBytes() ([]byte, error) {
	return bindataRead(
		_shoalDelegatesJson,
		"shoal/delegates.json",
	)
}

func shoalDelegatesJson() (*asset, error) {
	bytes, err := shoalDelegatesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shoal/delegates.json", size: 1183, mode: os.FileMode(420), modTime: time.Unix(1638407516, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mainnetDelegatesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\x4b\x6f\x9b\x4c\x18\x85\xf7\xfe\x15\x23\xb6\xe4\x73\x66\x86\x81\x19\x23\x65\xc1\x70\xb3\x13\xdf\x2f\x21\xf6\xa7\x2a\xc2\x80\x0d\xe6\x1a\xc0\x01\x5a\xe5\xbf\x57\xb4\xce\x2e\x55\x37\xdd\xbe\x47\xe7\x95\xce\xf3\xfc\x3f\x00\xe0\xc7\x00\x00\x00\x84\xcc\x4d\x03\x41\x05\x42\xea\x46\xd9\x7f\x10\x09\x77\xbf\xcf\xae\xef\x97\x41\x55\xf5\x09\x6c\x35\x5d\x93\x19\x43\x50\xc1\x16\xc2\x0a\x97\x0c\x9d\x1a\x48\xd3\x31\xd3\x89\x31\x22\x1c\x2b\x23\x4a\x75\x88\xac\xcf\x72\x71\x3d\xbe\xc6\x41\xd7\x97\xf9\x92\x5b\xfb\xb1\xd4\x89\x3b\x69\x5d\x6e\xe6\xce\xb1\x79\x6b\xf3\x2e\xc0\x2f\x66\xad\xe3\xc3\xd3\x36\x64\x57\xaf\x6b\x56\x2b\x76\x7d\x5e\xee\xc2\x24\xa5\x79\x11\x86\x3e\x44\x2d\x3f\xc7\x36\x7f\x4c\x36\x70\xe2\xc7\xe7\x67\x99\xe6\xfb\x4d\xb3\x0c\x3a\x7b\x1d\x4f\xc6\xb3\xd9\x83\xaa\xaa\xc9\x3a\x35\xf5\xd2\xeb\x82\xa8\x7d\xbc\xb4\x7e\xfc\x94\xf0\x83\x63\x4e\xbb\x4a\xbb\x1c\x25\x5e\x23\x39\xbb\xb7\xbd\xf6\x3a\x4d\x29\x54\xc4\xf0\x22\xcf\xc5\x99\x7f\xbf\x0c\x71\xb3\x3b\x14\x05\xad\x0d\xcd\xdd\x9e\xce\xd6\x31\x58\x79\x95\x39\x76\xb6\xf6\x68\x91\xcc\x61\x63\x3e\x7c\xae\x78\xcf\xeb\x28\x3b\xbf\x16\x79\x13\x94\x82\x0a\x10\x84\xb7\x20\x0b\xea\x26\x2f\xe3\xd7\x9e\x91\xa0\xde\x40\x02\x20\x44\x45\xbf\x18\x49\x43\x8c\xc8\x50\x56\x86\x48\xa1\xb7\x5f\x3d\x93\xbc\xac\x05\x15\x30\x85\xc2\x5f\xa7\x8f\x01\x00\x1f\x77\x7f\xf2\x80\xbf\xf4\xc0\x38\xd1\x34\x4b\x82\x5c\xd7\x4d\x28\x51\x99\x90\x11\x27\x08\x33\x53\x36\x15\xc3\x52\xa8\x84\x14\x43\x37\x91\xf9\x95\x07\xee\x88\x13\x67\x7e\x7a\x16\xe5\x76\x55\x27\xd1\x84\x99\x85\x2f\x35\x33\x46\xb8\x77\xc5\x2f\xeb\xb7\x45\x32\xf5\xc6\x9a\xd8\x74\x89\xed\x1c\xf2\x5d\xf4\xb2\x3f\xf2\xc9\x62\xdd\xd4\x3a\x5f\x19\xce\x34\x5d\x11\xe4\x39\x3b\x96\xfb\xcd\x7b\xcd\x4f\xf4\x38\x8d\x9d\x9c\x54\xbd\x87\xed\xf8\xde\x7e\xab\x4b\x2f\x17\xbf\x7b\x7e\x64\xd2\xb1\x87\xbd\x43\x82\xe2\x7d\x85\xf2\x65\x79\xd2\x1c\xe2\x92\xd6\x4e\x4f\xd9\x4c\xe6\x4f\xb3\x8b\xa1\xa0\xda\xc8\xd6\x05\xdb\x39\xd1\x39\x23\xa4\xda\x47\xa4\x71\x47\xb1\xe3\xe9\x6e\xf8\x6e\x2d\x36\x22\xb4\x37\xd6\x59\xfb\x47\x1e\x10\x46\x43\xc4\x94\xbf\x88\x18\x7c\x1b\xfc\x0c\x00\x00\xff\xff\x11\x78\xe8\x0d\x14\x03\x00\x00")

func mainnetDelegatesJsonBytes() ([]byte, error) {
	return bindataRead(
		_mainnetDelegatesJson,
		"mainnet/delegates.json",
	)
}

func mainnetDelegatesJson() (*asset, error) {
	bytes, err := mainnetDelegatesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mainnet/delegates.json", size: 788, mode: os.FileMode(420), modTime: time.Unix(1639013716, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"shoal/delegates.json": shoalDelegatesJson,
	"mainnet/delegates.json": mainnetDelegatesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"mainnet": &bintree{nil, map[string]*bintree{
		"delegates.json": &bintree{mainnetDelegatesJson, map[string]*bintree{}},
	}},
	"shoal": &bintree{nil, map[string]*bintree{
		"delegates.json": &bintree{shoalDelegatesJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

