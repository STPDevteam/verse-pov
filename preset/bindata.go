// Code generated by go-bindata.
// sources:
// shoal/delegates.json
// mainnet/delegates.json
// DO NOT EDIT!

package preset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _shoalDelegatesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\xd1\x49\x8f\xa3\x46\x14\xc0\xf1\x7b\x7f\x0a\xe4\x2b\x13\xbb\x8a\x2a\x6a\xb1\x34\x07\x30\x18\x1b\xbc\xd1\xde\x89\xa2\x16\xab\x6d\x18\xcc\xe2\x02\xdc\x8e\xe6\xbb\x47\x9e\x4c\xdf\x3a\x8a\x34\x73\x7d\x4f\xef\xf0\xfe\xbf\x3f\x5f\x24\xe9\xef\x17\x49\x92\xa4\xde\xd5\xcf\xe3\xde\x50\xea\xdd\xce\x85\xff\xed\x0f\x00\x7b\x5f\xfe\x9d\xfb\x51\x54\xc7\xb7\xdb\x73\x05\xee\x44\x65\x3a\x89\x7c\x42\x15\xc4\x29\x8f\x47\x2a\x49\xe2\x04\x2a\x9c\x8c\x21\x54\x31\xa5\x98\x00\x8d\x51\x4e\x3f\x8e\xcb\x26\x78\xcb\xe2\xf7\xe7\xb1\x6e\xb0\xda\xeb\xd2\xe8\x52\xf3\xf3\x25\x12\xd5\xdd\x70\xd4\x3a\x08\xac\xda\x5a\x7b\x5c\xf7\xc0\x2b\x67\xa9\x26\xca\xbb\x13\xcd\x6c\x70\x45\x7a\x30\x8e\xa7\x40\x15\x41\x29\xf6\xa2\xb5\xd5\x43\x9e\xe5\x58\x0d\x9d\xae\xb4\xbc\xea\x8e\xb8\x0f\x9a\x79\xe6\x73\xf0\x75\x38\x1c\x26\xbc\x39\xaf\xad\x70\x73\x78\xd5\xb3\x65\x55\x1e\x1b\x23\x4b\x3b\x9c\xe5\x61\x9b\x6b\xe6\xcc\xf2\x1b\x3a\xb7\x77\xd6\xc9\xed\x56\xb2\x45\x90\xdc\x3e\x3a\x73\x2b\xef\x47\x0d\x88\xc1\x62\xac\xe7\xf6\xb8\xbc\x6d\xb8\xe7\x9e\xa6\xad\x5f\x3e\xca\x23\x8c\xda\x8b\x33\x76\xb5\xaf\x1f\x5f\xb4\x85\xb8\x5c\x4f\x6f\x65\xd1\xc5\x75\x6f\x28\x41\x00\x7e\x2e\xae\xb1\xe8\x8a\x3a\x7b\x7b\x36\xea\x0d\x7f\x96\x94\xa4\xde\xa5\x7c\x7e\x8c\x49\x1f\x22\xda\x87\x9c\xf5\x15\xf4\xd1\xf3\x19\xa5\xa8\x45\x6f\x28\x31\x42\xc1\x8f\xd1\xf7\x17\x49\xfa\xfe\xe5\x3f\x25\x94\x4f\x25\x10\xd6\x0d\x4e\x15\x90\xe0\x88\x21\x23\x50\x42\x16\xd1\x28\x66\x34\x1e\x21\x16\x50\x86\x14\x04\xe0\x48\x23\x9f\x4a\x4c\xaa\xc1\x22\x0f\x83\x78\xb9\x1e\x74\x66\xe5\x59\xd6\x71\x79\xca\x29\x1f\x88\x59\xe6\xbd\x03\x80\xa7\xe3\x06\x9f\xd2\xb5\xa0\xe9\xc5\x18\x24\xb3\xda\xbe\x45\xce\x7a\x52\xc5\x83\xc2\xad\x36\xea\x3b\x65\x42\x90\x09\x7a\xd4\x00\x92\x73\x7b\x10\xf1\x60\x21\x3a\xfa\x43\x22\x58\x94\x5d\xb2\x4e\xed\xe0\x96\x6d\x61\xf8\xd0\x53\x50\x0e\x94\x23\xbe\x01\x94\x4e\x58\x7e\xe7\xd7\x9d\xec\x9f\x0f\xaa\xca\xa0\x3a\x59\xbc\x5a\x00\xc9\x57\x33\x5d\xce\xb2\x33\xde\x87\x8b\xd3\x36\x56\xe6\xae\xb3\xdb\x74\x0c\xe5\xa7\xc5\x96\xd9\x0d\xe5\xf3\x31\x3b\x99\xbf\x2b\x01\x51\x5f\x81\xb8\xcf\x70\x5f\x51\x7f\x1d\x02\x7d\x0a\x11\x93\x90\x22\x48\x35\x85\x40\x13\x60\x15\xf9\x84\x72\x34\x06\xa1\xa9\x60\x42\x42\x15\xb0\x08\x25\x4a\x08\xf0\x67\x10\xda\xb1\x71\xe5\x28\x2c\x27\xde\x8a\x26\x17\xbd\x71\x12\x10\x45\x82\x57\x95\x19\xdc\xe3\x6c\xa0\x1a\x63\xe3\x54\x30\x4e\xc3\x57\x3c\x29\x76\xc6\xe1\x5b\x3d\x11\x76\xbb\x8a\x46\xe4\x38\xd2\xe7\x78\x1b\xae\xf5\x8a\xcb\x86\x6e\x71\x3e\xbd\x6d\x4c\xf7\x9a\xac\x3d\xdf\x7c\x42\xac\x9c\x7d\x85\x77\x6e\xd5\x1e\x88\xac\xcb\xc8\xaa\xdb\xe5\x75\x6d\xce\x8a\x95\x50\xb4\xb3\x93\x2c\x8a\x87\x7f\xc4\x97\xe9\x03\x09\xc5\x68\x8b\x58\x38\x91\x41\x41\xbd\x02\x6e\xb7\x61\x64\x7f\x0d\x1d\x78\xdb\x6a\x14\xcc\xed\x74\x69\x0f\x64\xc2\x3d\xcd\x95\xb5\xdf\x87\x50\x9f\x02\x6a\x1f\x2a\xb8\xaf\x40\xfa\x3f\x12\x2f\x7f\xfd\x13\x00\x00\xff\xff\x1f\x48\x78\x01\x9f\x04\x00\x00")

func shoalDelegatesJsonBytes() ([]byte, error) {
	return bindataRead(
		_shoalDelegatesJson,
		"shoal/delegates.json",
	)
}

func shoalDelegatesJson() (*asset, error) {
	bytes, err := shoalDelegatesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shoal/delegates.json", size: 1183, mode: os.FileMode(420), modTime: time.Unix(1632271804, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mainnetDelegatesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd7\x49\xaf\xab\xca\x76\x07\xf0\xf9\xf9\x14\x5b\x7b\xea\x17\x53\x2d\x45\x1d\xe9\x0d\x68\x0d\x36\x9d\xc1\x2d\x51\x74\x45\x6b\x30\x06\x03\xc6\x6d\xf4\xbe\x7b\xb4\x4f\xee\x8d\x14\xc9\x51\xa4\xb3\xef\xd4\xa5\x32\xaa\xfa\xe9\xbf\x56\xad\x7f\xff\xf1\xf1\xf1\x9f\x3f\x3e\x3e\x3e\x3e\x3e\xdb\xb8\xc9\x3f\x7f\x7e\x7c\xe6\x59\x75\x39\xb7\xff\x06\xe0\xe7\x3f\xfe\x7b\x21\xce\xb2\x21\xbf\x5c\xbe\xd6\xc0\x43\xe1\x12\x30\x0a\x2c\xca\x9c\xab\x40\xc5\x0a\x01\x12\x62\x5c\x07\x88\x66\x92\x8e\x34\x99\xe5\x86\x48\x21\xa0\x7f\x6d\xee\xae\xc9\x1f\x75\xfe\xfc\xda\xac\xe8\xd9\xed\x3c\xbf\x44\x76\x74\x47\x4d\xb3\xf0\xeb\xc8\xea\xec\x25\x56\xb8\x60\x83\x7b\x3c\xdc\x2f\x4d\x13\xc2\xcc\x35\xc3\x5d\xa1\xf9\xe0\xa6\x3c\xc4\x79\xb8\xbf\x34\xd7\xed\xfd\x28\xe0\xcb\x99\x1e\x85\xa6\xe5\x5e\xb1\x9a\x3b\x8e\xee\x78\x82\x3d\x06\x4d\xe8\x7b\xe7\x7f\xfe\xfc\xf9\xd3\xde\x56\x27\x4b\xa9\xba\x61\xb9\xbd\x72\xb5\xf0\x1e\xeb\x99\xa3\xf3\x13\xe0\x9c\x93\xf5\xf9\x15\xc4\x2d\xae\xc6\x7c\x98\x09\xe8\xd5\x8f\xeb\x97\x2e\xb6\x77\xe4\xdf\xa4\x5b\x27\x1b\xf3\x70\xb9\x7a\x91\x22\xe9\x51\x99\xd1\xcc\x1c\x96\xd6\x71\xbb\xa3\x8c\x14\xa3\x2c\xff\xf3\xaf\x53\xdc\xce\x63\xd5\x1e\xfe\xe8\xce\xf7\x7c\xf8\xfc\xf9\x01\x01\xf8\x73\xa1\xcd\xc7\xfb\x79\xa8\xff\xf8\xba\xa3\xcf\x9f\x7f\x5e\xe5\xc7\xc7\x67\xd5\x7d\x9d\x98\x92\x29\x64\x7c\xca\xc8\x14\x02\xf2\xe7\x7f\x7d\xdd\xc9\x79\x18\x3f\x7f\x7e\x48\x22\x03\xbf\x7e\xfa\xd7\x8f\x8f\x8f\x7f\xfd\xe3\xff\x96\x40\x6f\x25\x30\xa2\x22\x21\x58\x35\x98\xca\x54\x31\xe5\x8a\xc1\x53\x89\x91\x82\x16\x08\x73\x84\xa8\x0e\x12\x4c\x24\xa6\xbf\x95\x88\xe3\x60\x28\xc8\x7d\x1e\x95\xe3\xec\x74\x68\xaa\xa2\x98\xcf\x1e\x2d\xc8\xd2\x80\x35\x56\x12\xd2\xde\x49\x35\xe5\x96\x14\xda\x45\x68\x8f\xc7\x0d\x39\x66\xe1\xad\x4a\xd2\x65\xa6\x8b\xf1\xa1\x3e\x1d\xf2\x76\xdd\x3a\xab\x93\xcc\x05\x31\xca\x70\x35\x42\xf3\xb1\xb5\xbe\x24\x36\x0a\x33\xc3\xa0\x3a\xb3\xde\xe1\x55\xdd\x29\x17\x2d\xba\x93\xf5\x22\xd8\xd4\x0f\x13\x1e\xc3\x8d\x38\x51\x74\x3e\xf6\xb0\x9a\xd8\x27\x2b\x33\x85\xca\xc7\xb3\x82\xd5\xf7\x50\x59\x1d\x16\x8f\x70\x3c\x1d\x4e\xa1\xcc\x55\xc7\xdd\x77\xc4\x99\xec\x72\x77\x97\xc0\xa3\xac\xff\x0d\x12\x88\x92\x29\x9f\x42\x2c\xfd\x3e\x04\x7e\x0b\x21\x21\x62\x28\x0c\xb2\x04\x40\x45\x44\x24\x4e\x81\x9c\x24\x5a\x82\x29\xe4\xba\xc8\xb1\x08\x20\xd7\xa0\x8a\xf2\xb7\x10\x91\x27\xf4\x38\x5e\x18\xa1\xb5\x3b\x58\x25\x05\xc6\xc2\x95\x5e\x27\xd7\xa9\x25\x75\x91\x55\xfb\xbc\x9f\x0c\xae\xdd\x6a\x96\xb1\xea\x1c\xc1\xde\xf7\xf2\xe1\x1a\x6b\x57\xf7\xf5\x30\x57\x07\x63\x57\x29\x42\xd5\x2c\xed\x23\x8f\x4e\xc6\xd2\x59\xd0\xa3\xa0\x1e\xb9\xaf\x7f\x41\xf8\xe3\xf5\x81\x87\x99\x15\x43\xeb\x52\xdc\xd9\x7a\xf3\xa4\x13\xbb\x36\x5e\x7b\x8b\x18\xc6\x06\xe3\xcb\xa5\x6f\x3c\xb1\x5f\x69\x52\x94\x9f\xd3\xe8\x99\xb8\xf3\xfb\xc2\xb7\xad\xee\xa0\x5e\x07\x17\x8d\xc7\xa5\x76\x9f\xf9\x70\xbf\x18\xe1\x2e\x22\x33\xdb\x39\x41\x6f\xb8\xff\x1d\x10\x5f\x91\x40\x58\x9a\xf2\x6f\x44\x82\xbc\x95\xd0\x45\x51\xe2\x18\x12\x26\x33\x0c\xb2\x4c\x2e\x78\x0e\xe2\x9c\xa0\x58\x63\xb9\x2a\x11\x2a\x6a\xd0\x48\x29\xd0\xde\x49\xcc\x1b\x27\x34\x94\x4d\x3b\x80\x79\xb8\x3a\x8b\x4e\x39\x1f\xe8\x6a\x7b\xda\xc4\x8b\x4e\x92\x46\x2b\x2a\xef\x97\x56\xc2\x65\x7b\xbf\xcb\x31\x44\xdb\xc5\x7c\x38\xcc\xed\xfd\xa1\xd9\x5d\x70\x7a\xcd\xa2\xb3\xee\x6a\x65\xdf\x6d\xb6\xf6\xea\xcc\x1b\xfb\x7c\x48\x69\x11\xdd\xc8\x97\x84\x75\x9e\x78\x7c\x18\x2d\xd3\x09\x94\x09\x4a\xc0\x42\x6e\xe5\x60\xbf\xca\x59\xa7\x4d\x06\xbc\xc6\xda\xb0\x09\x79\xe6\xeb\x9d\x79\x58\xa4\xf6\x2e\xec\xb2\xb6\xae\x1f\x52\x97\x14\x99\xa2\xbe\x44\xe9\x32\xb9\x8c\xf5\x36\x8d\x8f\x81\xaa\x9b\x2e\xf0\xe0\x98\xa8\xe4\xf0\x7d\x09\x34\x65\x6c\x0a\x21\x99\x42\x04\x7f\x5f\x82\xbe\x95\xe0\x00\x1b\x94\x31\x55\x04\x8c\x8b\x4a\x9c\xa2\x24\x4e\x90\x94\x32\xa8\xc1\x54\x81\x85\xa6\x8a\x2a\x49\x09\xe0\xef\x24\x94\x97\xf5\xac\xf4\xc6\x3c\x95\x93\x9a\xf7\x89\x2b\x1c\x97\xdb\x66\xcb\xd4\xc2\x78\x1d\x9b\xd6\x9d\xfb\x63\xb8\x51\x3b\xff\x9c\x98\x13\x50\x0b\xe8\x75\x18\xfd\x2a\x25\xeb\xd4\x94\xd9\xb6\xf2\x86\x6c\x1b\x88\xb1\xbc\x76\x6c\x21\xdf\xdc\x7c\x53\xe8\x88\x1d\xa0\xc7\xaf\x36\xe1\xdf\xae\xee\x63\x95\x50\xd9\x30\xe5\x65\x13\x99\x65\x31\xbf\xe1\x53\x08\x2a\x98\x75\xd6\xc2\xdd\x5c\x9f\xeb\x6b\x3c\x0f\x5f\x86\x3a\xd6\x33\x21\x2a\x33\xee\x82\xb5\x5c\xe6\xdc\x42\x10\xce\x96\x36\xe0\x55\x7e\xd2\xa0\x63\xca\xf2\x2d\xbb\xf5\xeb\x5e\x30\x1f\xed\xe1\xdb\x6d\x02\x93\x29\x02\xd2\x14\x22\x69\x8a\xc4\xdf\x97\x10\xdf\x4a\x10\x24\x27\x7a\x2a\xc1\x04\xa6\x05\xa1\x12\xa2\x29\xd7\x14\x83\x68\x22\xa7\x80\xc2\xac\xe0\x20\xd5\x19\x4d\xe3\xb7\x99\x48\xb2\x53\x5d\x50\x63\x5f\x2f\x52\x45\x1e\x2e\xd1\xb9\x44\x66\x35\xe3\x89\xc7\x72\xb4\xed\x52\xda\xf9\x4b\x74\x4b\x2f\x3b\xba\x58\xcd\x87\xc9\xe1\xb5\x4e\xd4\xe7\x6d\x58\x95\x9b\x5d\x3c\x5b\x6c\x43\x64\xae\xbb\x5d\xd6\x47\xb4\x2e\x7c\x0f\x5d\xe5\x6d\x20\xee\xe0\xaf\x36\xa1\xa8\xc0\x61\x59\x63\x66\x1b\xec\x80\x3c\xd4\x97\x2f\x7c\x3b\x55\x93\x16\x1b\x75\x28\x35\xbe\x1f\xbe\x84\x3d\x33\x64\x34\x08\xd7\x43\xdf\xf4\x05\x44\x29\xd9\xdb\xee\x46\xcd\x46\x7b\x29\x17\x4d\x53\xbc\x96\xe5\x6e\xb1\x5c\xf5\xf1\x73\x72\xc6\x83\xeb\x14\x58\x5e\xfe\x2d\x6d\x02\xe2\x29\x64\x74\x4a\xbe\x91\x09\xf6\x3e\x13\x3a\x97\x25\xc9\x50\xa4\xcc\x10\x33\x4e\x20\xcf\x09\x15\x71\x8c\x29\x93\x63\x02\x90\x04\x54\x49\x02\x08\x28\x6f\x33\x31\x87\x62\x30\x4b\x8e\xa7\xe7\xb5\x6d\xb6\xaa\x14\xa4\x1a\xf5\x99\x3a\x73\x4c\x90\x95\x6c\x85\xef\x65\xb9\xc1\x3b\xd7\x8c\x55\x19\xd7\x69\xf2\x9a\xed\xf3\x6b\x4a\x74\xb6\x12\xb7\xf4\x31\xf7\xb8\x78\x7a\xe2\x5c\xef\x68\x52\xf6\xbc\xcf\x1a\x81\x46\x5d\x42\x9c\x2f\x89\xc6\x30\x03\x65\xe2\x2d\x84\x93\xf4\xcc\xd1\x70\xf7\xa2\x9d\xc7\xb5\xf6\x74\x25\x43\xeb\xf7\xe2\x90\xc7\xcf\x43\x36\xa7\x99\x52\x79\xb5\xb3\x37\x43\xfb\x34\x07\xf2\x24\x31\xca\x57\x9c\xd4\x93\x95\x22\xb9\x8b\xd9\x43\x84\x2c\xa3\x6e\x24\x72\x3b\x14\xe6\xb8\xcf\xbe\x5f\x9d\x08\x99\x22\x8c\xa7\x10\x82\x29\xfb\x46\x26\xa4\xb7\x12\x29\x89\x45\x0d\x03\x6e\x88\x06\xa3\x34\x03\x79\x9e\x6a\x39\x46\x80\x20\x2c\x71\x51\x23\x48\xa7\x84\x1a\xda\xdb\xea\xe4\x7b\xc2\xbd\xc4\xbd\xc5\xce\x8f\xca\x8d\x8c\xba\x63\xa5\x7b\xb3\x81\x6b\xf9\xe3\x72\xf5\xf2\xdc\x7a\xd7\x0b\x67\xd5\xb2\xf6\x8b\x46\xc1\x82\xf1\x0a\x16\x2c\x41\x11\xab\x2d\xe1\xde\x16\x79\xfe\xd4\xb5\x45\x72\x2c\x9c\x2a\x35\x61\x9d\x14\x8f\x79\x70\x77\xdc\x87\xf4\x25\x91\xc6\x8f\x21\x29\x2e\xae\xd4\x3c\xfc\xfd\xc9\xad\x78\xfa\x2a\x2f\x32\x5f\x85\x9e\x3d\x82\x5d\x27\xb4\x9d\xda\xa4\x45\x29\x20\x56\x44\xe9\xfc\xb0\xda\xc7\x4b\x52\xac\x5a\x7f\x4f\x32\xdd\x0f\xf2\xed\xbc\xbd\x9d\x35\xe5\x15\x9f\xef\x5e\x64\x07\xeb\x20\x3e\xc2\x7b\xf2\xfd\xea\xf4\x4b\x42\x9a\xc2\x29\x94\xbe\xf1\x74\xe2\x6f\x21\x44\x55\x82\x44\xe6\x90\x89\x1c\xa1\x82\x88\xa8\x00\x1a\x82\x59\xaa\x50\x88\x44\x8e\x11\x44\x6a\x4c\xe5\xff\xf9\xee\xff\x2e\x4e\xcb\xba\x51\x76\xe2\x02\x11\xcd\x77\x38\x02\x97\x05\x55\x1f\x81\xa1\xeb\xaf\x62\x26\x83\xbb\xf5\x72\x03\x21\x59\xad\xbb\x9d\xa2\x77\x5c\xae\x5d\x5d\x1e\xa2\xb9\x90\x3b\xbe\xb2\x63\xba\x50\xa7\xfe\x6d\xb8\x4d\x36\x9d\x1e\xda\xe6\x44\x57\x2f\xf8\x7e\x5d\x7b\xd9\xf2\x0b\xc2\xcb\x9f\xbe\x20\x94\x93\xa2\x3a\x20\x14\x96\xe2\xd5\xb0\x71\x3d\x6e\x46\x6f\xf5\x7c\xfa\x3d\x0a\xe4\x7d\xe2\x36\x3b\xf5\x10\x58\x41\x97\x9e\xaa\x79\x89\x76\xe2\xcb\xd3\x1f\x56\x1c\x45\x49\x79\x03\xe1\xa0\xed\xfd\x24\x7c\xe8\x49\x79\xdc\x92\x66\xf0\xce\x3b\xec\x2f\xbf\xdf\x26\xa6\x10\xb1\x29\x22\xe2\x14\xfc\xb6\x03\x04\xef\x67\x09\x28\x8b\x84\x6a\x04\x03\x8c\xa0\x68\xe4\x6a\x5a\x40\xaa\x63\x02\xa4\x54\xe3\x98\x64\x79\x2c\x43\xc8\x45\xf8\xce\xc1\x98\x74\xc7\x7a\xe6\xf0\x44\x6b\x8f\xc7\xc0\xd2\xc7\x09\xde\x4a\xe8\xe2\x1c\xe9\xad\x48\xbd\x86\xea\x9b\xd5\x62\xd9\xae\xd7\x63\xe7\x53\x2d\x0a\x85\x21\x6e\x9b\xd9\x93\x0a\x9d\xdf\xbc\xb0\xa0\x3e\x6e\xe3\x31\x9d\x55\xea\x35\x70\xb3\xbc\x61\x52\xed\x1e\x24\xfa\xfc\x55\x9a\x8e\xce\x79\xbc\x89\xc4\x39\x3b\xe9\x32\xb2\xdb\x6a\x16\x97\x3b\x7d\x7b\x89\x2e\xf2\x02\x4a\xcf\xf4\x16\xf1\x11\x0e\x0f\xc3\xeb\x97\xd7\x7b\x31\x4b\x4b\x3d\xed\x87\xad\x1a\x82\x7d\xc0\xcb\xf9\x50\xfb\x19\x72\x9f\xac\x5e\xea\xab\xd9\xee\xb2\xd2\x42\x37\xee\xe2\x68\xfe\xfd\x27\x2c\x94\xa6\x90\xf2\x5f\x18\x98\xfe\xbe\xc4\xfb\xf9\x5a\x87\x98\xca\x06\x81\x44\x2f\x28\x63\x12\x60\x99\x44\x0d\xc4\x91\x96\xea\x40\x64\x6a\x81\x00\x17\x09\x67\x6f\x25\xbc\xfb\x99\x25\xed\x23\x2e\xd7\x2b\x9b\x68\x79\x38\x3b\x93\xea\x1c\xf5\xe7\xf4\x02\xed\xe3\x9e\x95\x3c\x1b\xe4\x8d\x2f\x98\x1b\xb3\xd9\x29\x1a\xde\x6e\xb4\xf9\xb0\xb6\xca\x57\x6a\x05\x78\xd7\x3d\x5f\x61\x79\xe7\xc1\xf6\x11\x02\xaf\x62\x92\xd4\xe8\xd5\x65\x33\x0b\x7f\x0d\x13\x51\xe2\xa7\xac\xf2\x8f\x4a\x63\xc6\x9d\xb7\x70\xaf\x17\x73\x21\x5d\x1f\x12\xe3\x70\x2e\xd2\xc7\x72\x38\x18\xab\xf5\xac\xd3\xbb\xde\xdb\x96\x28\x35\x48\x72\x19\x03\xd4\x8b\x4b\x8f\x96\x95\x10\x3e\xeb\x3e\xdf\xdc\xee\x62\xd7\x57\x16\x42\x96\x75\xf2\x29\xd0\xbd\xbf\x47\x82\xe3\xaf\xe1\x7a\x0a\x09\xfe\x7f\x28\x7e\xfc\xc7\x8f\xff\x0a\x00\x00\xff\xff\xd8\xcb\x58\x62\xee\x10\x00\x00")

func mainnetDelegatesJsonBytes() ([]byte, error) {
	return bindataRead(
		_mainnetDelegatesJson,
		"mainnet/delegates.json",
	)
}

func mainnetDelegatesJson() (*asset, error) {
	bytes, err := mainnetDelegatesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mainnet/delegates.json", size: 4334, mode: os.FileMode(420), modTime: time.Unix(1609925901, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"shoal/delegates.json":   shoalDelegatesJson,
	"mainnet/delegates.json": mainnetDelegatesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"mainnet": &bintree{nil, map[string]*bintree{
		"delegates.json": &bintree{mainnetDelegatesJson, map[string]*bintree{}},
	}},
	"shoal": &bintree{nil, map[string]*bintree{
		"delegates.json": &bintree{shoalDelegatesJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
