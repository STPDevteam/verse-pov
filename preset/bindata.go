// Code generated by go-bindata. DO NOT EDIT.
// sources:
// shoal/delegates.json
// mainnet/delegates.json
package preset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _shoalDelegatesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\xd1\x49\x8f\xa3\x46\x14\xc0\xf1\x7b\x7f\x0a\xe4\x2b\x13\xbb\x8a\x2a\x6a\xb1\x34\x07\x30\x18\x1b\xbc\xd1\xde\x89\xa2\x16\xab\x6d\x18\xcc\xe2\x02\xdc\x8e\xe6\xbb\x47\x9e\x4c\xdf\x3a\x8a\x34\x73\x7d\x4f\xef\xf0\xfe\xbf\x3f\x5f\x24\xe9\xef\x17\x49\x92\xa4\xde\xd5\xcf\xe3\xde\x50\xea\xdd\xce\x85\xff\xed\x0f\x00\x7b\x5f\xfe\x9d\xfb\x51\x54\xc7\xb7\xdb\x73\x05\xee\x44\x65\x3a\x89\x7c\x42\x15\xc4\x29\x8f\x47\x2a\x49\xe2\x04\x2a\x9c\x8c\x21\x54\x31\xa5\x98\x00\x8d\x51\x4e\x3f\x8e\xcb\x26\x78\xcb\xe2\xf7\xe7\xb1\x6e\xb0\xda\xeb\xd2\xe8\x52\xf3\xf3\x25\x12\xd5\xdd\x70\xd4\x3a\x08\xac\xda\x5a\x7b\x5c\xf7\xc0\x2b\x67\xa9\x26\xca\xbb\x13\xcd\x6c\x70\x45\x7a\x30\x8e\xa7\x40\x15\x41\x29\xf6\xa2\xb5\xd5\x43\x9e\xe5\x58\x0d\x9d\xae\xb4\xbc\xea\x8e\xb8\x0f\x9a\x79\xe6\x73\xf0\x75\x38\x1c\x26\xbc\x39\xaf\xad\x70\x73\x78\xd5\xb3\x65\x55\x1e\x1b\x23\x4b\x3b\x9c\xe5\x61\x9b\x6b\xe6\xcc\xf2\x1b\x3a\xb7\x77\xd6\xc9\xed\x56\xb2\x45\x90\xdc\x3e\x3a\x73\x2b\xef\x47\x0d\x88\xc1\x62\xac\xe7\xf6\xb8\xbc\x6d\xb8\xe7\x9e\xa6\xad\x5f\x3e\xca\x23\x8c\xda\x8b\x33\x76\xb5\xaf\x1f\x5f\xb4\x85\xb8\x5c\x4f\x6f\x65\xd1\xc5\x75\x6f\x28\x41\x00\x7e\x2e\xae\xb1\xe8\x8a\x3a\x7b\x7b\x36\xea\x0d\x7f\x96\x94\xa4\xde\xa5\x7c\x7e\x8c\x49\x1f\x22\xda\x87\x9c\xf5\x15\xf4\xd1\xf3\x19\xa5\xa8\x45\x6f\x28\x31\x42\xc1\x8f\xd1\xf7\x17\x49\xfa\xfe\xe5\x3f\x25\x94\x4f\x25\x10\xd6\x0d\x4e\x15\x90\xe0\x88\x21\x23\x50\x42\x16\xd1\x28\x66\x34\x1e\x21\x16\x50\x86\x14\x04\xe0\x48\x23\x9f\x4a\x4c\xaa\xc1\x22\x0f\x83\x78\xb9\x1e\x74\x66\xe5\x59\xd6\x71\x79\xca\x29\x1f\x88\x59\xe6\xbd\x03\x80\xa7\xe3\x06\x9f\xd2\xb5\xa0\xe9\xc5\x18\x24\xb3\xda\xbe\x45\xce\x7a\x52\xc5\x83\xc2\xad\x36\xea\x3b\x65\x42\x90\x09\x7a\xd4\x00\x92\x73\x7b\x10\xf1\x60\x21\x3a\xfa\x43\x22\x58\x94\x5d\xb2\x4e\xed\xe0\x96\x6d\x61\xf8\xd0\x53\x50\x0e\x94\x23\xbe\x01\x94\x4e\x58\x7e\xe7\xd7\x9d\xec\x9f\x0f\xaa\xca\xa0\x3a\x59\xbc\x5a\x00\xc9\x57\x33\x5d\xce\xb2\x33\xde\x87\x8b\xd3\x36\x56\xe6\xae\xb3\xdb\x74\x0c\xe5\xa7\xc5\x96\xd9\x0d\xe5\xf3\x31\x3b\x99\xbf\x2b\x01\x51\x5f\x81\xb8\xcf\x70\x5f\x51\x7f\x1d\x02\x7d\x0a\x11\x93\x90\x22\x48\x35\x85\x40\x13\x60\x15\xf9\x84\x72\x34\x06\xa1\xa9\x60\x42\x42\x15\xb0\x08\x25\x4a\x08\xf0\x67\x10\xda\xb1\x71\xe5\x28\x2c\x27\xde\x8a\x26\x17\xbd\x71\x12\x10\x45\x82\x57\x95\x19\xdc\xe3\x6c\xa0\x1a\x63\xe3\x54\x30\x4e\xc3\x57\x3c\x29\x76\xc6\xe1\x5b\x3d\x11\x76\xbb\x8a\x46\xe4\x38\xd2\xe7\x78\x1b\xae\xf5\x8a\xcb\x86\x6e\x71\x3e\xbd\x6d\x4c\xf7\x9a\xac\x3d\xdf\x7c\x42\xac\x9c\x7d\x85\x77\x6e\xd5\x1e\x88\xac\xcb\xc8\xaa\xdb\xe5\x75\x6d\xce\x8a\x95\x50\xb4\xb3\x93\x2c\x8a\x87\x7f\xc4\x97\xe9\x03\x09\xc5\x68\x8b\x58\x38\x91\x41\x41\xbd\x02\x6e\xb7\x61\x64\x7f\x0d\x1d\x78\xdb\x6a\x14\xcc\xed\x74\x69\x0f\x64\xc2\x3d\xcd\x95\xb5\xdf\x87\x50\x9f\x02\x6a\x1f\x2a\xb8\xaf\x40\xfa\x3f\x12\x2f\x7f\xfd\x13\x00\x00\xff\xff\x1f\x48\x78\x01\x9f\x04\x00\x00")

func shoalDelegatesJsonBytes() ([]byte, error) {
	return bindataRead(
		_shoalDelegatesJson,
		"shoal/delegates.json",
	)
}

func shoalDelegatesJson() (*asset, error) {
	bytes, err := shoalDelegatesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shoal/delegates.json", size: 1183, mode: os.FileMode(420), modTime: time.Unix(1638407516, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mainnetDelegatesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xd3\x49\x6f\xe3\x36\x14\x07\xf0\x7b\x3e\x85\xe0\xab\xa6\x36\x49\x51\xa4\x64\x60\x0e\xa4\x36\x2b\xb1\xe2\xdd\x8a\x5d\x14\x81\x36\x5b\xb2\x56\x6b\x89\xac\x14\xf3\xdd\x0b\xb7\x99\x5b\x82\xb6\x73\x7d\x0f\x8f\xc0\xff\xff\x03\x7f\x7f\x10\x84\x3f\x1f\x04\x41\x10\x46\x85\x97\x47\xa3\xa9\x30\xca\xbd\xa4\xf8\x0d\xc0\xd1\xb7\x7f\xc6\x5e\x18\xd6\x51\xd3\xdc\x37\xe0\xc6\x34\x26\x2b\x0a\x04\x04\x99\x10\x11\x2e\xe9\x1a\xd5\x21\xd3\x90\xa2\x61\x5d\xc5\x1c\x11\x95\x52\x0d\x40\xf3\xe7\x71\xd5\xf9\xaf\x69\x34\xdc\x8f\xf9\x92\x9b\x87\x99\x34\x88\x3b\x69\x5d\x6f\x9e\x5d\xbf\xbf\xde\xca\x21\x42\x2f\x46\xab\xa1\xe3\xd3\x36\x56\xba\x60\xe8\x57\x2b\xa5\xdb\x2f\x77\x71\x96\xd3\xb2\x8a\xe3\x10\xc0\x1b\x3f\xa7\x16\x7f\xcc\x36\xc0\x0e\xd3\xf3\x5e\xa6\xe5\x61\xd3\x2f\xa3\xc1\x5a\xa7\xf6\xcc\x71\xbe\x4f\xa7\xd3\x6c\x9d\x1b\x5a\x1d\x0c\x51\x72\x7b\xbc\xdc\xc2\xf4\x29\xe3\x47\xd7\x98\x0f\x0d\xbb\xf8\x12\x6f\xa1\x5c\x4c\xac\xe0\xd6\xcd\x73\x0a\x88\x18\x5f\xe4\x67\xd1\x09\x27\xcb\x18\xf5\xbb\x63\x55\xd1\x56\x67\xde\xf6\x74\x36\xfd\x68\x15\x34\xc6\xcc\xdd\x5a\xea\x22\x7b\x06\xbd\xf1\xfd\x67\x8a\xb7\xb2\x4d\x8a\xf3\x6b\x55\xf6\x51\x3d\x9a\x0a\x10\x81\x8f\x45\x11\xb5\x7d\x59\xa7\xaf\xf7\x8e\x46\xd3\x8f\x22\x05\x61\x94\x54\xf7\xc4\x50\x1a\x23\x88\xc7\x32\x19\x43\x42\x3f\xde\xba\x77\x52\xd6\xed\x68\x2a\x28\x84\x82\xbf\x47\x3f\x1e\x04\xe1\xc7\xb7\xaf\x1c\xd0\xa7\x0e\x0a\xc7\x8c\x99\x12\xe0\x9a\x66\x00\x89\xca\x18\xab\x1c\x43\xa4\x18\xb2\x41\x74\x93\x50\x09\x12\x5d\x33\xa0\xf1\x99\x03\x77\x45\xdb\x7d\x3e\xed\x45\xf9\xb6\x6a\xb3\xc4\x56\x8c\x2a\x94\x7a\x47\xc1\x3c\xe8\xd0\xcb\xfa\xba\xc8\xe6\xc1\x8c\x89\xfd\x90\x59\xee\xb1\xdc\x25\x2f\x07\x9f\xdb\x8b\x75\xdf\x6a\x7c\xa5\xbb\xf3\x7c\x85\x61\xe0\xee\x94\x32\xec\xdf\x5a\x7e\xa2\xfe\x3c\x75\x4b\xdc\xdc\x1d\xb6\xb3\x89\x75\x6d\xeb\xa0\x14\xdf\x83\x30\x31\xe8\x2c\x40\xc1\x31\x83\xe9\xa1\x81\xe5\xb2\x3e\x31\x17\x7b\xf8\x66\xe5\xa7\xc2\x91\xf9\x93\x73\xd1\x09\x6c\xf5\x62\x5d\x29\x3b\x37\x39\x17\x18\x37\x87\x04\xf7\x9e\x9a\xba\x81\xe6\xc5\x6f\xe6\x62\x23\x02\x6b\x63\x9e\xd9\x97\x0e\xf0\x7f\x39\x40\x04\xc7\x50\x21\xbf\x0a\x21\x7d\x0a\x81\x89\x6a\x22\x44\x39\xa1\x10\x9a\x88\x9a\xb2\xce\xb1\x8a\x09\xc1\x12\x41\x88\xe8\x50\xd1\x18\x53\x29\x25\x9f\x41\x38\x31\xd8\xfb\xbe\xf7\xde\xb0\xba\xba\x98\x9a\x58\x2c\x3a\xfb\xec\xfa\xae\xab\xb8\xf1\x31\xaf\x96\xbd\x75\xeb\x52\xf5\x3a\x8f\xe0\xe3\x53\xb0\x91\xdc\x34\x45\xd6\xfc\xb8\x99\xc8\x93\xdd\x52\x4d\x1c\x27\x7c\x49\x43\xb6\xa8\x2b\xca\x86\xc3\x49\xf5\xe2\xee\x3d\xe1\x35\xbb\x43\xd4\xc1\xfb\xca\x6f\x9a\xd2\x46\x41\x2b\x32\x20\xe1\x2e\x87\x60\xae\x6c\x57\x49\x71\xd9\xdb\x8f\xdb\x49\xb6\x5b\xf8\x96\xa2\x98\xfa\x66\x5d\xc1\x4c\x75\xec\xe8\xea\x2d\x48\x26\x03\x2d\xd0\x75\x90\x77\x6b\x71\x2f\x37\x96\xc8\x52\x9b\x1f\xed\xba\x1c\x38\x1d\xd8\xf9\xeb\x0f\x01\xfe\x23\x04\x54\xc7\x78\x0c\xa9\x3c\x86\x50\xfe\x17\x87\x87\x3f\x1e\xfe\x0a\x00\x00\xff\xff\xce\xa2\x8b\xf9\x9c\x04\x00\x00")

func mainnetDelegatesJsonBytes() ([]byte, error) {
	return bindataRead(
		_mainnetDelegatesJson,
		"mainnet/delegates.json",
	)
}

func mainnetDelegatesJson() (*asset, error) {
	bytes, err := mainnetDelegatesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mainnet/delegates.json", size: 1180, mode: os.FileMode(420), modTime: time.Unix(1639382339, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"shoal/delegates.json": shoalDelegatesJson,
	"mainnet/delegates.json": mainnetDelegatesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"mainnet": &bintree{nil, map[string]*bintree{
		"delegates.json": &bintree{mainnetDelegatesJson, map[string]*bintree{}},
	}},
	"shoal": &bintree{nil, map[string]*bintree{
		"delegates.json": &bintree{shoalDelegatesJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

