// Code generated by go-bindata.
// sources:
// shoal/delegates.json
// DO NOT EDIT!

package preset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _shoalDelegatesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd8\x4b\xcf\xaa\x5a\x9a\x07\xf0\x79\x7d\x8a\x37\x7b\x4a\xb5\xae\x3b\xb0\x93\x1a\x70\x55\x40\x45\x11\x10\xed\x74\x4e\xb8\x2b\x82\x80\xa2\x5c\x3a\xf5\xdd\x3b\xef\xee\xaa\x73\x26\xdb\x4e\x0f\x9c\x68\xe2\x0a\x26\xac\x5f\xd6\x7a\xfe\xcf\xf3\x9f\x7f\xfb\xfa\xfa\xfa\xfa\xef\x5f\x9f\x5f\x5f\x3f\x6e\x61\x95\xfe\xf8\xf9\xf5\xe3\x71\xae\xc3\xf2\x3f\x00\xfc\xf1\xf7\x7f\xaf\x84\x49\x72\x4f\x1f\x8f\xef\x45\x30\x88\x1a\x16\x18\x93\x20\xc5\x19\x81\x7a\x12\x47\x91\x00\x05\x96\xc5\x28\x11\xa9\x2a\xca\x30\xc9\x20\x4f\x30\x50\xff\x7a\xbc\x79\x46\x7f\x5c\xd3\xf1\xfb\x71\xd9\xa2\xc4\xd2\xb6\x49\x3c\xac\x3b\x07\x3c\xa4\xdb\xaa\x06\x7a\x59\x1e\x94\xc4\x7d\xa8\xd2\x7e\xb1\x2a\xdb\xd5\xb4\xb6\x1f\x7a\xe7\xea\xb6\x87\x28\x04\x93\x2b\x11\xd2\x91\xc8\x3c\x5f\xef\x8f\x4a\xe0\x17\xfa\xe1\xba\x6e\xa7\x65\xd8\xca\x58\xb2\x94\xa4\xb5\x27\xbc\xfe\xc7\xcf\x9f\x3f\xd7\xfe\x63\x38\xa9\x99\xf2\x72\x43\x21\xd1\x43\x63\xf2\x3a\x3d\x8b\x39\xb8\x57\x15\x72\x98\x47\x27\xad\xe1\xfd\x40\x3a\x2d\xd5\xbd\x56\xcd\x85\x4c\x72\x59\x5d\x5d\x4d\x75\xef\x9f\xa9\x59\xdc\x63\xb7\x33\x75\x5d\x39\xca\xcf\x63\x1a\xbf\x9c\xd7\x89\xab\x23\xb6\x97\x77\xd2\x3f\xfe\x7a\x8f\x57\xdd\x5d\x6e\xf9\x1f\x4d\xdd\xa7\xf7\x1f\x3f\xbf\x20\x00\x7f\x2e\xdd\xd2\xae\xaf\xef\xd7\x3f\xbe\x77\xea\xc7\xcf\x3f\xf7\xf4\xeb\xeb\xc7\xa5\xf9\x7e\x6f\x4a\x66\x50\x20\x33\x48\x66\x22\xf9\xf3\x0f\xbf\xb7\xa6\xbe\x77\x3f\x7e\x7e\x09\x8c\x07\xff\xfa\xf1\x9f\xbf\xbe\xff\xf9\xf7\xff\xd3\x06\xbd\xb1\x09\xf5\x0c\xd1\x58\xc6\x34\x94\x81\x08\x69\x44\x94\x0c\xf3\x90\x68\x20\x51\x43\xaa\x43\x81\x69\x34\x06\x19\x88\x7f\x6f\x63\x5f\xe2\xca\x0d\x3b\xbd\xe6\x07\x13\x38\xf6\xe6\xa2\x1f\xa3\x97\xc2\x49\x01\xd9\x5e\xc4\x78\x0a\xc3\x00\x95\x1e\xa7\xe8\x2b\xf3\xa1\x0f\x51\x47\x8d\x8d\x61\x2c\x77\x2b\x03\x85\x96\x3e\x35\x1a\x78\x26\xc0\xba\x9a\x83\xbc\xda\x5a\xf1\xb1\x2c\xc7\x54\xf4\x3c\xed\xf1\x6d\xe3\x66\x73\xcc\x76\x09\x6a\x8d\xa5\x6c\xb5\x86\xac\x83\x75\xb7\xcb\xd2\x6b\xee\x1d\xd8\xfa\x06\x0a\x99\x57\xb2\xb3\x1b\x4a\xa8\x7f\xe5\x29\x70\xe0\xf9\x2a\xc7\x3c\x60\x72\xbe\xa4\xc7\xa0\x3d\x9c\x23\xc9\x1a\xab\x0d\xc5\xdb\xb1\x5d\xae\x79\x7e\xbf\x6b\x8d\x2c\xda\x69\x9f\xb1\x21\x64\x86\x30\x9a\x41\x01\xcd\x20\xc3\x1f\xd0\xc1\x6f\x74\x12\xaa\xf2\x50\x42\x98\x66\x20\x23\x88\x25\x22\x4e\xf8\x2c\x55\x78\x11\x31\x39\x14\x81\xc8\x08\xa6\x94\x6a\xd2\xef\x75\x36\xe2\xc6\xeb\xa5\xcb\x59\xdc\xc8\x34\x1b\x93\xfb\x66\x31\x1a\x8a\x39\x81\xa5\xb4\x44\xc7\xdc\xd0\x81\xda\x47\xb2\xda\xa8\xfe\x26\x5d\x03\xf3\xc6\x99\x8e\x62\x34\x54\x48\x7b\xeb\xe8\x90\x90\x0b\x88\xa1\x36\x2f\x29\x9e\x3a\x07\xed\xd9\x5d\xef\xc4\xe1\x66\x6b\xc2\xb7\x8e\xa3\x6d\x9a\xf8\x6e\xa6\xf3\xca\x9d\x7a\x21\xc8\x03\xd9\x71\x34\x67\x25\xed\xfc\x1d\x32\x16\x15\x28\x89\x71\x39\xb4\x60\x72\xdc\x83\x5d\xee\x96\xee\x61\xbe\xd6\x17\xc0\x7d\x0e\x8e\xec\x69\xa7\xe0\x79\xf7\x38\x25\x5f\x9f\x9b\x63\xd2\x6e\xa7\x73\xa6\xbd\xea\x69\x79\xfb\x94\x0e\x45\x33\x88\x67\x08\xcd\x20\x14\x3e\x60\x43\xde\xd8\x30\x10\x45\x28\x93\x44\x49\x24\x00\x65\x22\xa5\x72\x0a\x84\x48\x01\x12\x4f\xb5\x58\x8a\x35\xa4\x00\x49\x10\x04\xfe\xf7\x36\xfa\x38\xb5\xb0\xdc\x6d\x77\x14\x24\x86\x73\xb2\x40\x08\x1f\x2e\x09\xed\xd6\x02\x7c\x8b\xdb\xfc\x10\xbb\x7d\xa8\x8c\xc3\xb5\x7c\x4c\x62\x15\x5c\x2e\xa9\x57\xd5\xf7\x38\xa8\x64\x2b\x7a\xce\xab\xe2\xd8\x2b\xb7\x3d\xb0\xe6\x45\xa4\xed\x5f\xc3\xed\x72\xc4\xeb\x86\x27\xdf\x36\x99\x7c\xc4\xbb\xb0\x20\x8b\x68\xad\x6c\x7a\x78\x8e\x07\xee\xbe\x8d\x7d\x7a\x3d\xeb\x97\x15\x5e\xca\x17\x43\xa6\x72\x8e\x46\xe4\x38\x55\x7c\x0b\x0c\xda\xb7\x8d\x6f\x59\x57\xf2\xa8\xeb\x05\x58\x44\xaf\x93\xf2\x78\x34\xdc\x5c\xbb\xb7\x38\x5d\x9d\xa3\x2e\x0a\xed\xa3\xf4\x29\x9b\xef\x5b\x4d\x9c\x51\x38\x43\x04\x7c\x00\x87\xbe\xc1\x51\x21\x14\x18\xe0\x09\xa2\x7c\x06\x43\x96\x21\x0c\x63\x02\x69\x9c\x48\x19\xaf\xc1\x8c\x48\x1a\x11\x12\x0a\xf5\xdf\xe3\x68\x73\xf3\x29\xaf\x6e\x07\xdc\xae\xcf\xf0\xb0\xcf\x64\x34\x6a\x3b\xbb\xf7\x68\xbd\x33\xf1\x01\x55\x5c\xd1\x38\xc2\x62\x5d\x6f\x46\x63\x81\xaa\xc5\xf6\x15\xd9\x4f\x5b\x7a\x51\xef\x60\x70\x5e\xc6\x48\xb7\xe4\x48\xd6\xd4\xec\xe8\x60\xed\xd8\x9b\x06\xdc\x3f\x0a\xad\xff\xc6\xb9\x9f\xa4\x3e\x99\x14\xae\x59\x13\x2b\xe1\x8d\xf9\xbd\x1e\x8e\xbd\x5b\x9f\x6e\x32\xa8\x59\x60\xef\x0f\x8f\x03\x97\x78\x50\x5d\x98\x87\xf8\x38\x0f\x9a\xf1\xda\xe4\xf6\xf1\x21\x65\xbe\x34\x16\xa2\x98\xd0\x93\x5b\xf7\xa6\x9a\xb6\xaf\xbb\x3d\xe9\x49\x8b\x37\xe4\x7a\x93\x3e\x55\x72\xd0\x0c\xa2\x19\x22\x6c\x06\xf1\x27\x70\xd8\x3b\x1c\x31\x42\x54\x53\x00\x4b\x78\x0d\x60\x1c\x51\x51\xe3\x09\x86\x04\x23\x2d\x52\x01\xc4\x7c\x46\x23\x45\x10\xd8\x1b\x1c\xd8\x9e\x03\xcb\xdd\xb9\x5d\x67\x5a\x27\xb6\x7f\x16\x9b\x81\xec\x25\x72\x75\x02\xe8\x9a\x91\xe7\x2f\x6d\xd4\x8a\xa5\xa9\x2d\x7c\xa1\xda\xea\xc7\xf9\xfe\x32\x9c\x2f\xc5\xa2\xcc\xe5\x4b\x5d\xc0\x82\x9f\x0e\x62\x1b\x6a\x45\x1f\x04\xfe\xc2\xbb\x6b\x3e\x4a\x56\x7b\xf0\x8d\x63\xaf\x2b\x68\x95\xab\xf4\x50\x90\x07\x08\xc7\x45\x76\x3c\x2b\xec\xe9\xf7\x8b\xd3\x7a\x71\x3b\xe2\x65\x58\x3a\x2b\x55\xeb\x09\x0e\xc6\xfa\x78\x4f\xa4\x68\x12\x84\x74\x61\x95\xd0\x27\x1e\x14\xf1\xd0\x86\xca\x5a\x62\xb7\x31\x33\x9d\x3b\x2f\x74\x35\x25\x50\xe6\xfa\x0f\xe2\xe0\x19\x44\x68\x86\xa0\xf8\x01\x1c\xfe\x0d\x0e\x4d\x49\xa6\x8b\x92\x20\x32\x01\xf0\x29\xa2\x44\x90\x21\x05\x40\x15\xb2\x8c\x25\xa9\x2e\xc7\x2a\x92\x29\x11\xf1\xef\x71\x8c\xec\xe4\xcc\xdb\xc6\xf2\x37\x90\x5f\x94\x5d\xd7\x19\x6c\x0c\x16\x74\x2c\x42\xb1\xe0\xd3\xc1\xc9\x1a\xd4\x85\xb7\x27\x06\xbb\xdd\xa6\x77\xda\x47\x73\x22\x31\x3d\xdc\xbc\xe4\xb4\x3f\x3f\xbb\x35\xa0\x6e\xca\x3f\xf4\x26\xed\xc5\x7d\xde\xc0\xc2\x7a\xed\xb7\x3c\xac\xbf\x71\x8a\xf4\x64\x4c\x8d\xb5\xd0\xa4\x45\xa9\x94\x58\xb2\x72\x4c\x9e\x37\x14\xfa\x27\xd4\x3c\x93\x0b\x51\x8d\x5c\x32\x07\xc5\x2e\x9f\xfb\xeb\x29\x95\xeb\x05\xa8\x0e\xab\xb6\x3a\xdd\x2e\x69\x71\x8a\x6f\x48\xda\xd7\xf7\x83\x31\x2c\xb9\x73\x2c\xe8\x65\x6e\xfa\xa2\x9e\x4c\x1f\x0b\x6b\xff\x7b\x72\x28\x9c\xf1\xf4\x03\x36\xc2\x5b\x1b\x2c\x45\x58\x48\x23\x02\x12\x42\x30\x4e\x18\x09\x05\x92\x61\x45\xd0\x12\x05\x27\x18\x53\x99\x10\x5e\x80\xbf\xb7\x91\xfc\xd2\x78\x9a\xd2\xb4\xa4\xc2\xcb\xb2\x69\x95\x5b\x96\x33\x28\xf4\x62\x3e\x21\xd7\xbe\xb8\xa4\xef\xf6\x77\xfe\x72\x2d\xd8\x01\xac\x85\x53\x17\x73\xfd\x94\xf3\x51\xda\xb3\x0d\x75\x5f\x14\xc6\xf8\x52\x3d\x5f\x0f\x61\x3b\x77\xa4\xcb\x83\x9e\xf3\x5b\x31\xf6\xe2\x2f\x9b\xfb\xaa\x97\x9f\xaa\x3e\xec\x47\x2e\xe9\x8f\x3c\x60\x07\x70\x15\x4f\x17\x24\xdb\xb6\xeb\xba\x7e\xb2\x10\x09\xa8\x94\x9d\x6d\x1d\x87\x67\xd2\x7b\xb5\xb5\x18\x05\xb0\xcd\xb6\xed\xe1\xc0\x48\x7b\x5b\x2d\x6f\xb8\x46\x25\x73\xa3\x1d\xd2\x4c\xdd\xbb\xaf\x6f\x5c\x45\x3f\x16\x07\xbe\x43\x34\x3f\x43\x40\x98\x21\xfa\x01\x1d\xf8\xae\xe6\xf0\x9a\x8c\x19\x4e\x98\xca\x83\x30\xc3\x28\x23\x84\x11\x99\xf1\x69\xc6\x98\x26\x20\xcc\x18\x1f\x65\x2a\x8f\xde\x05\x82\x57\x9b\x1f\xeb\x81\x4b\xe4\x4e\xd1\x0b\x1f\x46\x58\x55\xd5\x68\xcc\xc4\xed\xc6\x3d\x92\xb6\xbe\x35\x93\x85\xa4\x2b\xf7\x70\x32\x72\x2a\xa3\xa4\xaa\xc6\xa7\xbf\x2c\x56\xb1\xb9\xb3\x49\x1f\xde\xb7\x2f\x59\xc3\x42\xba\xbc\x14\x68\x73\x28\x44\x7b\x93\xb8\xee\xe3\x57\x20\x88\x7a\xe5\x69\x76\xb2\x51\x4c\x8a\x1f\x5c\x63\x6a\x4b\xe9\xd2\x31\xfd\xab\xe6\x54\x51\x67\xb1\x3e\x0e\xee\x8f\xe7\x20\xc8\x9b\x93\x3d\x42\x33\x6d\x45\xa9\xe0\x3d\x2d\x0b\x0f\xe3\x54\xb5\x59\xa5\x75\x37\xdf\x14\x7a\xcd\xb7\xea\xb9\x4c\x9f\xfb\x70\x95\x38\x61\xff\xa9\x93\x03\x85\xef\x08\x3d\x83\x54\x98\x89\xfc\x07\x70\xde\xd5\x1c\x85\x85\x29\x0b\x15\x10\x27\x0a\xaf\x32\xa6\x30\x4d\xe5\x53\x02\x01\x0d\x79\x95\x41\x2d\x45\x21\x12\x11\x01\x6f\x70\x56\xc6\xa1\x5b\x38\xf9\x4b\x87\x73\x60\x5a\x65\x34\xec\x86\xa3\x73\xd2\x79\xd4\x3f\x0a\xef\xd9\x21\x02\x0e\xbd\xb3\x4e\xf1\x56\x1e\x56\xd7\xdd\x7d\x4c\x2a\x31\x71\x2b\xaf\x17\x56\x27\x6d\xe3\x28\x7a\xf0\xda\x4a\x47\x6c\x3f\x2e\x5b\x4d\x81\x56\xaf\xf5\xfc\xee\x70\xff\x55\x73\x6a\xe3\x3e\xa9\xe5\xa6\x8f\x86\x6c\xa7\xb6\x64\xae\x1f\xfb\x79\x95\x57\x57\xc5\x0c\xc9\x8a\xdf\xea\xf3\xa9\x1b\x37\x75\x8e\x9d\xa2\x1e\x30\x1a\x3b\x8e\xdf\x54\x96\xec\x8f\x07\x2e\xbf\x5c\x0c\xa5\xba\xed\x15\xbf\xba\xac\xba\x2b\x38\xae\xc3\xa4\x76\x20\xf4\x76\x9b\x4f\xa5\xb5\x7f\xe1\x20\xc8\x66\x08\x7d\xa0\x0b\x85\xef\x8a\x4e\x96\x61\x51\x10\x43\xac\x32\x22\x0b\x38\x43\xa2\x8c\x79\x51\x54\x42\x0d\x51\x06\x43\x51\xc3\x62\x2a\x63\x51\xd5\xde\xe8\x04\x06\xbe\x6e\xb7\x34\xa8\x35\x49\x03\x53\xad\x24\x6d\x8a\x1f\xc2\xc3\xb8\x5f\x57\xbc\x3c\xa4\x99\xa2\xd3\x07\xe1\xb3\x72\xaf\x6a\x17\x6d\x41\xb4\xd5\xa3\xe0\x6f\x41\xd3\x59\xe9\xfe\x98\x65\xa3\xac\x7b\x3e\x98\xb0\xd6\xae\x96\x8e\xc7\x72\x6e\x9f\x16\xea\xf0\xab\xcf\xb9\x9e\x78\xf9\x76\xec\xfa\xf3\xb8\x74\x2c\x87\xe4\xbe\x9c\x34\x64\x7b\x0c\x74\x45\x66\xa7\x44\x8b\x54\x6f\xe9\x6f\x2e\xd8\xd3\x96\xaf\xd5\xe6\xe2\xaa\x50\xf5\xdc\x86\xaf\x63\x37\x2b\xef\x7d\x5a\x9c\x93\xe0\x7c\xe2\x30\x4b\x14\xa6\xbb\x80\x9b\xe6\xe8\x32\xd0\x3e\xff\xac\x0e\xe4\xbf\xf3\xf4\x07\x70\xde\x55\x9d\x90\x88\x9a\x48\x78\x5d\x26\x29\x01\xb2\x0e\x01\x83\x54\x50\x12\x55\xc4\x8a\x92\x65\x02\x8b\x55\x41\x15\x04\x22\xbe\xb9\xd7\xca\x70\xc5\x57\x0d\x1c\xef\x95\x6a\x5a\x99\xa9\x6c\x00\xbf\xa6\x89\x3a\x04\xfb\xe2\xa9\x89\x97\x75\xd3\x2a\xea\x70\x0d\x48\x5f\x2d\x47\x7e\xce\x35\x09\x1b\xa4\x73\xb3\x34\xbb\xe5\x44\xd4\x05\xd5\x95\xdb\x3d\x5c\x90\x57\xa8\xbe\x2e\x9a\x81\x32\xec\xef\x9b\x9d\xf1\xab\xea\x4c\x8f\x58\x6c\xa7\xc3\x74\x0b\x84\x62\x7e\x1e\x71\xec\x04\x3b\x60\xc3\x3c\xb9\xd1\xb1\xbc\x5e\x77\x8b\x51\xe2\xec\xf9\x78\x3c\xc7\x15\x2e\x57\xf5\x0e\x04\x6c\x28\x34\x65\x1e\x73\xcd\xf0\xec\x17\xd9\x6a\x10\xc4\x56\x3f\xe2\xb4\x78\x99\xf1\x3c\xb4\x03\xc3\x7d\x7c\x14\x87\xcd\xa0\xf8\x9d\x0a\x3e\x80\x23\xbe\x9b\xad\x21\x86\x05\x5d\xa4\x32\x82\xba\xc0\xa7\x21\x41\xbc\x4e\x42\x41\xe0\xf5\x08\x48\x54\x13\xe5\x10\x45\x40\x80\x6f\xee\x35\x69\xeb\xf2\x03\x0c\x96\xd2\x2e\xe5\xdc\xec\xee\xba\xbb\xfc\xd4\x16\xe3\x42\xd4\xc2\x79\x50\xe3\xad\x55\x6d\x9f\x27\x89\xd9\x58\x12\xeb\xa9\xbd\xe3\xb2\x95\x0f\x1c\x6a\xc6\xbc\x75\x84\xd7\xad\x2b\x96\x70\x77\xf2\xa2\xcb\x0e\x07\xea\x98\x9c\x1a\x44\xa7\x49\xb1\x7e\xe1\x44\x57\x58\x75\x92\x99\x34\xd1\x46\xe0\x76\x62\x79\x85\x79\x39\x68\x19\x91\x72\xd3\xcf\x25\x2e\x67\xde\xaa\x55\xe6\x92\x96\xb7\x49\x5e\x56\x42\xed\x86\xaf\x83\x13\x18\x73\x79\x5c\x8d\x51\x91\x9b\x7d\x68\x0b\x55\xb6\xb0\x65\x27\x83\x85\x2d\x57\xf7\x9d\xfd\x62\x1f\x3e\x39\x88\x7e\x87\xe9\x0f\xcc\x08\x10\x78\x17\x09\x78\x19\x61\x31\xc4\x92\x2c\x2a\x94\x01\x15\xc7\x91\x86\x44\x9e\x17\xa5\x34\x23\x00\xc1\x4c\x24\x19\x91\xb3\x37\x6d\xe8\x86\x97\x17\xf3\xbd\xaa\x9b\xfa\x55\x90\x7d\x1e\xf9\x5b\xbf\xf0\x93\x04\x2c\x65\xd7\x03\xe9\xaa\x33\x83\x93\x5b\x86\x06\x01\x97\x80\xa4\x2c\xb3\xe7\xd5\x38\xdf\x5a\xdd\x15\x1e\xf1\x5c\xa9\xce\x85\xa7\x05\x6a\xcf\x9f\x3c\x7f\x4a\xef\x99\x34\x41\x77\x10\x07\xfc\x6b\xba\x66\x37\xc5\x7a\xd9\xea\x32\x03\x6c\x92\xfc\x16\x56\xd8\x58\x57\xdb\x74\xcb\x9d\xc0\xd3\xad\x6e\xd8\x3d\x77\x0f\x2d\x97\xe7\xeb\x58\xbf\xec\x38\x71\xd2\x34\x1b\x6e\x17\xb5\x7d\xf3\x63\x1c\xbd\x76\x4a\x56\xbb\xeb\x10\x4a\x76\x71\x5f\x70\x67\xdb\x8e\x3c\x78\x5e\x7a\x9f\xea\x74\xfe\xad\x83\xc1\x0c\xc2\x0f\x4c\xd7\xd0\xbb\xb9\x34\x1f\x02\x2a\x42\x39\x0d\x61\xa4\x26\xb2\xce\xa0\xa0\x87\x2a\x00\x42\xa4\x30\x99\x07\x21\xd2\x12\x01\x61\x9e\x91\x37\x7d\xe8\x55\x23\x6a\x13\x3d\x1a\x4f\x97\x88\x9f\xb3\x6d\x32\xd9\xd9\x06\x8e\x8b\xe0\x25\x24\x07\xaf\x3a\x71\xbb\x6d\xd1\x21\x6b\xbf\x7b\x49\xf3\x33\xd9\x1c\xfb\xf1\x58\x7a\x88\x1e\x86\xdc\x63\x06\x0d\x2f\xdb\xf2\x16\x45\xda\xb0\xdf\xf2\xf9\x18\x6e\x5f\x12\x76\xfc\xc7\xaf\xaa\x23\x35\x1b\xb6\x7d\xe5\xca\x8b\xbf\xad\x7b\xec\x35\x6b\x2c\xce\x49\x4a\x37\x86\x90\x6f\xf1\xbe\xcf\x82\x66\xed\x39\xe7\x30\xca\xe7\x59\x1d\x6d\x1d\x92\x96\xcf\xd7\x31\x75\xd3\x97\x28\x9c\x54\xa1\xa2\x42\x92\x3f\xf5\x69\x35\x69\x97\xc3\xe3\x29\x99\x85\xae\xf6\x1c\xfe\xd4\x90\xe0\xcf\x4c\x20\xcc\xd8\xff\xcb\xe6\x6f\x5f\x5f\xff\xf5\x3f\x01\x00\x00\xff\xff\xab\x2d\xfc\xfc\x38\x18\x00\x00")

func shoalDelegatesJsonBytes() ([]byte, error) {
	return bindataRead(
		_shoalDelegatesJson,
		"shoal/delegates.json",
	)
}

func shoalDelegatesJson() (*asset, error) {
	bytes, err := shoalDelegatesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shoal/delegates.json", size: 6200, mode: os.FileMode(420), modTime: time.Unix(1599457242, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"shoal/delegates.json": shoalDelegatesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"shoal": &bintree{nil, map[string]*bintree{
		"delegates.json": &bintree{shoalDelegatesJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

