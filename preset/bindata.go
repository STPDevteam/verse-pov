// Code generated by go-bindata.
// sources:
// shoal/delegates.json
// DO NOT EDIT!

package preset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _shoalDelegatesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x99\x4f\xaf\xb2\x5c\x96\xb7\xe7\xf5\x29\xee\xdc\x53\xeb\xd5\xfd\x8f\xbd\xe1\x49\x6a\x00\x08\x0a\xa8\x28\x82\x80\x6f\x3a\x15\x60\x03\x8a\x20\xa0\x28\x42\xa5\xbe\x7b\xc7\x93\x4e\x77\x3d\x03\xab\x93\x3e\xc7\x81\x93\x9d\x60\xb6\x97\x6b\xfd\xd6\xb5\xfc\xff\x7f\xf9\xf5\xeb\xd7\xaf\x7f\x7c\xbd\xbf\x5f\xbf\xaf\x51\x95\xfe\xfe\xf5\xc7\xaf\xdf\xf7\x53\x1d\x95\xff\x0f\xc0\xdf\x7f\xfd\x9f\xc3\x88\xf3\x5b\x7a\xbf\xff\xfe\xe3\xd7\x6f\xf0\x22\x11\x64\x94\x43\x92\x12\xcc\x41\xc4\x08\xe2\x12\x02\x52\x8a\xe2\x48\xe2\x98\x8a\x80\x49\x62\x94\x41\x2c\xfe\xeb\x03\x9a\x47\xfc\xf7\x4b\x3a\x7c\x7d\x80\x62\x09\xc4\xd2\xb6\x3c\x79\xad\x3b\x07\xdc\xe5\xeb\xaa\x06\x7a\x59\xfa\x2a\x77\xef\x73\x79\xbf\x58\x95\xed\x6a\x5c\xdb\x77\xbd\x73\x75\xdb\x43\x02\x04\xa3\x2b\x13\xd2\x91\xd8\x3c\x5d\x6e\xf7\x4a\x64\x0b\xdd\xbf\xac\xdb\x71\x19\xb5\x0a\x96\x2d\x95\xb7\xf6\x88\xd7\x7f\xfb\xe3\x8f\x3f\xd6\x87\xfb\xeb\x38\xcf\xd4\xa7\x1b\x89\x5c\x8f\x8c\xd1\xeb\xf4\x2c\x99\xc0\xfd\x5c\x25\xfe\x2c\x3e\x6a\x0d\x3b\x04\xf2\x71\x39\xdf\x6b\xd5\x4c\xcc\x64\x97\xd6\xd5\xc5\x9c\xef\x0f\x27\xc1\x2c\x6e\x89\xdb\x99\xba\xae\x86\xca\x23\x4c\x93\xa7\xf3\x3c\x4e\xea\x98\xee\x95\x9d\xfc\xb7\x7f\xbd\xca\xb3\xee\xce\xd7\xfc\xef\x4d\xdd\xa7\xb7\xf7\x7d\x20\x00\xff\x72\x7a\x4d\xbb\xbe\xbe\x5d\xfe\xfe\xfe\xc6\xde\xa7\xff\xf8\xf5\xfb\xdc\x7c\x5d\x1b\x0b\x53\x48\xc1\x94\x09\x53\x84\xc0\xef\xbf\xfe\xfa\xdd\xd4\xb7\xee\x7d\x22\x52\x06\x7e\xfd\xf3\xeb\x11\xff\xfc\xf5\xd7\x5f\xff\x1b\x18\xf4\x11\x0c\x13\x20\xe5\x1c\x47\x38\xe1\x09\x84\x20\x21\x51\x42\x48\x1c\x67\x34\xe1\x31\xc9\x38\x14\x13\x04\x79\x26\xf0\x8f\x60\xec\x73\x52\xb9\x51\xa7\xd7\xec\x65\x02\xc7\xde\x9c\xf5\x30\x7e\xaa\x13\x39\x20\xdb\xb3\x94\x8c\x51\x14\xa0\xd2\x9b\xa8\xfa\xca\xbc\xeb\xaf\xb8\x13\x8c\x8d\x61\x2c\x77\x2b\x03\x45\x96\x3e\x36\x1a\x78\x70\x60\x5d\xcc\x97\xb2\xda\x5a\x49\x58\x96\x43\x2a\x79\x9e\x76\x7f\x83\x71\xb3\x19\xa6\x3b\x8e\x5a\x63\xa9\x58\xad\xa1\xe8\x60\xdd\xed\xb2\xf4\x92\x7b\x3e\x5d\x5f\x41\xa1\x30\x35\x3b\xb9\x91\x8c\xfa\x67\x9e\x02\x07\x9e\x2e\x4a\xc2\x00\x55\xf2\xa5\x10\x06\xad\x7f\x8a\x65\x6b\xa8\x36\x02\xde\x0e\xed\x72\xcd\xd8\x7e\xd7\x1a\x59\xbc\xd3\x7e\x04\x8c\x40\xa6\x08\xa0\x29\xa1\x53\x88\xe1\x37\xc0\xe0\x8f\x60\x00\x4b\x31\x14\x71\x96\x92\x0c\x73\x9a\x92\x34\x62\x0c\x40\x26\x44\x44\x4c\x91\x98\xb0\x0c\xa7\x3c\x41\x5c\xfa\x08\x66\x23\x6d\xbc\x5e\x3e\x9f\xa4\x8d\x22\x64\x03\xbf\x6d\x16\x83\xa1\x9a\x23\x58\xca\x4b\x14\xe6\x86\x0e\xe6\x7d\xac\xcc\x9b\xf9\x61\x93\xae\x81\x79\x9d\x98\x8e\x6a\x34\x82\x98\xf6\x56\xe8\x90\x68\x12\x10\x63\xde\x3c\xe5\x64\xec\x1c\xb4\xa7\x37\xbd\x93\x5e\x57\x5b\x13\xdf\x60\x1c\x6d\xd3\x24\x37\x33\x9d\x55\xee\xd8\x8b\x41\x1e\x28\x8e\xa3\x39\x2b\x79\x77\xd8\x21\x63\x51\x81\x92\x18\x67\xbf\x05\xa3\xe3\xfa\x76\xb9\x5b\xba\xfe\x6c\xad\x2f\x80\xfb\x78\x39\x8a\xa7\x1d\x83\xc7\xcd\x9b\xa8\xf9\xfa\xd4\x84\xbc\xdd\x8e\xa7\x4c\x7b\xd6\xe3\xf2\xfa\x83\x60\x20\x9e\x22\x02\xa6\x90\x4a\xdf\x20\x43\x3e\xf7\x32\x21\x91\x70\xcc\x41\x9c\xb1\x34\x16\x30\xe0\xe8\x8d\x84\x90\x04\x89\x94\x0a\xa2\xc8\xa3\x84\x0b\x29\xfc\xdc\xcb\xf4\x61\x6c\x61\xb9\xdb\xee\x04\xc0\x0d\xe7\x68\x81\x08\xde\x5d\x12\xd9\xad\x05\x58\x8b\xdb\xdc\x4f\xdc\x3e\x52\x87\xd7\xa5\xbc\x8f\x52\x15\x9c\xcf\xa9\x57\xd5\xb7\x24\xa8\x14\x2b\x7e\xcc\xaa\x22\xec\xd5\xeb\x1e\x58\xb3\x22\xd6\xf6\xcf\xd7\xf5\x1c\xe2\x75\xc3\xc8\x9b\x4c\xa6\x84\x78\x17\x15\x64\x11\xaf\xd5\x4d\x0f\x4f\xc9\x6b\x72\xdb\x26\x07\xe1\x72\xd2\xcf\x2b\xbc\x54\xce\x86\x22\x28\x39\x1a\x90\xe3\x54\xc9\x35\x30\x84\xbe\x6d\x0e\x96\x75\x21\xf7\xba\x5e\x80\x45\xfc\x3c\xaa\xf7\x7b\x33\x99\x69\xb7\x16\xa7\xab\x53\xdc\xc5\x91\x1d\xca\x3f\x43\x06\x8a\x53\x84\xd9\x14\x42\x38\x95\xbe\x03\x46\xf8\x5c\x32\x48\x12\x01\x8b\x33\x11\x93\x24\x15\x62\x28\x01\x51\x8a\x05\x06\x01\xa3\x42\x4c\x41\x9c\x4a\x34\x8e\x58\x1c\x7f\x04\xa3\xcd\xcc\x87\xb2\xba\xfa\xb8\x5d\x9f\xa0\xbf\xcf\x14\x34\x68\x3b\xbb\xf7\x84\x7a\x67\x62\x1f\x55\x93\xa2\x71\xc4\xc5\xba\xde\x0c\xc6\x02\x55\x8b\xed\x33\xb6\x1f\xb6\xfc\x14\x3c\xdf\x98\x78\x19\x25\xdd\x72\x42\xb2\xa6\xa6\xa1\x83\xb5\xb0\x37\x0d\xb8\xbf\x17\x5a\xff\x06\x73\x3b\xca\x3d\x1f\xd5\x49\xb3\x26\x16\x67\xc6\xec\x56\xbf\xc2\xde\xad\x8f\x57\x05\xd4\x34\xb0\xf7\xfe\xdd\x9f\x70\x0f\xce\x17\xa6\x9f\x84\xb3\xa0\x19\x2e\x4d\x6e\x87\x77\x39\x3b\xc8\x43\x21\x49\x5c\x38\xba\x75\x6f\xce\xd3\xf6\x79\xb3\x47\x9d\xb7\x78\x43\x2e\x57\xf9\x87\x42\xe6\x5d\x32\x6c\xca\xc8\x14\xbe\x7f\xf5\xff\x67\x30\xf4\x23\x98\x04\x08\x99\x44\x05\x01\x64\x84\xf3\x2c\xe2\x31\xe4\x94\x92\x2c\xc2\xec\x1d\xfe\xef\xfc\xc9\x28\x48\xb8\xf0\x19\x0c\x6c\x4f\x81\xe5\xee\xdc\xae\x33\xad\x23\xdd\x3f\x8a\xcd\x8b\xec\x65\x72\x71\x02\xe8\x9a\xb1\x77\x58\xda\xa8\x95\x4a\x53\x5b\x1c\xc4\x6a\xab\x87\xb3\xfd\xf9\x75\x3a\x17\x8b\x32\x57\xce\x75\x01\x0b\x36\xfa\x52\x1b\x69\x45\x1f\x04\x87\x85\x77\xd3\x0e\x88\xaf\xf6\xe0\x0d\xc6\x5e\x57\xd0\x2a\x57\xa9\x5f\x90\x3b\x88\x86\x45\x16\x9e\x54\xfa\x38\xf4\x8b\xe3\x7a\x71\x0d\xf1\x32\x2a\x9d\xd5\x5c\xeb\x09\x0e\x86\x3a\xbc\x71\x39\x1e\x45\x31\x5d\x58\x25\x3c\x10\x0f\x4a\xf8\xd5\x46\xea\x5a\xa6\xd7\x21\x33\x9d\x1b\x13\xbb\x5a\x20\x50\x99\xf4\x3f\x08\x46\xfa\x9a\x00\x20\xf9\x4e\xca\xb0\x8f\x64\x28\x96\x62\x20\x49\x9c\x8a\x3c\xe5\x30\x4a\x00\x05\x19\x22\x2c\x21\x99\x88\x52\x41\x00\x9c\x21\x31\x01\x31\xfc\x48\xc6\xc8\x8e\xce\xac\x6d\xac\xc3\x06\xb2\x45\xd9\x75\x9d\x41\x87\x60\x21\x0c\x45\x24\x15\x2c\x7d\x39\x59\x83\xba\xe8\xfa\xc0\x60\xb7\xdb\xf4\x4e\x7b\x6f\x8e\x24\x11\xfc\xab\xc7\x8f\xfb\xd3\xa3\x5b\x03\xc1\x4d\xd9\x5d\x6f\xd2\x5e\xda\xe7\x0d\x2c\xac\xe7\x7e\xcb\x60\xfd\x26\x53\xa4\x47\x63\x6c\xac\x85\x26\x2f\x4a\xb5\xc4\xb2\x95\x63\xf2\xb8\xa2\xe8\x70\x44\xcd\x83\x9f\xc9\xdc\xc8\x65\xf3\xa5\xda\xe5\x63\x7f\x39\xa6\x4a\xbd\x00\x95\xbf\x6a\xab\xe3\xf5\x9c\x16\xc7\xe4\x8a\xe4\x7d\x7d\xf3\x8d\xd7\x72\x72\x4a\x44\xbd\xcc\xcd\x83\xa4\xf3\xf1\x87\xe6\xb2\xaf\x5e\x46\xa7\x50\x10\xa7\xdf\x9a\xcb\xc4\x8f\x60\x38\x4b\x09\xcc\x44\x08\x48\x22\x72\x49\x60\x80\x22\x80\xb3\x88\x8a\x4c\x22\x49\x86\xb3\x14\x44\x51\x04\x53\xf2\x11\x8c\x7c\x28\x8d\x87\x29\x8f\x4b\x41\x7c\x5a\xb6\x50\xe5\x96\xe5\xbc\x54\xe1\x6c\x3e\xe0\xa4\x7d\x4e\x78\xdf\xed\x6f\xec\x7c\x29\xa8\x0f\xd6\xe2\xb1\x4b\x26\xfd\x98\xb3\x38\xed\xe9\x46\x70\x9f\x02\x4c\xf0\xb9\x7a\x3c\xef\xe2\x76\xe6\xc8\xe7\xbb\x70\xca\xaf\xc5\xd0\x4b\x5f\x60\x6e\xab\x5e\x79\xcc\xf5\xd7\x7e\x98\xf0\x3e\x64\x80\xfa\xe0\x22\x1d\xcf\x48\xb1\x6d\xd7\x75\x0f\x7c\x21\x11\x50\xa9\x3b\xdb\x0a\x5f\x0f\xde\x7b\xb5\xb5\x18\x44\xb0\xcd\xb6\xad\xef\x53\xd2\x5e\x57\xcb\x2b\xae\x51\x49\xdd\x78\x87\x34\x53\xf7\x6e\xeb\xeb\xa4\x12\x7e\x2e\xfe\x21\xc3\x53\x28\xd1\x29\xa1\xdf\x00\x23\x7d\x04\x13\x45\x28\xe2\x22\x8e\x53\x88\x22\x0a\x12\x31\x4d\x28\x27\x80\xa6\x2c\x4a\x22\x2a\x4a\x20\x4a\x79\x14\x27\xe8\xdf\x98\x4c\x0f\xa4\x74\x9b\x57\xc2\xaa\xdf\xb8\xc1\x20\xe6\xd1\xcc\x59\x17\xad\x8b\xab\x40\xd9\xca\x79\x23\xce\xc7\xe6\x65\x86\x26\xcf\xb3\xcb\x20\xed\x13\x7e\x3a\xc6\xaf\x67\xdc\x78\xe5\xcc\x97\x2b\xc7\xc8\xd2\x9d\xe9\x1e\x7b\xa5\x9e\x4d\xb2\xaa\x04\xf4\x62\x46\xfb\x85\xfc\x06\x53\xd3\xe8\x3c\x3c\x52\x13\xc0\x6e\x91\x6f\xf4\x9b\xe7\xc7\x6d\x8c\xc4\xc6\xb3\xb4\x9c\xc6\x0b\x65\x6b\xae\x53\x27\x54\x1a\x7b\x36\x5e\x82\x35\xd1\x14\xa3\xb0\x4b\xbf\xb5\xba\xfd\xe2\x02\xfb\x6d\x16\x6f\x65\xc9\x58\x2c\x5a\x45\xd8\x16\xfc\xb0\x7a\xce\x3d\x36\xb9\xfd\x50\xc5\xbc\xc1\x90\x77\xc2\xd0\xa9\xf8\x8d\x90\x81\xe0\xf3\x58\xc6\x45\x2e\x90\x34\x92\x52\x28\x88\x88\x67\x19\x86\x94\x50\x84\xe3\x04\x8a\x30\xc3\x51\x44\x50\x9c\xa6\x38\xf9\x08\x46\xed\xdb\xcb\x83\x17\xfe\x46\x53\x74\xa8\xec\x1c\x24\x07\x95\x5a\xb8\xf9\x79\x65\x34\x40\xec\xbd\xf9\x7e\x75\x64\xa7\x7e\x1b\x37\x51\x79\x0c\x90\x59\xed\xcc\xe7\xd6\xf6\x34\x74\x20\x4e\xb5\xdf\x9d\x61\x25\x05\xd6\xde\x9e\xdf\xc3\xa3\xab\x55\xfe\x75\x08\x33\xef\xf6\xa5\x98\xb7\x61\x0d\x09\xde\xf1\x9d\xe8\x67\xc5\x7a\xf6\xa2\x4b\x31\x36\x12\x08\x4e\x0f\x8d\x96\xde\x24\x7c\xda\x13\x3b\xca\xe4\xe6\x59\xe7\x81\x63\x26\xe6\xe5\x70\x2a\xb3\xc2\x5b\x9e\xf1\x23\x5f\xf1\xe2\x65\xc4\x17\x37\x5a\xab\x27\xc6\x17\xdb\x68\x76\xc4\x3b\xd7\xea\xa2\x1f\xaa\x18\x3c\x15\xa5\x29\xc4\x6c\x8a\x85\x6f\x60\xf9\x6c\xfe\x22\x8f\x52\x31\xa1\x24\xc6\x82\x18\x31\x98\x40\xce\x44\x31\x16\x63\x81\x42\x40\x30\x91\x58\xcc\x49\x82\x10\xfe\x3c\x2d\x9f\x0c\x4e\x20\x9a\x33\xda\xf5\x1b\x85\x33\x0f\x1a\xe5\x66\xb5\xaf\x95\x49\x36\xf3\x0f\xf1\xf2\x5a\x22\xc5\x6c\xea\xa8\x3e\xfa\xe7\x60\x55\xee\xb1\x40\xd5\xda\x0a\x17\x9c\xd3\x86\xba\x3c\x9e\xcd\xbb\x6d\x28\x56\x19\xd8\xc4\x2d\xe8\xea\x23\x59\x57\xfe\xf6\xab\x5e\x0a\xf0\xea\xeb\x6d\x38\x6e\xfd\x6e\xbd\xbf\xf2\xdb\x10\xda\x4e\x29\x71\x3d\x5f\x99\x4a\xfd\x30\x3d\xe5\x52\x38\xb1\x54\x2a\x55\xab\x1e\x33\xbd\x86\xac\x57\xb8\xa7\xd0\x89\x61\x14\x63\x7d\x13\xb7\xb6\x55\x89\xcd\x61\xbb\x18\xc6\x63\xf9\x90\x5a\x6d\x7e\xd4\xad\xf2\x87\xb2\xff\x5d\x2f\x94\x4c\x21\xa4\x53\x04\xbe\x31\x2e\xc3\xcf\xea\x4f\xc5\x88\x50\x49\x8a\x33\x44\x53\x26\x82\x54\x92\x30\x17\x60\x2c\xc5\x20\x46\x69\x2a\x66\x62\x0a\xb9\x04\xa5\xcf\xd9\xaf\xcf\x86\x8b\xad\x07\x67\xc3\xcd\xe2\x9d\x99\x3f\xd6\xa8\x31\x95\x7d\x17\x1d\xee\x65\x54\xd6\x89\xc4\x97\xbe\xa3\x4a\x78\xe7\xdb\x4a\x5f\x31\xb3\x78\x9d\x3a\x8b\x6a\xbb\x92\x52\xe6\xe1\x56\x3e\x61\xcf\x1b\x0f\x2c\xc1\x37\xf9\x00\xc3\x8a\x3a\x46\x77\xe9\x0e\x97\x2f\xf5\x2f\xcc\xac\xae\xce\x2b\xac\x2f\x94\x9d\x1d\xea\x12\x71\xc9\x18\xb5\x68\x33\x8a\xfd\x79\xd7\xb4\x2c\x1b\x21\x42\x6a\x9a\x04\x8a\xda\x3f\x1e\xbc\xc3\x4b\x6d\x92\xac\xed\x95\x36\x71\x66\xf5\xb1\x18\xb1\x2c\x18\xf2\x42\x9c\xcf\xba\xce\x9d\x43\xdb\x25\xfa\x32\xf8\x21\x8f\xc1\x53\x11\x4c\xb1\xf0\x0e\xff\x6f\x60\xf9\x2c\xfe\x04\x27\x42\x22\x8a\x9c\x22\x26\xa6\x14\xa0\x34\x49\x19\x8d\x45\x2c\x26\x38\xe3\x71\xc4\x53\x42\x48\x46\xc9\xe7\x8d\x8c\x35\xb2\x3b\x5b\x4b\xa1\x71\x1b\x9c\xac\xf2\x13\xeb\xee\x5e\x05\xd9\x07\x51\xb3\x3c\x25\xe0\x01\x35\x20\x9f\x4b\x6f\x6e\xb0\xc2\xc2\x14\xac\xc2\xda\x90\x32\xbb\x5a\x7b\xbd\x03\xb8\xfc\xc8\x9f\xb0\x8a\x3a\x2f\xc3\x56\x13\x30\xbb\xc8\xe6\xe1\x81\x6e\x86\xee\x6b\x58\x76\x84\x70\x29\xa9\x2f\x7e\x58\x05\x71\xe5\x7b\xeb\xe4\xe2\x35\xd4\x51\xe0\x63\xb5\xba\xbc\x5a\x8a\x67\xda\x55\xb9\x1d\x34\x45\xcc\x2b\x21\xce\x9f\xa1\x14\x5d\xea\xe0\x45\x26\xda\xd1\x74\xad\x99\xe4\x78\x56\xe9\xef\xb2\xc0\xbe\x6c\x47\x12\x1f\x97\xe4\x56\x8f\xe3\xe4\xa7\x56\x65\xef\x3e\x26\xbd\xa7\x65\xfc\x0d\x2c\x9f\xad\x9f\xbe\x39\x24\x19\x82\x11\x85\x09\x67\x48\x4a\x85\x58\x12\x08\xc6\x30\x46\x11\x96\x62\x29\x61\x82\x10\xff\xb9\xdc\xfe\x84\x65\x51\x89\xd5\xfe\xc1\x8a\x11\xd8\x4f\xae\xce\xf8\xb5\xa1\xe5\x4e\x8d\xf7\x98\x6f\x7c\xd5\xa3\x5d\xa5\xb8\x76\x0d\x4e\x2c\xf0\x07\x53\xdc\xd3\xa0\x99\x5f\xdb\x31\x53\x37\xae\xa2\xad\x67\xb3\x53\x73\xbf\xcb\x96\x96\x6e\xed\xe1\x31\x2e\xf2\x2c\x38\x43\xdf\x78\xd5\x5f\x58\xda\xd7\x89\x1a\xc7\x3e\x51\xd0\x71\x76\x58\x35\xfe\xec\x29\x42\xb3\x34\x5e\x6b\x18\xc6\x4d\xa0\xea\xa7\x45\x39\x49\x86\xdb\x70\x51\x58\x32\xde\x09\xd7\x3b\x84\xf2\xf9\x32\x97\xd4\x5e\x45\x0a\x2c\x57\x9e\xa3\x66\x51\x28\x04\xec\xb8\xce\x60\x7c\xb2\x54\xf8\x28\x7f\x4a\x2e\xa7\x08\x88\xd3\xb7\xc5\xb0\x6f\x60\xf9\xec\xfc\x8c\x64\x29\xc3\x49\x94\xa2\x94\x0a\x08\x08\x98\x8b\x42\x04\x25\x9e\xf2\x24\x11\x63\xc4\xc4\x4c\x42\x52\xc6\xff\xcd\x32\xe6\xd9\xe6\x61\xfd\x9a\x70\xa5\x53\xf5\xe2\x00\x63\x3c\x9f\xcf\xe3\x21\x93\xb6\x1b\x37\x24\x6d\x7d\x6d\x46\x0b\xc9\x97\xc9\xdd\xc9\xc8\xb1\x8c\x79\x55\x0d\x8f\xc3\xb2\x58\x25\xe6\xce\x26\x7d\x74\xdb\x3e\x15\x0d\x8b\xe9\xf2\x5c\xa0\x8d\x5f\x48\xf6\x86\xbb\xee\xfd\x6b\x19\x13\xf7\xea\xc3\xec\x14\xa3\x18\xd5\x43\x70\x49\x04\x5b\x4e\x97\x8e\x79\xb8\x68\x4e\x15\x77\x16\xed\x93\xe0\x76\x7f\xbc\x44\x65\x73\xb4\x07\x68\xa6\xad\x24\x17\xcc\xd3\xb2\xc8\x1f\xc6\xaa\xcd\x2a\xad\xbb\x1e\x4c\xb1\xd7\x0e\x56\x3d\x53\x84\xc7\x3e\x5a\x71\x27\xea\x7f\x4e\x60\x20\xc5\x53\x0a\xa7\xe4\x1b\xfe\x02\x3f\x2b\x3f\x16\x01\x82\x30\x41\x11\x87\x09\x95\x62\x81\xa5\x28\x83\xb1\x10\x8b\x24\xc2\x20\x61\x2c\xa1\x5c\x8c\x53\xf6\x79\x17\xb3\x32\xfc\x6e\xe1\xe4\x4f\x1d\xce\x80\x69\x95\xf1\x6b\xf7\x0a\x9d\xa3\xce\x50\x7f\x2f\xbc\x47\x87\x08\xf0\x7b\x67\x9d\xe2\xad\xf2\x5a\x5d\x76\xb7\x81\x57\x12\x77\x2b\xaf\x17\x57\x47\x6d\xe3\xa8\x7a\xf0\xdc\xca\x21\xb6\xef\xe7\xad\xa6\x42\xab\xd7\x7a\xb6\xf3\x6f\x5f\xe5\x52\x1b\xb7\x71\x5e\x6e\xfa\xf8\x95\xed\xe6\x2d\x99\xe9\x61\x3f\xab\xf2\xea\xa2\x9a\x11\x59\xb1\xad\x3e\x1b\xbb\x61\x53\xe7\xd8\x29\xea\x17\x46\x43\x37\x61\x9b\xca\x52\x0e\x83\x3f\xc9\xcf\x67\x43\xad\xae\x7b\xf5\x50\x9d\x57\xdd\x05\x84\xeb\x88\xd7\x0e\x84\xde\x6e\xf3\x73\x4b\xb2\x37\x17\x46\xa6\x10\x7f\x07\xcc\x67\xe3\x87\x6f\xbf\xc7\x59\x2a\x62\xc8\x98\x40\x10\x65\x19\xc2\x10\x01\x21\x05\x59\x82\x39\xc9\x90\x80\x25\x96\x7c\x16\xcb\x55\x60\xe0\xcb\x76\x2b\x04\xb5\x26\x6b\x60\xac\x55\xde\xa6\xf8\x2e\xde\x8d\xdb\x65\xc5\x94\x57\x9a\xa9\xba\x70\x27\x2c\x2b\xf7\x73\xed\xac\x2d\x88\xb6\xba\x17\xec\x1a\x34\x9d\x95\xee\xc3\x2c\x1b\x14\xdd\x3b\x80\x11\x6b\xed\x6a\xe9\x78\x34\x9f\xec\xd3\x62\xfe\xfa\xda\x2b\x5f\x8e\x4c\xb9\x86\x5d\x7f\x1a\x96\x8e\xe5\x90\xfc\xa0\xf0\x86\x6c\xc3\x40\x57\x15\x7a\xe4\x5a\x3c\xf7\x96\x87\xcd\x19\x7b\xda\xf2\xb9\xda\x9c\xdd\x39\x9c\x7b\x6e\xc3\xea\xc4\xcd\xca\x5b\x9f\x16\x27\x1e\x9c\x8e\x13\x4c\xb9\x4a\x75\x17\x4c\xc6\x19\x3a\xbf\x84\x3e\xff\x51\x30\xef\x79\x0c\x7e\x6b\x52\xfe\xac\xfc\x09\xc3\x22\xe3\x02\xe4\x49\x92\xe0\x14\x09\x30\xa2\x12\x8b\xd2\x48\xa4\x88\x49\x28\x8b\x25\x91\xd0\x0c\x23\xfa\xb9\x95\x95\xd1\x8a\x55\x0d\x1c\x6e\xd5\xdc\xb4\x32\x53\xdd\x00\xb6\x16\xf8\xfc\x15\xec\x8b\x87\x26\x9d\xd7\x4d\xab\xce\x5f\x97\x80\xf4\xd5\x72\x60\xb3\x49\xc3\xe9\x4b\x3e\x35\x4b\xb3\x5b\x8e\x64\xbe\x10\x74\xf5\x7a\x8b\x16\xe4\x19\xcd\x9f\x67\xcd\x40\x19\x3e\xec\x9b\x9d\xf1\x25\x30\xe3\x3d\x91\xda\xd1\x1f\xaf\x81\x58\xcc\x4e\x03\x4e\x9c\x60\x07\x6c\x98\xf3\xab\x30\x94\x97\xcb\x6e\x31\xc8\x13\x7b\x36\x84\xa7\xa4\xc2\xe5\xaa\xde\x81\x80\xbe\x0a\x4d\x9d\x25\x93\xe6\xf5\xe8\x17\xd9\xea\x25\x4a\xad\x1e\xe2\xb4\x78\x9a\xc9\x2c\xb2\x03\xc3\xbd\xff\x24\x19\x34\x45\x80\x4d\xbf\x53\x31\x9f\x8d\x5f\x40\x62\xc4\x58\x2c\x44\x11\xc9\x32\x0e\x13\x04\x63\x89\x8a\x88\x49\x91\xc0\x53\x09\x02\x2a\x45\x02\xe5\x7f\x5e\xb2\xfd\x79\x15\xb3\x75\xd9\x0b\x06\x4b\x79\x97\x4e\xdc\xec\xe6\xba\xbb\xfc\xd8\x16\xc3\x42\xd2\xa2\x59\x50\xe3\xad\x55\x6d\x1f\x47\x99\xda\x58\x96\xea\xb1\xbd\xe1\xb2\x55\xfc\x09\x6a\x86\xbc\x75\xc4\xe7\xb5\x2b\x96\x70\x77\xf4\xe2\xf3\x0e\x07\xf3\x81\x1f\x1b\x24\x8c\xa3\x6a\x7d\x71\x89\x2f\xb0\xea\x64\x93\x37\xf1\x46\x9c\xec\xa4\xf2\x02\xf3\xf2\xa5\x65\x44\xce\xcd\x43\x2e\x4f\x72\xea\xad\x5a\x75\x26\x6b\x79\xcb\xf3\xb2\x12\x6b\x37\x7a\xfa\x4e\x60\xcc\x94\x61\x35\xc4\x45\x6e\xf6\x91\x2d\x56\xd9\xc2\x56\x9c\x0c\x16\xb6\x52\xdd\x76\xf6\x93\xfe\x2c\x97\x2f\xf1\xff\x06\x18\xf4\xd9\xf8\x31\x67\x69\x8a\x22\x9a\x25\x5c\x92\x32\x8c\x51\x14\x31\x29\x95\xb2\x2c\xa6\x69\x02\x05\x8c\x39\x95\xd2\x04\x7f\xce\x98\x0d\x53\x16\xb3\xfd\x5c\x37\xf5\x8b\xa8\x1c\x18\x3a\x6c\x0f\xc5\x81\x73\xb0\x54\x5c\x0f\xa4\xab\xce\x0c\x8e\x6e\x19\x19\x04\x9c\x03\x92\xd2\xcc\x9e\x55\xc3\x6c\x6b\x75\x17\x18\xe2\x99\x5a\x9d\x0a\x4f\x0b\xe6\x3d\x3b\x7a\x87\x31\xbd\x65\xf2\x08\xdd\x97\xf4\xc2\x5f\xff\x5d\xda\x4d\xb1\x5e\xb6\xba\x42\x01\x1d\xe5\x43\x0b\x2b\x6c\xac\xab\x6d\xba\x9d\x1c\xc1\xc3\xad\xae\xd8\x3d\x75\x77\x2d\x57\x66\xeb\x44\x3f\xef\x26\xd2\xa8\x69\x36\xdc\x2e\x6a\xfb\x7a\x48\x70\xfc\xdc\xa9\x59\xed\xae\x23\x28\xdb\xc5\x6d\x31\x39\xd9\x76\xec\xc1\xd3\xd2\xfb\x21\xb5\xfc\x2f\x30\x44\x9a\x42\xf4\x8d\xad\x32\xfa\xec\xfc\x29\x12\x70\x96\x22\x89\xc7\x14\x4b\x09\xe7\x51\x1a\x45\x22\xe4\x09\x02\x3c\x12\x11\x46\x52\x2c\x52\x01\x82\x7f\xb3\xef\xbf\x68\x64\xde\xc4\xf7\xc6\xd3\x65\x72\xc8\xe9\x96\x8f\x76\xb6\x81\xc3\x22\x78\x8a\xdc\xf7\xaa\xe3\x64\xb7\x2d\x3a\x64\xed\x77\x4f\x79\x76\x22\x9b\xb0\x1f\xc2\xd2\x43\x82\xff\xca\x3d\x6a\x08\xd1\x79\x5b\x5e\xe3\x58\x7b\xed\xb7\x2c\x1f\xa2\xed\x53\xc6\xce\xe1\xfe\x95\x31\x72\xb3\xa1\xdb\x67\xae\x3e\xd9\x75\xdd\x63\xaf\x59\x63\x69\x46\x52\x61\x63\x88\xf9\x16\xef\xfb\x2c\x68\xd6\x9e\x73\x8a\xe2\x7c\x96\xd5\xf1\xd6\x21\x69\xf9\x78\x86\xa9\x9b\x3e\x25\xf1\x38\x17\x2b\x41\xe4\xf9\x43\x1f\x57\xa3\x76\xf6\xef\x0f\xd9\x2c\xf4\x79\x3f\xc1\x3f\x34\x2b\xff\x77\xc6\x90\x29\x44\x9f\x9d\xff\x3f\xfe\xf2\x9f\x01\x00\x00\xff\xff\x00\x0d\x50\x78\x89\x21\x00\x00")

func shoalDelegatesJsonBytes() ([]byte, error) {
	return bindataRead(
		_shoalDelegatesJson,
		"shoal/delegates.json",
	)
}

func shoalDelegatesJson() (*asset, error) {
	bytes, err := shoalDelegatesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shoal/delegates.json", size: 8585, mode: os.FileMode(420), modTime: time.Unix(1587012192, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"shoal/delegates.json": shoalDelegatesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"shoal": &bintree{nil, map[string]*bintree{
		"delegates.json": &bintree{shoalDelegatesJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

