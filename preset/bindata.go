// Code generated by go-bindata.
// sources:
// shoal/delegates.json
// DO NOT EDIT!

package preset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _shoalDelegatesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd9\x5b\xcf\xaa\x40\x9a\x2f\xf0\xfb\xfe\x14\x6f\xd6\xad\xbd\xb5\x4e\x14\xd4\x4a\xfa\x82\xa3\x02\x2a\x8a\x20\xe0\xce\x4e\x87\xb3\x22\x08\x28\xca\x61\xa7\xbf\xfb\xe4\x7d\xd3\xd3\x3d\x17\xcb\xc9\x64\xe2\x8d\x26\x12\x4c\xa8\x5f\xaa\x9e\xe7\xf9\xf3\x7f\xff\xf2\xf5\xf5\xf5\xf5\xff\x7f\x3e\xbf\xbe\x7e\xdd\xc2\x2a\xfd\xf5\xfb\xeb\xd7\xe3\x5c\x87\xe5\xff\x01\xf0\xd7\x5f\xff\xf3\x4a\x98\x24\xf7\xf4\xf1\xf8\xbe\x08\x06\xa6\x62\x81\x52\x11\x72\x38\x23\x50\x4b\xe2\x28\x12\xa0\x40\xb3\x18\x25\x8c\x53\x98\x04\x93\x0c\xf2\x04\x03\xe5\xdf\xb7\x37\xcf\xe8\xef\xd7\x74\xfc\xbe\x5d\x32\x39\x62\xaa\xbb\x24\x1e\x36\x9d\x0d\x1e\xe2\x6d\x5d\x03\xad\x2c\x3d\x39\x71\x1e\x8a\x78\x58\xae\xcb\x76\x3d\x6d\xac\x87\xd6\x39\x9a\xe5\x22\x0e\x82\xc9\x11\x09\xe9\x48\x64\x9c\xaf\xf7\x47\x25\xf0\x4b\xcd\xbb\x6e\xda\x69\x15\xb6\x12\x16\x4d\x39\x69\xad\x09\x6f\xfe\xf6\xfb\xf7\xef\xcd\xf1\x31\x9c\x94\x4c\x7e\x39\xa1\x90\x68\xa1\x3e\xb9\x9d\x96\xc5\x33\x78\x50\x64\xe2\x2d\xa2\x93\xda\xf0\x47\x5f\x3c\xad\x94\x83\x5a\x2d\x84\x4c\x74\x68\x5d\x5d\x0d\xe5\x70\x3c\x73\x46\x71\x8f\x9d\xce\xd0\x34\x39\x90\x9e\x41\x1a\xbf\xec\xd7\x69\x56\x47\xf4\x20\xed\xc5\xbf\xfd\xfb\x39\x5e\x75\x77\xb9\xe5\x7f\x6f\xea\x3e\xbd\xff\xfa\xfd\x05\x01\xf8\xd7\xa5\x5b\xda\xf5\xf5\xfd\xfa\xf7\xef\x95\xfa\xf5\xfb\x5f\x6b\xfa\xf5\xf5\xeb\xd2\x7c\x3f\x37\x47\xe6\x50\xe0\xe6\x98\x9b\x43\xc2\xff\xeb\x1f\xbf\xd7\xa6\xbe\x77\xbf\x7e\x7f\x09\x94\x07\xff\xfc\xf1\x1f\x3f\xdf\xff\xf8\xeb\x7f\x8b\x83\xde\xe0\x84\x5a\x86\xb8\x58\xc2\x5c\x28\x01\x06\xb9\x88\xc8\x19\xe6\x21\x51\x41\xa2\x84\x9c\x06\x05\xaa\x72\x31\xc8\x40\xfc\x67\x1c\xeb\x12\x57\x4e\xd8\x69\x35\x3f\x18\xc0\xb6\xb6\x17\x2d\x88\x5e\xf2\x4c\xf4\xc9\xee\xc2\xe2\x29\x0c\x7d\x54\xba\x33\x59\x5b\x1b\x0f\x6d\x88\x3a\x4e\xdf\xea\xfa\x6a\xbf\xd6\x51\x68\x6a\x53\xa3\x82\x67\x02\xcc\xab\x31\x48\xeb\x9d\x19\x07\x65\x39\xa6\xcc\x75\xd5\xc7\x37\x8e\x93\x2d\x30\xdd\x27\xa8\xd5\x57\x92\xd9\xea\x92\x06\x36\xdd\x3e\x4b\xaf\xb9\xeb\xd1\xcd\x0d\x14\x12\x2f\x67\x67\x27\x14\x51\xff\xca\x53\x60\xc3\xf3\x55\x8a\x79\x40\xa5\x7c\xc5\x05\x7e\xeb\x9d\x23\xd1\x1c\xab\x2d\x87\x77\x63\xbb\xda\xf0\xfc\x61\xdf\xea\x59\xb4\x57\x3f\x84\x83\xe6\x10\xce\x11\x16\xe6\x50\x10\x3e\x80\x83\xdf\xe0\x24\x9c\xc2\x43\x11\x61\x2e\x03\x19\x41\x34\x61\x38\xe1\xb3\x54\xe6\x19\xa2\x52\xc8\x00\xa3\x04\x73\x1c\xa7\x8a\x7f\xc6\xd9\xb2\xad\xdb\x8b\x97\x33\xdb\x4a\x5c\x36\x26\xf7\xed\x72\xd4\x65\x63\x02\x2b\x71\x85\x82\x5c\xd7\x80\xd2\x47\x92\xd2\x28\xc7\x6d\xba\x01\xc6\x6d\x66\xd8\xb2\xde\x70\x42\xda\x9b\x81\x4d\xc2\x99\x4f\x74\xa5\x79\x89\xf1\xd4\xd9\xe8\x40\xef\x5a\xc7\x86\x9b\xa5\x0a\xdf\x38\xb6\xba\x6d\xe2\xbb\x91\x2e\x2a\x67\xea\x05\x3f\xf7\x25\xdb\x56\xed\xb5\xb8\x3f\xee\x91\xbe\xac\x40\x49\xf4\x8b\xd7\x82\xc9\x76\x3c\xab\xdc\xaf\x1c\x6f\xb1\xd1\x96\xc0\x79\x0e\xb6\xe4\xaa\x27\xff\x79\x77\x67\x72\xbe\x39\x37\x41\xd2\xee\xa6\x73\xa6\xbe\xea\x69\x75\xfb\x14\x0e\x14\xe6\x08\xd3\x39\x03\x73\x04\xd8\x07\x70\xc8\x1b\x1c\x0a\xa2\x08\x65\x22\x13\x19\x01\x28\x63\x1c\x27\xa5\x40\x88\x64\x20\xf2\x9c\x1a\x8b\xb1\x8a\x64\x20\x0a\x82\xc0\xff\x19\x47\x1b\xa7\x16\x96\xfb\xdd\x9e\x03\x89\x6e\x9f\x4c\x10\xc2\x87\x43\x42\xab\x35\x01\xdf\xe2\x36\xf7\x62\xa7\x0f\xe5\x71\xb8\x96\x8f\x89\x55\xfe\xe5\x92\xba\x55\x7d\x8f\xfd\x4a\x32\xa3\xe7\xa2\x2a\x82\x5e\xbe\x1d\x80\xb9\x28\x22\xf5\xf0\x1a\x6e\x97\x00\x6f\x1a\x9e\x7c\xe3\x64\x52\x80\xf7\x61\x41\x96\xd1\x46\xde\xf6\xf0\x1c\x0f\xb3\xfb\x2e\x3e\x72\xd7\xb3\x76\x59\xe3\x95\x74\xd1\x25\x4e\xca\xd1\x88\x6c\xbb\x8a\x6f\xbe\xce\xf5\x6d\x73\x34\xcd\x2b\x79\xd4\xf5\x12\x2c\xa3\xd7\x49\x7e\x3c\x9a\xd9\x42\xbd\xb7\x38\x5d\x9f\xa3\x2e\x0a\xad\x40\xfc\x10\x0e\x26\x73\x04\xe9\x9c\xc7\x73\x04\xc0\x07\x70\xb8\x37\x38\x0a\x84\x02\x05\x3c\x41\x1c\x9f\xc1\x90\x66\x08\xc3\x98\x40\x2e\x4e\xc4\x8c\x57\x61\x46\x44\x95\x08\x09\x07\xb5\x3f\xe3\xa8\x0b\xe3\x29\xad\x6f\x1e\x6e\x37\x67\xe8\x1d\x32\x09\x8d\xea\xde\xea\x5d\xae\xde\x1b\xd8\x43\xd5\xac\x68\x6c\x61\xb9\xa9\xb7\xa3\xbe\x44\xd5\x72\xf7\x8a\xac\xa7\x25\xbe\x38\xd7\xd3\x67\x6e\x46\x49\xb7\x9a\x91\xac\xa9\x69\x60\x63\x35\xe8\x0d\x1d\x1e\x1e\x85\xda\x7f\xe3\xdc\x4f\x62\x9f\x4c\xf2\xac\xd9\x10\x33\xe1\xf5\xc5\xbd\x1e\x82\xde\xa9\x4f\x37\x09\xd4\xd4\xb7\x0e\xde\xc3\x9b\x25\x2e\x54\x96\x86\x17\x07\x0b\xbf\x19\xaf\x4d\x6e\x05\x0f\x31\x3b\x8a\x63\xc1\x58\xc2\x9d\x9c\xba\x37\x94\xb4\x7d\xdd\xad\x49\x4b\x5a\xbc\x25\xd7\x9b\xf8\xb9\x9a\x83\x00\x9a\x0b\x74\x4e\x3f\xb1\x71\xe8\x3b\x1b\x16\x21\x4e\x95\x01\x4d\x78\x15\x60\x1c\x71\x4c\xe5\x09\x86\x04\x23\x35\x52\x00\xc4\x7c\xc6\x45\xb2\x20\xd0\x37\x36\xb0\x3d\xfb\xa6\xb3\x77\xba\xce\x30\x4f\xf4\xf0\x2c\xb6\x03\x39\x88\xe4\x6a\xfb\xd0\x31\x22\xf7\xb8\xb2\x50\xcb\x4a\x43\x5d\x1e\x85\x6a\xa7\x05\x8b\xc3\x65\x38\x5f\x8a\x65\x99\x4b\x97\xba\x80\x05\x3f\x79\xac\x0d\xd5\xa2\xf7\xfd\xe3\xd2\xbd\xab\x47\x94\xac\x0f\xe0\xdb\xc6\xda\x54\xd0\x2c\xd7\xa9\x57\x90\x07\x08\xc7\x65\x16\x9c\x65\xfa\x3c\xf6\xcb\xd3\x66\x79\x0b\xf0\x2a\x2c\xed\xb5\xa2\xf6\x04\xfb\x63\x1d\xdc\x13\x31\x9a\x04\x21\x5d\x9a\x25\x3c\x12\x17\x32\x3c\xb4\xa1\xbc\x11\xe9\x6d\xcc\x0c\xfb\xce\x0b\x5d\xcd\x11\x28\xcd\xfa\x0f\xda\x10\x6e\x0e\x05\x32\xe7\xb9\x0f\xe0\xf0\x6f\x70\xb8\x94\x64\x1a\x13\x05\x46\x05\xc0\xa7\x88\x23\x82\x04\x39\x00\x14\x21\xcb\x68\x92\x6a\x52\xac\x20\x89\x23\x0c\xff\x19\x47\xcf\x4e\xf6\xa2\x6d\xcc\xe3\x16\xf2\xcb\xb2\xeb\x3a\x9d\x8e\xfe\x92\x1b\x8b\x90\x15\x7c\x3a\xd8\x59\x83\xba\xf0\xf6\xc4\x60\xbf\xdf\xf6\x76\xfb\x68\x4e\x24\xe6\xbc\x9b\x9b\x9c\x0e\xe7\x67\xb7\x01\x9c\x93\xf2\x0f\xad\x49\x7b\x76\xc8\x1b\x58\x98\xaf\xc3\x8e\x87\xf5\x37\x4e\x91\x9e\xf4\xa9\x31\x97\xaa\xb8\x2c\xe5\x12\x8b\x66\x8e\xc9\xf3\x86\xc2\xe3\x09\x35\xcf\xe4\x42\x14\x3d\x17\x8d\x41\xb6\xca\xe7\xe1\x7a\x4a\xa5\x7a\x09\x2a\x6f\xdd\x56\xa7\xdb\x25\x2d\x4e\xf1\x0d\x89\x87\xfa\xee\xe9\xc3\x6a\x76\x8e\x05\xad\xcc\x8d\x23\xd3\x92\xe9\x63\xcd\x1a\x9a\x0b\xc2\x9c\xb2\x39\x84\x1f\xa0\x11\xde\xd2\x60\x31\xc2\x42\x1a\x11\x90\x10\x82\x71\x42\x49\x28\x90\x0c\xcb\x82\x9a\xc8\x38\xc1\x98\x93\x08\xe1\x05\xf8\x67\x1a\xf1\x58\xea\x4f\x43\x9c\x56\x9c\xf0\x32\x2d\xae\xca\x4d\xd3\x1e\x64\xee\x62\x3c\xe1\xac\x7d\xcd\x92\xbe\x3b\xdc\xf9\xcb\xb5\xa0\x1e\xd8\x08\xa7\x2e\x9e\xf5\x53\xce\x47\x69\x4f\xb7\x9c\xf3\xe2\x60\x8c\x2f\xd5\xf3\xf5\x10\x76\x0b\x5b\xbc\x3c\xb8\x73\x7e\x2b\xc6\x9e\xfd\xd0\xdc\xd7\xbd\xf4\x54\xb4\xe1\x30\xce\x92\x3e\xe0\x01\xf5\xc0\x95\x9d\x2e\x48\xb2\x2c\xc7\x71\x8e\xc9\x92\x11\x50\xc9\x7b\xcb\x0c\x86\x67\xd2\xbb\xb5\xb9\x1c\x05\xb0\xcb\x76\xad\xe7\x51\xd2\xde\xd6\xab\x1b\xae\x51\x49\x9d\x68\x8f\x54\x43\x73\xef\x9b\xdb\xac\xe2\x3e\xd5\x0d\x7c\x17\x1c\xc4\xbe\x9b\xe8\x39\xfb\x04\x0e\x7b\x83\x93\xaa\x4c\x62\x80\x09\x92\x28\x70\x90\x4b\x33\x45\xa4\x30\xce\x38\x02\x33\x42\xb8\x84\xc8\x24\x89\x81\x42\xc3\x37\x05\xc7\xec\x01\x4b\x77\x79\xc5\xad\xfb\xad\xe3\x8f\x42\x1e\x2e\xec\x4d\xd1\x3a\xb8\xf2\xa5\x9d\x98\x37\x82\x32\x35\x83\x11\x18\x49\x9e\x5d\x47\x76\x88\x93\xf3\x29\x1a\x5e\x51\xe3\x96\x0b\x4f\xac\x6c\x3d\x4b\xf7\x86\x73\xea\xa5\x7a\x31\xcb\xaa\x12\xd0\xab\x11\x1e\x96\xe2\x37\x4e\x4d\xc3\xcb\xf8\x4c\x0d\x00\xbb\x65\xbe\xd5\xee\xae\x17\xb5\x11\x12\x1a\xd7\x54\x73\x1a\x2d\xa5\x9d\xb1\x49\xed\x40\x6a\xac\xc5\x74\xf5\x37\x44\x95\xf4\xc2\x2a\xbd\xd6\xec\x0e\xcb\x2b\xec\x77\x59\xb4\x13\x99\xbe\x5c\xb6\x12\xb7\x2b\x92\xe3\xfa\xa5\xb8\xfc\xec\xfe\xa9\x7d\x83\xe7\x02\x98\x23\x6e\xce\x7f\xa0\xdc\x40\xf0\x46\x46\x52\x28\xe6\x41\x4c\x01\x55\x20\xc4\x32\x25\x22\xa4\x28\xe5\x12\x89\x71\x0a\xc7\xa5\x1a\xd4\x04\xac\x30\x24\xfd\x59\x46\xee\xdb\xeb\x33\x29\xbc\xad\x2a\x69\x50\xda\xdb\x48\xf4\x2b\xb9\x70\xf2\xcb\x5a\x6f\x80\xd0\xbb\xca\x61\x7d\xe2\xcf\xfd\x2e\x6a\xc2\xf2\xe4\x23\xa3\xda\x1b\xaf\x9d\xe5\xaa\xe8\x48\xec\xea\xb0\xbf\xc0\x8a\xf9\xe6\xc1\x52\x1e\xc1\xc9\x51\x2b\xef\x36\x06\x99\x7b\xff\x19\x3f\xef\xe3\x06\x12\xbc\x4f\xf6\x82\x97\x15\x9b\xc5\x40\x57\x42\xa4\xc7\x10\x9c\x9f\x2a\x2d\xdd\x59\xf0\xb2\x66\x56\x98\x89\xcd\xab\xce\x7d\xdb\x88\x8d\xeb\xf1\x5c\x66\x85\xbb\xba\xe0\x67\xbe\x4e\x8a\x41\x8f\xae\x4e\xb8\x91\xcf\x7c\xb2\xdc\x85\x8b\x13\xde\x3b\x66\x17\x7e\x6c\xc2\xf9\x2e\x37\x68\x8e\xe9\x1c\x41\xf4\x01\x9c\x77\xd9\x80\x20\x73\x21\xaf\x45\x98\x51\x05\x53\x02\xb4\x50\x61\xa9\xa8\x42\x86\x63\x10\x03\x1a\x86\x69\xca\xa7\x50\xca\xde\xf4\x02\xda\x59\x4f\x08\x44\x0a\x4f\xbb\x7e\x2b\x25\xbc\x0b\xf5\x72\xbb\x3e\xd4\xd2\x2c\x5b\x78\xc7\x68\x75\x2b\x91\x64\x34\x75\x58\x9f\xbc\x8b\xbf\x2e\x0f\x98\xa3\x72\x6d\x06\xcb\x24\xa1\x0d\x75\x92\x68\xa1\x74\xbb\x40\xa8\x32\xb0\x8d\x5a\xd0\xd5\x27\xb2\xa9\xbc\xdd\xcf\xb6\x29\xc0\xd0\xd7\xbb\x60\xda\x79\xdd\xe6\x70\x4b\xee\x63\x60\xd9\x25\x4b\xb4\x7c\x6d\x48\xf5\xd3\x70\xa5\x6b\x61\x47\xac\x94\xaa\x56\x3e\x65\x5a\x0d\xf9\x5e\x4a\x5c\x89\xce\x74\xbd\x98\xea\xbb\xb0\xb3\xcc\x4a\x68\x8e\xbb\xe5\x38\x9d\xca\x27\x6b\x55\xe5\xa4\x99\xe5\x27\x7b\x01\xc4\xcf\x21\xc7\xcf\x11\xfa\xc0\xa1\x06\xdf\x85\x03\x32\x94\x33\x90\xca\x91\x20\x73\x2c\x4d\x80\x16\x82\x98\x62\xc0\x89\x04\x28\x48\x14\x81\xcc\xf1\x1a\x4f\x98\x9c\xbe\xd1\x59\x8c\x57\x4b\xf3\x2f\xba\x93\x45\x7b\x23\x7f\x6e\x50\x63\x48\x87\x2e\x3c\x3e\xca\xb0\xac\x63\x96\xac\x3c\x5b\x66\x78\xef\x59\x52\x5f\xf1\x46\x31\x9c\x3b\x93\xaa\xfb\x92\x52\xde\xc5\xad\x78\xc6\xae\x3b\x1d\xf9\x18\xdf\xc5\x23\x0c\x2a\x6a\xeb\xdd\xb5\x3b\x5e\x7f\xc2\x81\xc2\xc8\xea\xea\xb2\xc6\xda\x52\xda\x5b\x81\xc6\x88\x43\xa6\xb0\x45\xdb\x49\xe8\x2f\xfb\xa6\xe5\xb3\x09\x22\x24\xa7\xb1\x2f\xc9\xfd\xf3\x99\x74\x78\xa5\xce\xe2\x8d\xb5\x56\x67\xf6\xa2\x3e\x15\x13\x16\x39\x5d\x5c\x0a\xca\xa2\xeb\x1c\x05\x5a\x0e\xd1\x56\xfe\xc7\x46\x9c\xb9\xc0\xe6\x10\xd0\x39\x42\xe4\x03\x36\xef\xb2\x01\xa4\x24\x02\xe5\x30\xe1\x88\x40\xf8\x54\x14\x61\x98\x40\x08\x61\xc2\x85\x14\x83\x84\xb2\x34\x93\x22\x06\xc0\x9b\x6e\xc0\x9c\xf8\x07\xbf\x61\x81\x7e\x1f\xed\xac\xf2\x62\xf3\xe1\xdc\x38\xd1\x03\x61\xb3\x3a\xc7\xe0\x09\x55\x20\x5e\x4a\x57\xd1\xf9\xc2\xc4\x14\xac\x83\x5a\x67\x99\x55\x6d\xdc\xde\x06\x89\xf8\xcc\x5f\xb0\x0a\x3b\x37\xc3\x66\xe3\xf3\x56\x91\x29\xc1\x91\x6e\xc7\xee\xa7\x8b\xb6\xb9\x60\xc5\xe4\x21\x39\xae\xfd\xa8\xf2\xdc\x4d\x7c\x75\x1b\x6a\x4b\xf0\xb9\x5e\x5f\x87\x96\xe2\x85\x7a\x93\xee\x47\x55\x12\xf2\x8a\x8b\xf2\x57\xc0\xc2\x6b\xed\x0f\x64\xa6\x9e\x0c\xc7\x5c\x30\xdb\x35\x4b\x6f\x9f\xf9\xd6\x75\x37\x91\xe8\xb4\x22\xf7\x7a\x9a\x66\x1f\x4c\xd5\x10\xe6\xe6\x04\xce\xe1\x7f\x59\xd8\xff\x3d\xce\xbb\x6c\x40\x56\x98\xc0\x30\x90\x39\x0d\x49\x8c\xc3\x19\x0f\x59\x4c\x54\x88\x91\x24\x48\x49\xa4\xf1\x84\x27\x72\x94\x71\xe4\xcf\x38\xcb\x4a\xa8\x0e\x4f\xbe\x98\x80\xf5\x4a\xe4\x45\x72\x6b\x68\xb9\x97\xa3\x03\x4e\xb6\x9e\xec\xd2\xae\x92\x1c\xab\x06\x67\xde\xf7\x46\x43\x38\x50\xbf\x51\x6e\xed\x94\xc9\x5b\x47\x52\x37\x8b\xc5\xb9\x79\x3c\x44\x53\x4d\x77\xd6\xf8\x9c\x96\x79\xe6\x5f\xa0\xa7\x0f\xf5\x0f\x4e\x3b\x9c\xa9\x7e\xea\x63\x09\x9d\x16\xc7\x75\xe3\x2d\x5e\x02\x34\x4a\x7d\xd8\xc0\x20\x6a\x7c\x59\x3b\x2f\xcb\x59\x3c\xde\xc7\xab\xc4\xc7\xd3\x83\x24\x5a\x87\x50\xae\xac\x72\x26\xf7\x32\x92\x60\xb9\x76\x6d\x39\x0b\x03\xce\xe7\x4f\x9b\x0c\x46\x67\x53\x86\xcf\xf2\x53\xe3\x27\x9e\x33\x3c\x87\x8c\x7d\x26\x54\x83\xef\xa2\x01\x5e\x95\x30\xc5\x09\x55\x78\x10\x66\x18\x65\x84\x50\x22\x51\x3e\xcd\x28\x55\x05\x84\x29\xe5\xa3\x4c\xe1\xd1\xbb\xdc\xe6\xd5\xe6\x41\x3d\xcc\x12\xa9\x93\xb5\xe2\x08\x23\xac\x28\x4a\x34\x66\x6c\xb7\x75\x02\xd2\xd6\xb7\x66\x32\x91\x78\x9d\x3d\xec\x8c\x9c\xca\x28\xa9\xaa\xf1\x79\x5c\x15\xeb\xd8\xd8\x5b\xa4\x0f\xef\xbb\x97\xa4\x62\x21\x5d\x5d\x0a\xb4\xf5\x0a\x66\x6d\x13\xc7\x79\xfc\xe4\x36\x51\x2f\x3f\x8d\x4e\xd2\x8b\x49\x3e\xfa\xd7\x98\xb3\xc4\x74\x65\x1b\xc7\xab\x6a\x57\x51\x67\xd2\x3e\xf6\xef\x8f\xe7\x20\x48\xdb\x93\x35\x42\x23\x6d\x99\x58\xf0\xae\x9a\x85\xde\x38\x55\x6d\x56\xa9\xdd\xed\x68\x08\xbd\x7a\x34\xeb\x85\xc4\x3d\x0f\xe1\x3a\xb1\xc3\xfe\x53\x1b\x07\x0a\x73\x48\xf1\x1c\x02\x30\x87\xf8\x03\xf3\x27\x7c\x17\x0e\xc8\x34\x4c\x69\x28\x83\x38\x91\x79\x85\x52\x99\xaa\x0a\x9f\x12\x08\xb8\x90\x57\x28\x54\x53\x14\x22\x86\x08\x78\xa3\xb3\xd6\xbd\x6e\x69\xe7\x2f\x0d\x2e\x80\x61\x96\xd1\xb0\x1f\x02\xfb\xa4\xf1\xa8\x7f\x14\xee\xb3\x43\x04\x78\xbd\xbd\x49\xf1\x4e\x1a\xd6\xd7\xfd\x7d\x4c\x2a\x96\x38\x95\xdb\x0b\xeb\x93\xba\xb5\x65\xcd\x7f\xed\xc4\x00\x5b\x8f\xcb\x4e\x95\xa1\xd9\xab\x3d\xbf\xf7\xee\x3f\x3b\xa7\xd6\xef\x93\x52\x6e\xfb\x68\xc8\xf6\x4a\x4b\x16\x5a\xd0\x2f\xaa\xbc\xba\xca\x46\x48\xd6\xfc\x4e\x5b\x4c\xdd\xb8\xad\x73\x6c\x17\xf5\x80\xd1\xd8\xcd\xf8\x6d\x65\x4a\xc7\xd1\x9b\xe5\x97\x8b\x2e\x57\xb7\x83\x7c\xac\x2e\xeb\xee\x0a\x82\x4d\x98\xd4\x36\x84\xee\x7e\xfb\xa9\x92\xf3\xa3\x83\xe6\x84\x9f\x23\xfc\x89\x6e\xed\x5d\x38\x90\x65\x98\x09\x2c\xc4\x0a\x25\x92\x80\x33\xc4\x24\xcc\x33\x26\x87\x2a\xe2\x28\x0c\x99\x8a\x59\x2a\x61\xa6\xa8\x6f\x70\x7c\x1d\x5f\x77\x3b\xce\xaf\x55\x51\x05\x53\x2d\x27\x6d\x8a\x1f\xc2\x43\xbf\x5f\xd7\xbc\x34\xa4\x99\xac\x71\x0f\xc2\x67\xe5\x41\x51\x2f\xea\x92\xa8\xeb\x47\xc1\xdf\xfc\xa6\x33\xd3\x43\x90\x65\xa3\xa4\xb9\x47\x30\x61\xb5\x5d\xaf\x6c\x97\xe6\xb3\x43\x5a\x28\xc3\x4f\x1e\x7d\x3d\xf1\xd2\x2d\xe8\xfa\xf3\xb8\xb2\x4d\x9b\xe4\x47\x29\x69\xc8\x2e\xf0\x35\x59\xa2\xa7\x44\x8d\x14\x77\x75\xdc\x5e\xb0\xab\xae\x5e\xeb\xed\xc5\x51\xa0\xe2\x3a\x0d\x5f\xc7\x4e\x56\xde\xfb\xb4\x38\x27\xfe\xf9\x34\xc3\x34\x91\xa9\xe6\x80\xd9\xb4\x40\x97\x81\xeb\xf3\x4f\xe2\xe0\xf9\xf7\xb9\xc6\x3e\xd1\x10\xbc\x8b\x07\x42\xc2\x54\x46\x78\x4d\x22\x29\x01\x92\x06\x01\x85\x9c\x20\x27\x0a\xc3\xb2\x9c\x65\x02\x8d\x15\x41\x11\x04\xc2\xde\x9c\x6b\x65\xb8\xe6\xab\x06\x8e\xf7\x4a\x31\xcc\xcc\x90\xb7\x80\xdf\x70\x89\x32\xf8\x87\xe2\xa9\xb2\xcb\xa6\x69\x65\x65\xb8\xfa\xa4\xaf\x56\x23\xbf\x98\x35\x09\x1d\xc4\x73\xb3\x32\xba\xd5\x44\x94\x25\xa7\xc9\xb7\x7b\xb8\x24\xaf\x50\x79\x5d\x54\x1d\x65\xf8\x78\x68\xf6\xfa\xcf\x9c\x33\x3d\x62\xd6\x4e\xde\x74\xf3\x85\x62\x71\x1e\x71\x6c\xfb\x7b\x60\xc1\x3c\xb9\x71\x63\x79\xbd\xee\x97\xa3\x38\xb3\x16\x63\x70\x8e\x2b\x5c\xae\xeb\x3d\xf0\xe9\x50\xa8\xf2\x22\x9e\x35\xc3\xb3\x5f\x66\xeb\x41\x60\xad\x16\xe0\xb4\x78\x19\xf1\x22\xb4\x7c\xdd\x79\x7c\x18\x07\x32\x3c\x47\xdc\x27\x74\xde\xe5\x03\x0c\x51\x2c\x68\x8c\x93\x10\xd4\x04\x3e\x0d\x09\xe2\x35\x12\x0a\x02\xaf\x45\x40\xe4\x54\x26\x85\x28\x02\x02\x7c\x73\xae\x89\x3b\x87\x1f\xa0\xbf\x12\xf7\xe9\xcc\xc9\xee\x8e\xb3\xcf\x4f\x6d\x31\x2e\x99\x1a\x2e\xfc\x1a\xef\xcc\x6a\xf7\x3c\x89\xd4\xc2\x22\xab\xa7\xf6\x8e\xcb\x56\xf2\x66\xa8\x19\xf3\xd6\x16\x5e\xb7\xae\x58\xc1\xfd\xc9\x8d\x2e\x7b\xec\x2b\x63\x72\x6a\x10\x37\x4d\xb2\xf9\xa3\x13\x5d\x61\xd5\x89\x46\xd2\x44\x5b\x61\xb6\x67\xe5\x15\xe6\xe5\xa0\x66\x44\xcc\x8d\x63\x2e\xce\x72\xea\xae\x5b\x79\x21\xaa\x79\x9b\xe4\x65\x25\xd4\x4e\xf8\xf2\x6c\x5f\x5f\x48\xe3\x7a\x8c\x8a\xdc\xe8\x43\x4b\xa8\xb2\xa5\x25\xd9\x19\x2c\x2c\xa9\xba\xef\xad\x17\xfd\xa8\x0e\x9a\x43\x44\xe6\xe4\x03\x6f\x0b\xd0\xbb\x88\x80\xe7\x25\x84\x59\x88\x45\x89\xc9\x1c\x05\x0a\x8e\x23\x15\x31\x9e\x67\x62\x9a\x11\x80\x60\xc6\x48\x46\xa4\xec\x4d\x78\xb3\xe5\xa5\xe5\xe2\xa0\x68\x86\x76\x15\xa4\x23\x8f\x8e\xbb\x63\x71\x4c\x12\xb0\x92\x1c\x17\xa4\xeb\xce\xf0\x4f\x4e\x19\xea\x04\x5c\x7c\x92\xd2\xcc\x5a\x54\xe3\x62\x67\x76\x57\x18\xe0\x85\x5c\x9d\x0b\x57\xf5\x95\x9e\x3f\xb9\xc7\x29\xbd\x67\xe2\x04\x9d\x81\x0d\xf8\xe7\x25\xa8\xd5\x14\x9b\x55\xab\x49\x14\xd0\x49\x3c\xb6\xb0\xc2\xfa\xa6\xda\xa5\xbb\xd9\x09\x3c\x9d\xea\x86\x9d\x73\xf7\x50\x73\x69\xb1\x89\xb5\xcb\x7e\xc6\x26\x55\xb5\xe0\x6e\x59\x5b\xb7\x63\x8c\xa3\xd7\x5e\xce\x6a\x67\x13\x42\xd1\x2a\xee\xcb\xd9\xd9\xb2\x22\x17\x9e\x57\xee\xa7\xa6\xd0\x7f\xe2\x20\x82\xe7\x90\xff\xc0\x14\x8a\xde\x65\x04\x7c\x08\x38\x06\xa5\x34\x84\x91\x92\x48\x1a\x85\x82\x16\x2a\x00\x08\x91\x4c\x25\x1e\x84\x48\x4d\x04\x84\x79\xfa\xa6\x99\x56\xaf\x2a\x51\x9a\xe8\xd1\xb8\x9a\x48\x8e\x39\xdd\x25\x93\x95\x6d\xe1\xb8\xf4\x5f\x42\xe2\xb9\xd5\x69\xb6\xdf\x15\x1d\x32\x0f\xfb\x97\xb8\x38\x93\x6d\xd0\x8f\x41\xe9\x22\xce\x1b\x72\x97\xea\x5c\x78\xd9\x95\xb7\x28\x52\x87\xc3\x8e\xcf\xc7\x70\xf7\x12\xb1\x7d\x7c\xfc\x54\x1d\xb1\xd9\xd2\xdd\x2b\x97\x5f\xfc\x6d\xd3\x63\xb7\xd9\x60\xb6\x20\x29\xb7\xd5\x85\x7c\x87\x0f\x7d\xe6\x37\x1b\xd7\x3e\x87\x51\xbe\xc8\xea\x68\x67\x93\xb4\x7c\xbe\x82\xd4\x49\x5f\x4c\x38\x29\x42\xc5\x09\x49\xfe\xd4\xa6\xf5\xa4\x5e\xbc\xc7\x53\x34\x0a\x4d\xe9\x67\xf8\x53\xcd\xf4\x8f\x0e\x9d\x63\x38\xc7\xff\xb3\x41\xe7\x2f\x5f\x5f\xff\xef\x3f\x02\x00\x00\xff\xff\x3f\x97\x9f\xa1\xe0\x21\x00\x00")

func shoalDelegatesJsonBytes() ([]byte, error) {
	return bindataRead(
		_shoalDelegatesJson,
		"shoal/delegates.json",
	)
}

func shoalDelegatesJson() (*asset, error) {
	bytes, err := shoalDelegatesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shoal/delegates.json", size: 8672, mode: os.FileMode(420), modTime: time.Unix(1589512727, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"shoal/delegates.json": shoalDelegatesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"shoal": &bintree{nil, map[string]*bintree{
		"delegates.json": &bintree{shoalDelegatesJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

