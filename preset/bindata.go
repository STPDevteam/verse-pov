// Code generated by go-bindata.
// sources:
// shoal/delegates.json
// mainnet/delegates.json
// DO NOT EDIT!

package preset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _shoalDelegatesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\xd1\x49\x8f\xa3\x46\x14\xc0\xf1\x7b\x7f\x0a\xe4\x2b\x13\xbb\x8a\x2a\x6a\xb1\x34\x07\x30\x18\x1b\xbc\xd1\xde\x89\xa2\x16\xab\x6d\x18\xcc\xe2\x02\xdc\x8e\xe6\xbb\x47\x9e\x4c\xdf\x3a\x8a\x34\x73\x7d\x4f\xef\xf0\xfe\xbf\x3f\x5f\x24\xe9\xef\x17\x49\x92\xa4\xde\xd5\xcf\xe3\xde\x50\xea\xdd\xce\x85\xff\xed\x0f\x00\x7b\x5f\xfe\x9d\xfb\x51\x54\xc7\xb7\xdb\x73\x05\xee\x44\x65\x3a\x89\x7c\x42\x15\xc4\x29\x8f\x47\x2a\x49\xe2\x04\x2a\x9c\x8c\x21\x54\x31\xa5\x98\x00\x8d\x51\x4e\x3f\x8e\xcb\x26\x78\xcb\xe2\xf7\xe7\xb1\x6e\xb0\xda\xeb\xd2\xe8\x52\xf3\xf3\x25\x12\xd5\xdd\x70\xd4\x3a\x08\xac\xda\x5a\x7b\x5c\xf7\xc0\x2b\x67\xa9\x26\xca\xbb\x13\xcd\x6c\x70\x45\x7a\x30\x8e\xa7\x40\x15\x41\x29\xf6\xa2\xb5\xd5\x43\x9e\xe5\x58\x0d\x9d\xae\xb4\xbc\xea\x8e\xb8\x0f\x9a\x79\xe6\x73\xf0\x75\x38\x1c\x26\xbc\x39\xaf\xad\x70\x73\x78\xd5\xb3\x65\x55\x1e\x1b\x23\x4b\x3b\x9c\xe5\x61\x9b\x6b\xe6\xcc\xf2\x1b\x3a\xb7\x77\xd6\xc9\xed\x56\xb2\x45\x90\xdc\x3e\x3a\x73\x2b\xef\x47\x0d\x88\xc1\x62\xac\xe7\xf6\xb8\xbc\x6d\xb8\xe7\x9e\xa6\xad\x5f\x3e\xca\x23\x8c\xda\x8b\x33\x76\xb5\xaf\x1f\x5f\xb4\x85\xb8\x5c\x4f\x6f\x65\xd1\xc5\x75\x6f\x28\x41\x00\x7e\x2e\xae\xb1\xe8\x8a\x3a\x7b\x7b\x36\xea\x0d\x7f\x96\x94\xa4\xde\xa5\x7c\x7e\x8c\x49\x1f\x22\xda\x87\x9c\xf5\x15\xf4\xd1\xf3\x19\xa5\xa8\x45\x6f\x28\x31\x42\xc1\x8f\xd1\xf7\x17\x49\xfa\xfe\xe5\x3f\x25\x94\x4f\x25\x10\xd6\x0d\x4e\x15\x90\xe0\x88\x21\x23\x50\x42\x16\xd1\x28\x66\x34\x1e\x21\x16\x50\x86\x14\x04\xe0\x48\x23\x9f\x4a\x4c\xaa\xc1\x22\x0f\x83\x78\xb9\x1e\x74\x66\xe5\x59\xd6\x71\x79\xca\x29\x1f\x88\x59\xe6\xbd\x03\x80\xa7\xe3\x06\x9f\xd2\xb5\xa0\xe9\xc5\x18\x24\xb3\xda\xbe\x45\xce\x7a\x52\xc5\x83\xc2\xad\x36\xea\x3b\x65\x42\x90\x09\x7a\xd4\x00\x92\x73\x7b\x10\xf1\x60\x21\x3a\xfa\x43\x22\x58\x94\x5d\xb2\x4e\xed\xe0\x96\x6d\x61\xf8\xd0\x53\x50\x0e\x94\x23\xbe\x01\x94\x4e\x58\x7e\xe7\xd7\x9d\xec\x9f\x0f\xaa\xca\xa0\x3a\x59\xbc\x5a\x00\xc9\x57\x33\x5d\xce\xb2\x33\xde\x87\x8b\xd3\x36\x56\xe6\xae\xb3\xdb\x74\x0c\xe5\xa7\xc5\x96\xd9\x0d\xe5\xf3\x31\x3b\x99\xbf\x2b\x01\x51\x5f\x81\xb8\xcf\x70\x5f\x51\x7f\x1d\x02\x7d\x0a\x11\x93\x90\x22\x48\x35\x85\x40\x13\x60\x15\xf9\x84\x72\x34\x06\xa1\xa9\x60\x42\x42\x15\xb0\x08\x25\x4a\x08\xf0\x67\x10\xda\xb1\x71\xe5\x28\x2c\x27\xde\x8a\x26\x17\xbd\x71\x12\x10\x45\x82\x57\x95\x19\xdc\xe3\x6c\xa0\x1a\x63\xe3\x54\x30\x4e\xc3\x57\x3c\x29\x76\xc6\xe1\x5b\x3d\x11\x76\xbb\x8a\x46\xe4\x38\xd2\xe7\x78\x1b\xae\xf5\x8a\xcb\x86\x6e\x71\x3e\xbd\x6d\x4c\xf7\x9a\xac\x3d\xdf\x7c\x42\xac\x9c\x7d\x85\x77\x6e\xd5\x1e\x88\xac\xcb\xc8\xaa\xdb\xe5\x75\x6d\xce\x8a\x95\x50\xb4\xb3\x93\x2c\x8a\x87\x7f\xc4\x97\xe9\x03\x09\xc5\x68\x8b\x58\x38\x91\x41\x41\xbd\x02\x6e\xb7\x61\x64\x7f\x0d\x1d\x78\xdb\x6a\x14\xcc\xed\x74\x69\x0f\x64\xc2\x3d\xcd\x95\xb5\xdf\x87\x50\x9f\x02\x6a\x1f\x2a\xb8\xaf\x40\xfa\x3f\x12\x2f\x7f\xfd\x13\x00\x00\xff\xff\x1f\x48\x78\x01\x9f\x04\x00\x00")

func shoalDelegatesJsonBytes() ([]byte, error) {
	return bindataRead(
		_shoalDelegatesJson,
		"shoal/delegates.json",
	)
}

func shoalDelegatesJson() (*asset, error) {
	bytes, err := shoalDelegatesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shoal/delegates.json", size: 1183, mode: os.FileMode(420), modTime: time.Unix(1637272277, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mainnetDelegatesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd7\xc9\x8e\xb3\xd8\x15\x07\xf0\xfd\xf7\x14\xa5\xda\xba\x63\xee\x08\xdc\x92\x7a\xc1\x68\xb0\x99\x0c\x1e\x89\xa2\x16\xa3\xc1\x18\x0c\x18\x1b\xdb\x51\xbf\x7b\x54\x5f\xba\xb3\x72\x14\xa5\xaa\x17\x6c\x40\x2c\xee\xf9\xe9\xfc\xcf\x3d\x7f\xff\xf1\xf6\xf6\xcf\x1f\x6f\x6f\x6f\x6f\xef\x4d\x54\x67\xef\x1f\x6f\xef\x75\x54\x36\x7f\x03\xf0\xfd\x97\x7f\xbf\x8e\xd2\xb4\xcf\x2e\x97\xcf\x2f\xe0\x2e\x33\x11\xe8\x39\xe6\x25\xc6\x14\xa0\x60\x99\x00\x11\x09\x4c\x03\x88\xa6\xa2\x86\x54\x49\xc8\x74\x9e\x42\x40\xff\xfc\xb9\xbd\xc6\xbf\x55\xd9\xe3\xf3\x67\x59\x4b\x6f\xe7\xf9\x25\xb4\xc2\x11\xd5\xf5\xc2\xab\x42\xb3\xb5\x96\x58\x66\x9c\x05\xc6\xa8\x1f\x2f\x75\x1d\xc0\xd4\x31\x82\x5d\xae\x7a\xe0\x26\xdf\xf9\x79\xb0\xbf\xd4\xd7\xed\x78\xe4\xf0\xe5\x4c\x8f\x5c\xdd\x30\x37\x5f\xcd\x6d\x5b\xb3\x5d\xce\x1a\xfc\x3a\xf0\xdc\xf3\xaf\x1f\x1f\x1f\xd6\xb6\x3c\x99\x72\xd9\xf6\xcb\xed\x95\x29\xb9\x7b\x5f\xcf\x6c\x8d\x9d\x00\x63\x8c\xac\xcf\x4f\x3f\x6a\x70\x39\x64\xfd\x8c\x43\xcf\x6e\x58\x3f\x35\xbe\x19\x91\x77\x13\x6f\xad\xa4\xcf\x83\xe5\xea\x49\xf2\xb8\x43\x45\x4a\x53\xa3\x5f\x9a\xc7\xed\x8e\x0a\x24\x1f\x24\xe9\xd7\x3f\x4f\x71\x3b\x0f\x65\x73\xf8\xad\x3d\x8f\x59\xff\xfe\xf1\x06\x01\xf8\xe3\x43\x93\x0d\xe3\xb9\xaf\x7e\xfb\xac\xd1\xfb\xc7\x1f\x85\x7c\x7b\x7b\x2f\xdb\xcf\x13\x43\x81\x4e\x09\x9c\x42\x8a\xa7\x10\xfd\x59\xcf\xcf\xa2\x9c\xfb\xe1\xfd\xe3\x4d\xe4\x05\xf0\xf3\xd5\xef\x3f\xde\xde\x7e\xff\xe5\xbf\x41\xa0\x97\x10\x18\x51\x9e\x10\xac\xe8\x82\x22\x28\x7c\xc2\x64\x9d\x25\xa2\x40\x72\x9a\x23\xcc\x10\xa2\x1a\x88\x31\x11\x05\xed\x25\x44\x14\xf9\x7d\x4e\xc6\x79\x58\x0c\xb3\xd3\xa1\x2e\xf3\x7c\x3e\xbb\x37\x20\x4d\x7c\xa1\x36\xe3\x80\x76\x76\xa2\xca\xb7\x38\x57\x2f\x5c\x73\x3c\x6e\xc8\x31\x0d\x6e\x65\x9c\x2c\x53\x8d\x8f\x0e\xd5\xe9\x90\x35\xeb\xc6\x5e\x9d\x24\xc6\xf1\x61\x8a\xcb\x01\x1a\xf7\xad\xf9\x09\xb1\x91\x05\x23\xf0\xcb\xb3\xd0\xd9\xac\xac\x5a\xf9\xa2\x86\x23\x59\x2f\xfc\x4d\x75\x37\xe0\x31\xd8\xf0\x13\x59\x63\x43\x07\xcb\x89\x75\x32\x53\x83\x2b\x3d\x3c\xcb\x85\x6a\x0c\xe4\xd5\x61\x71\x0f\x86\xd3\xe1\x14\x48\x4c\xb1\x9d\x7d\x4b\xec\xc9\x2e\x73\x76\x31\x3c\x4a\xda\xb7\x21\xc4\x29\xc4\x6c\x0a\x31\x3f\x85\x00\x7f\x15\x02\xbf\x84\x10\x11\xd1\x65\x01\x0a\x31\x80\x32\x8f\x48\x94\x00\x29\x8e\xd5\x18\x53\xc8\x34\x9e\x61\x1e\x40\xa6\x42\x05\x65\x2f\x21\x42\x97\xeb\x70\xb4\xd0\x03\x73\x77\x30\x0b\x0a\xf4\x85\x23\x3e\x4f\x8e\x5d\x89\xca\x22\x2d\xf7\x59\x37\xe9\x1d\xab\x51\x4d\x7d\xd5\xda\x9c\xb5\xef\xa4\xc3\x35\x52\xaf\xce\xf3\x6e\xac\x0e\xfa\xae\x94\xb9\xb2\x5e\x5a\x47\x16\x9e\xf4\xa5\xbd\xa0\x47\x4e\x39\x32\x4f\xfb\x84\xf0\x86\xeb\x1d\xf7\x33\x33\x82\xe6\x25\x1f\x85\xf5\xe6\x41\x27\x56\xa5\x3f\xf7\x26\xd1\xf5\x0d\xc6\x97\x4b\x57\xbb\x7c\xb7\x52\xc5\x30\x3b\x27\xe1\x23\x76\xe6\xe3\xc2\xb3\xcc\xf6\xa0\x5c\x7b\x07\x0d\xc7\xa5\x3a\xce\x3c\xb8\x5f\x0c\x70\x17\x92\x99\x65\x9f\xa0\xdb\x8f\xdf\x86\xc0\x53\x30\x85\x18\x4f\x21\x4f\xbe\xaa\x40\x5e\x2a\x68\x3c\x2f\x32\x0c\x89\x20\x09\x18\xa4\xa9\x94\xb3\x0c\x44\x19\x41\x91\x2a\x64\x8a\x48\x28\xaf\x42\x3d\xa1\x40\x7d\xa5\x30\xaf\xed\x40\x97\x37\x4d\x0f\xe6\xc1\xea\xcc\xdb\xc5\xbc\xa7\xab\xed\x69\x13\x2d\x5a\x51\x1c\xcc\xb0\x18\x2f\x8d\x88\x8b\x66\x1c\xa5\x08\xa2\xed\x62\xde\x1f\xe6\xd6\xfe\x50\xef\x2e\x38\xb9\xa6\xe1\x59\x73\xd4\xa2\x6b\x37\x5b\x6b\x75\x66\xb5\x75\x3e\x24\x34\x0f\x6f\xe4\x53\xc1\x3c\x4f\x5c\xd6\x0f\xa6\x61\xfb\xf2\x04\xc5\x60\x21\x35\x92\xbf\x5f\x65\x42\xab\x4e\x7a\xbc\xc6\x6a\xbf\x09\x58\xea\x69\xad\x71\x58\x24\xd6\x2e\x68\xd3\xa6\xaa\xee\x62\x1b\xe7\xa9\xac\x3c\x79\xf1\x32\xb9\x0c\xd5\x36\x89\x8e\xbe\xa2\x19\x0e\x70\xe1\x10\x2b\xe4\xf0\xfd\x76\xc0\x53\xf4\xf9\x60\x36\x15\xbf\x1c\x4b\xf4\xa5\x03\x03\x58\xa7\x82\xa0\xf0\x40\x60\xbc\x1c\x25\x28\x8e\x62\x24\x26\x02\x54\x61\x22\xc3\x5c\x55\x78\x85\x24\x04\xb0\x57\x0e\xf2\xd3\x7c\x94\x5a\x6d\x9c\x8a\x49\xc5\xba\xd8\xe1\x8e\xcb\x6d\xbd\x15\x94\x5c\x7f\x1e\xeb\xc6\x99\x7b\x43\xb0\x51\x5a\xef\x1c\x1b\x13\x50\x71\xe8\x79\x18\xbc\x32\x21\xeb\xc4\x90\x84\x6d\xe9\xf6\xe9\xd6\xe7\x23\x69\x6d\x5b\x5c\xb6\xb9\x79\x06\xd7\x12\xcb\x47\xf7\x9f\xf3\xc1\xbb\x5d\x9d\xfb\x2a\xa6\x92\x6e\x48\xcb\x3a\x34\x8a\x7c\x7e\xc3\xa7\x00\x94\x30\x6d\xcd\x85\xb3\xb9\x3e\xd6\xd7\x68\x1e\x3c\x75\x65\xa8\x66\x5c\x58\xa4\xcc\x01\x6b\xa9\xc8\x98\x89\x20\x9c\x2d\x2d\xc0\xca\xec\xa4\x42\xdb\x90\xa4\x5b\x7a\xeb\xd6\x1d\x67\xdc\x9b\xc3\xb7\xe7\x03\x25\x53\xc8\xb3\x29\x22\xe2\x94\x82\xaf\x3a\xf0\x2f\x1d\x08\x92\x62\x2d\x11\x61\x0c\x93\x9c\x50\x11\xd1\x84\xa9\xb2\x4e\x54\x9e\x51\x40\x61\x9a\x33\x90\x68\x02\x4d\xa2\x97\xfd\x10\xa7\xa7\x2a\xa7\xfa\xbe\x5a\x24\xb2\xd4\x5f\xc2\x73\x81\x8c\x72\xc6\x62\x57\xc8\xd0\xb6\x4d\x68\xeb\x2d\xd1\x2d\xb9\xec\xe8\x62\x35\xef\x27\x87\xe7\x3a\x56\x1e\xb7\x7e\x55\x6c\x76\xd1\x6c\xb1\x0d\x90\xb1\x6e\x77\x69\x17\xd2\x2a\xf7\x5c\x74\x95\xb6\x3e\xbf\x83\x3f\xc7\x83\xac\x00\x5b\x48\x6b\x23\xdd\x60\x1b\x64\x81\xb6\x7c\xe2\xdb\xa9\x9c\x34\x58\xaf\x02\xb1\xf6\xbc\xe0\xc9\xed\x05\x5d\x42\x3d\x77\x3d\x74\x75\x97\x43\x94\x90\xbd\xe5\x6c\x94\x74\xb0\x96\x52\x5e\xd7\xf9\x73\x59\xec\x16\xcb\x55\x17\x3d\x26\x67\xdc\x3b\x76\x8e\xa5\xe5\xb7\xfb\x81\x90\x29\x22\x68\x4a\xd9\x14\x0a\xf4\xab\x0e\xc2\xeb\x7e\xd0\x98\x24\x8a\xba\x2c\xa6\x3a\x9f\x32\x02\x59\x46\x28\x8f\x23\x4c\x05\x29\x22\x00\x89\x40\x11\x45\x80\x80\xfc\xb2\x1f\xe6\x90\xf7\x67\xf1\xf1\xf4\xb8\x36\xf5\x56\x11\xfd\x44\xa5\x9e\xa0\xcc\x6c\x03\xa4\x85\xb0\xc2\x63\x51\x6c\xf0\xce\x31\x22\x45\xc2\x55\x12\x3f\x67\xfb\xec\x9a\x10\x4d\x58\xf1\x5b\x7a\x9f\xbb\x8c\x3f\x3d\x70\xa6\xb5\x34\x2e\x3a\xd6\xa5\x35\x47\xc3\x36\x26\xf6\xa7\x43\xad\x1b\xbe\x3c\x71\x17\xdc\x49\x7c\x64\xa8\x1f\xdd\x70\xe7\x32\xb5\x39\x5d\x49\xdf\x78\x1d\xdf\x67\xd1\xe3\x90\xce\x69\x2a\x97\x6e\x65\xef\x8d\xc0\x3a\xcd\x81\x34\x89\xf5\xe2\x19\xc5\xd5\x64\x25\x8b\xce\x62\x76\xe7\xa1\x90\x52\x27\xe4\x99\x15\x70\x73\xdc\xa5\xdf\xcf\x25\x4a\xa6\x08\x80\x29\x26\x53\xf4\xe5\x21\x2d\xbe\x64\x48\x48\xc4\xab\x18\x30\x9d\xd7\x05\x4a\x53\x90\x65\x89\x9a\x61\x04\x08\xc2\x22\xe3\x55\x82\x34\x4a\xa8\xae\xbe\x8c\x25\xcf\xe5\xc6\x02\x77\xa6\x70\xbe\x97\x4e\xa8\x57\xad\x50\x38\x37\x0b\x38\xa6\x37\x2c\x57\x4f\xd7\xa9\x76\x1d\x77\x56\x4c\x73\xbf\xa8\x65\xcc\xe9\x4f\x7f\x21\xc4\x28\x14\x2a\x93\x1b\x9b\x3c\xcb\x1e\x9a\xba\x88\x8f\xb9\x5d\x26\x06\xac\xe2\xfc\x3e\xf7\x47\xdb\xb9\x8b\x9f\x0c\x49\x74\xef\xe3\xfc\xe2\x88\xf5\xdd\xdb\x9f\x9c\x92\x25\xcf\xe2\x22\xb1\x55\xe0\x5a\x03\xd8\xb5\x5c\xd3\x2a\x75\x92\x17\x1c\x12\xf2\x30\x99\x1f\x56\xfb\x68\x49\xf2\x55\xe3\xed\x49\xaa\x79\x7e\xb6\x9d\x37\xb7\xb3\x2a\x3f\xa3\xf3\xe8\x86\x96\xbf\xf6\xa3\x23\x1c\xe3\xbf\x24\x96\x78\x71\x0a\x11\x9d\xc2\xff\x94\xf3\xff\x76\x60\x2f\x1d\x78\x45\x84\x44\x62\x50\xe0\x19\x42\x39\xe1\x51\x0e\x54\x04\xd3\x44\xa6\x10\xf1\x0c\x23\x88\x94\x88\x4a\xa2\xf8\x32\x96\x96\x55\x2d\xef\xf8\x05\x22\xaa\x67\x33\x04\x2e\x0b\xaa\xdc\x7d\x5d\xd3\x9e\xf9\x4c\x02\xa3\xf9\x74\x7c\x2e\x5e\xad\xdb\x9d\xac\xb5\x4c\xaa\x1c\x4d\xea\xc3\x39\x97\xd9\x9e\xbc\x13\x34\xae\x4a\xbc\x5b\x7f\x9b\x6c\x5a\x2d\xb0\x8c\x89\xa6\x5c\xf0\x78\x5d\xbb\xe9\xf2\xd3\xc1\xcd\x1e\x1e\xc7\x15\x93\xbc\x3c\x20\x14\x14\xfc\x55\xb7\x70\x35\x6c\x06\x77\xf5\x78\x78\x1d\xf2\xa5\x7d\xec\xd4\x3b\xe5\xe0\x9b\x7e\x9b\x9c\xca\x79\x81\x76\xfc\xd3\xd5\xee\x66\x14\x86\x71\x71\x03\x41\xaf\xee\xbd\x38\xb8\x6b\x71\x71\xdc\x92\xba\x77\xcf\x3b\xec\x2d\xbf\xbf\x3e\x88\x53\xc8\xd0\x14\x51\x3c\x45\xe0\xab\xb9\x04\xc1\xeb\xf5\x01\x4a\x3c\xa1\x2a\xc1\x00\x23\xc8\xeb\x99\x92\xe4\x90\x6a\x98\x00\x31\x51\x19\x26\x69\x16\x49\x10\x32\x1e\xbe\x82\xd0\x27\xed\xb1\x9a\xd9\x2c\x56\x9b\xe3\xd1\x37\xb5\x61\x82\xb7\x22\xba\xd8\x47\x7a\xcb\x13\xb7\xa6\xda\x66\xb5\x58\x36\xeb\xf5\xd0\x7a\x54\x0d\x03\xae\x8f\x9a\x7a\xf6\xa0\x5c\xeb\xd5\x4f\xcc\x29\xf7\xdb\x70\x4c\x66\xa5\x72\xf5\x9d\x34\xab\x05\xb1\x72\x0e\x22\x7d\xfc\xcc\xa5\xa3\x7d\x1e\x6e\x3c\xb1\xcf\x76\xb2\x0c\xad\xa6\x9c\x45\xc5\x4e\xdb\x5e\xc2\x8b\xb4\x80\xe2\x23\xb9\x85\x6c\x80\xfd\x5d\x77\xbb\xe5\x75\xcc\x67\x49\xa1\x25\x5d\xbf\x55\x02\xb0\xf7\x59\x31\xef\x2b\x2f\x45\xce\x43\xa8\x96\xda\x6a\xb6\xbb\xac\xd4\xc0\x89\xda\x28\x9c\xff\x15\xb7\x56\x88\xf8\x29\xc2\x60\xca\x7f\x35\x97\xe0\xeb\x75\x5a\x83\x98\x4a\x3a\x81\x44\xcb\xa9\x20\x88\x40\x48\x45\xaa\x23\x86\xd4\x44\x03\xbc\xa0\xe4\x08\x30\x9e\x30\xe1\x25\x83\x3b\x9e\x85\xb8\xb9\x47\xc5\x7a\x65\x11\x35\x0b\x66\x67\x52\x9e\xc3\xee\x9c\x5c\xa0\x75\xdc\x0b\x05\x4b\x7b\x69\xe3\x71\xc6\xc6\xa8\x77\xb2\x8a\xb7\x1b\x75\xde\xaf\xcd\xe2\x99\x98\x3e\xde\xb5\x8f\x67\x50\x8c\xcc\xdf\xde\x03\xe0\x96\x82\x28\xd6\x5a\x79\xd9\xcc\x82\x9f\xcb\x43\x18\x7b\x89\x50\x7a\x47\xb9\x36\xa2\xd6\x5d\x38\xd7\x8b\xb1\x10\xaf\x77\x51\x60\x70\xce\xd3\xfb\xb2\x3f\xe8\xab\xf5\xac\xd5\xda\xce\xdd\x16\x28\xd1\x49\x7c\x19\x7c\xd4\xf1\x4b\x97\x16\x25\x17\x3c\xaa\x2e\xdb\xdc\x46\xbe\xed\x4a\x13\x21\xd3\x3c\x79\x14\x68\xee\xf7\x19\x28\x9a\x22\x71\x4a\x84\xff\x7d\x69\xfd\xf1\x8f\x1f\xff\x0a\x00\x00\xff\xff\x4f\xe0\xdb\xcf\xd8\x10\x00\x00")

func mainnetDelegatesJsonBytes() ([]byte, error) {
	return bindataRead(
		_mainnetDelegatesJson,
		"mainnet/delegates.json",
	)
}

func mainnetDelegatesJson() (*asset, error) {
	bytes, err := mainnetDelegatesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mainnet/delegates.json", size: 4312, mode: os.FileMode(420), modTime: time.Unix(1637272809, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"shoal/delegates.json": shoalDelegatesJson,
	"mainnet/delegates.json": mainnetDelegatesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"mainnet": &bintree{nil, map[string]*bintree{
		"delegates.json": &bintree{mainnetDelegatesJson, map[string]*bintree{}},
	}},
	"shoal": &bintree{nil, map[string]*bintree{
		"delegates.json": &bintree{shoalDelegatesJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

