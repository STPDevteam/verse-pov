// Code generated by go-bindata. DO NOT EDIT.
// sources:
// compiled/Executor.abi
// compiled/Executor.bin
// compiled/Extension.abi
// compiled/Extension.bin
// compiled/ExtensionNative.abi
// compiled/ExtensionNative.bin
// compiled/IMeterNative.abi
// compiled/IMeterNative.bin
// compiled/Measure.abi
// compiled/Measure.bin
// compiled/Meter.abi
// compiled/Meter.bin
// compiled/MeterERC20.abi
// compiled/MeterERC20.bin
// compiled/MeterGov.abi
// compiled/MeterGov.bin
// compiled/MeterGovERC20.abi
// compiled/MeterGovERC20.bin
// compiled/MeterNative.abi
// compiled/MeterNative.bin
// compiled/NewMeterNative.abi
// compiled/NewMeterNative.bin
// compiled/Params.abi
// compiled/Params.bin
// compiled/ParamsNative.abi
// compiled/ParamsNative.bin
// compiled/Prototype.abi
// compiled/Prototype.bin
// compiled/PrototypeEvent.abi
// compiled/PrototypeEvent.bin
// compiled/PrototypeNative.abi
// compiled/PrototypeNative.bin
package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _compiledExecutorAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x55\x3d\x6f\xdb\x40\x0c\xfd\x2f\x9c\x35\xb5\x45\x51\x68\x33\xd2\xa5\x43\x01\x4f\x5d\x82\xc0\xa0\x75\x4c\x7a\xa8\x4c\xaa\x77\x3c\x25\x42\x90\xff\x5e\xc4\xd2\xf5\x24\xeb\xa3\x6e\x6a\x58\xe8\x66\xc0\x8f\x4f\x8f\x8f\x8f\xbc\xdb\x67\x28\x84\xbd\x22\x2b\xe4\xea\x02\x65\x60\xb9\x0a\xea\x21\xbf\x7d\x06\xc6\x03\x41\x0e\x90\x81\x36\xd5\xeb\x2f\x34\xc6\x91\xf7\xf0\x72\x97\xc5\x3f\xb1\xaa\x9c\xd4\xe4\x3c\x64\x20\x41\x4f\x6b\xad\x21\x56\xab\x4d\xe2\xd8\x37\x4a\xfe\xfd\x3b\x78\xc9\x12\x88\xb7\xf2\x48\xae\x87\x11\x29\x8f\x1f\xa9\xb0\xc1\x7d\x49\x90\xdf\x63\xe9\x29\x03\xaf\xa8\xf4\x35\x28\xee\x6d\xf9\xca\x9a\x43\x6d\xe9\x31\x15\xde\x07\x2e\xd4\x0a\x1f\xd9\x67\x3b\x1b\xab\xbf\x91\xc0\x3a\xdd\x41\x22\x0f\x96\xf5\xd3\x25\x65\x75\xd5\x63\xc7\x77\x51\xd7\xa2\xf5\x8e\x6a\xf9\x41\x9b\x04\x4d\xea\xcf\xd2\xc8\xc2\x11\xf4\x97\x06\x4e\x98\xf3\x7b\xac\x49\x5f\xe5\xa4\x12\x8f\xe5\x4c\x34\xd4\x1e\x68\x7b\x84\x90\x19\x9a\xfc\xf1\x43\x3f\x1d\x2d\xcd\xa4\x17\x09\xf4\x33\x88\x0b\x87\xd1\xac\x12\xa0\x75\x14\xcb\x38\xe9\x39\x1c\x3d\x51\x11\xb4\xaf\xa8\x0d\x63\x42\x28\xba\x07\xd2\x45\x35\x06\x15\x4f\xac\x59\x3d\x37\x49\xdd\x6e\x61\x29\x7b\xab\x61\xcc\x55\xa2\x35\xdf\xcc\x19\x46\xef\xe6\x9c\x1e\x66\xe7\x4f\x9b\xdd\x6f\xff\x4a\xcd\x15\xc2\xea\xb0\x98\x6a\xaf\x37\x03\x55\x2c\xbe\x7f\x13\xb5\xfc\x70\x93\x0a\xd6\x18\x46\x5c\xe6\x2f\x9f\x97\x53\xd3\x46\x66\x25\x91\x67\x99\x6a\xe8\x7f\x33\xb5\xbb\x49\x2b\x5f\xf8\x09\x2b\xeb\x81\x89\x33\x77\xfe\xd2\xcf\x3a\xb2\x70\x73\x90\xe0\xa7\x9c\xb5\x6c\xe8\x89\x4c\xec\xe7\xe4\x25\x9a\xf4\x39\xeb\x55\x75\x84\x31\xcc\xed\x47\x97\x46\xb3\xed\x98\x13\x88\x6a\x62\x7d\xab\xd0\xe5\xfb\xfd\x76\x99\x9b\x11\xef\x3f\xc9\x8c\x7b\xb6\x31\xe6\xe2\x52\x47\x8b\x39\x14\x7c\xf7\x2b\x00\x00\xff\xff\xa9\x52\x06\x45\xb3\x0a\x00\x00")

func compiledExecutorAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExecutorAbi,
		"compiled/Executor.abi",
	)
}

func compiledExecutorAbi() (*asset, error) {
	bytes, err := compiledExecutorAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Executor.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExecutorBin = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x09\x76\xb3\xba\x0e\xde\x92\x06\x6b\xf0\x72\x30\xd8\xfb\x5f\xc2\x3b\x1e\x48\x48\x49\x42\x48\x6f\xd3\xde\xf3\x6e\x7b\xfe\x34\xc7\x80\x2d\x6b\xfc\x24\x8b\x5f\xc1\x41\x21\x80\x10\x07\x07\x14\x45\x00\x04\x31\x05\x00\x87\xb2\x48\x12\x50\xa4\x40\xd1\xa1\x5e\x23\xa8\x57\x38\xd6\xcf\xc2\x00\xd7\xe7\x15\x20\xb0\x62\xbb\x6b\x2a\x7d\x06\x16\x9b\x01\xe1\xcd\x9f\x08\x10\x94\xcb\xf8\x41\x75\x50\x86\x09\x43\xe0\x88\x18\xea\x3a\x29\x88\xd5\x51\x24\xcf\x31\x65\x6d\xa3\x88\x79\x8c\xfa\x82\x9c\x8b\xf5\xd1\x50\xfa\x28\x53\x5e\x24\x21\xf5\xd1\x48\x63\x34\x17\x98\x21\xe6\x36\x4a\x79\x8c\xc6\x25\x38\x7a\xf0\x36\xca\xcc\x7d\x74\xc2\x92\x54\xbd\xf4\xd1\xc5\xc7\xa8\xf0\x84\xd3\xd2\x47\x03\xa6\x31\xea\x9c\x38\x2d\x7d\x86\x10\xe6\x3e\x9a\x4d\xb0\x90\xf5\x5d\x04\x1f\x94\x95\x09\xd4\x22\xa5\x3e\x3a\x83\x98\xa4\xab\x1c\xae\xf2\x99\x77\xf2\x01\x28\x52\xf9\xef\xc0\x0a\xec\x75\x5f\xe0\xe0\x95\xff\x17\xfe\x1d\xfd\xa0\x46\x50\x20\xa8\xcf\x46\x8a\x18\x41\xda\xaf\x22\x08\x26\xd1\x4a\x4b\x00\x41\x07\xe7\xba\x3a\x46\xd4\xf5\xaf\x63\x95\x7f\x7d\xd6\x09\xa5\xff\x5e\xc7\x22\x8d\x99\xc6\xf3\x11\x81\x23\x14\xde\xec\x09\x69\xda\xed\x09\xb9\xaa\x93\x84\xf9\x66\x6d\x52\xa8\xb4\xf6\xcf\xcd\x1a\x78\xb4\x82\xa4\xfd\x0a\x75\xc7\x3f\xc7\x35\x29\x95\x72\x80\x2d\x15\x31\xef\xa9\x98\xf1\x3e\x15\x2b\x77\x1f\xae\x60\x66\x37\xbc\x71\xb5\x3d\x7d\xf7\xc6\x36\xf2\xb2\x33\x7b\x3d\x73\xef\x66\x0d\xbd\x2f\x33\x97\x07\xe3\x61\xaf\x43\xce\x1f\xa0\x13\x56\x1d\x76\x04\x76\x12\x72\x76\x74\x14\xbc\xd5\x33\x07\xc1\xab\x4c\xaa\x3d\x74\x8b\x90\x54\xef\xc7\x2e\x69\x9a\xb0\x5a\xb5\x13\xb4\xe7\x3d\xc0\x98\xa3\x4b\xb8\xc9\x8f\x5c\xab\xfc\x64\x48\x34\xb6\x7f\x3e\xf4\x12\x9b\xc7\xeb\x73\xcd\x79\xcc\xc5\x75\x6d\x6d\xfc\x68\xeb\x57\x0b\xa9\xfe\x75\x02\xbe\xb5\xc3\x66\x0f\x49\x20\xfa\x3a\xfb\xf5\xf7\x89\x95\x50\xde\xeb\x27\xf3\x03\xfd\xfc\x8e\x95\xbc\xa4\xdf\x3e\xcf\x3b\x0b\x62\x2e\x7b\x0a\xd3\xf4\x33\x14\x6e\xa4\x4c\x55\x3f\x6e\x46\x5a\xe4\xc3\x02\xd8\xa4\x5a\xb9\x19\x60\x70\xbf\x73\xb8\xcb\xb2\x47\x47\x87\xc8\x63\x5e\xdc\x6a\xb5\x73\x95\xab\x07\xb6\xba\x42\xf7\x62\x17\x7d\xc0\xf6\x04\x6d\x38\x32\xbb\x7d\xf5\x86\x8f\x3c\xf1\xa1\x47\xe4\x1c\x76\x9c\x0c\x18\x7f\xce\x23\x22\x2d\xb2\x93\x67\x20\xdb\x53\x11\x1e\xc8\xf3\x48\x63\x50\x02\xef\x57\x10\xdf\xaf\xe0\xcb\x0f\xee\x33\x1a\xee\xa9\x88\xfb\xf8\x13\x52\x7e\x73\x9f\x89\xe2\x7e\x85\x79\xde\xad\x20\xf0\x03\xb6\xbb\x52\x41\x40\x7e\xab\x8d\x77\x62\xff\x03\x2d\xac\x74\xd6\x3b\xaa\x65\x34\xdf\x49\xf5\x9e\xfa\xad\x23\xcc\xfa\x5c\x5d\xa9\x5f\x05\x94\x10\xfb\xf7\x66\x51\x15\x1b\xd6\x91\xd5\xfb\x35\xa4\x08\x9d\x56\x01\xa7\x4e\xd5\xf3\x3b\xbd\xc9\xa8\xf2\x48\xad\xee\x25\x8c\xbd\x54\xfe\x39\xfd\x7c\xb4\xa9\x9e\x40\x2e\xfe\x62\xec\xfb\x60\x77\x95\xb7\x15\x62\x4b\x43\x80\x95\xa7\x56\xc0\x67\xb6\x38\xbd\x0b\xb2\x07\x15\x10\xaa\x7f\xdb\x47\x40\x05\x0a\xdb\x08\x69\x45\xc9\x44\xa3\xce\x16\x34\x6a\xe6\x89\xc0\x44\xb3\x26\xcd\x5a\xcc\x34\x13\x68\x31\x22\x30\x52\x31\xd5\xa2\x49\x45\x03\x81\xa2\x81\x81\xd1\x75\x36\x2b\x5a\x4c\x55\x8c\xbe\x43\x7b\xd7\xae\x07\x9a\xb6\xac\x12\x6d\x9f\x1f\xc0\x10\xcf\xa4\xba\xca\xd3\x51\x82\x63\x95\x28\x50\xb7\x72\xe7\x2a\x59\x20\xb4\x08\x22\x02\xab\xee\xd6\x58\xf1\x50\x7f\x87\x35\x6a\x5b\x15\xb8\x7d\x7f\xb2\x42\x7f\xea\xba\x46\x47\x90\xa0\x8e\x0c\x67\xf6\x5a\x6d\x25\x2f\x11\xda\x7a\x9b\xec\xac\x5a\x8f\x9f\x9a\xc9\x8a\x19\x20\xca\xbc\x64\x93\xac\x50\xd0\x12\xa9\x2c\x96\x61\x96\xcc\x71\x16\x9b\x52\xa1\xc0\x69\x66\xd4\xd9\xb2\xcc\x54\x7c\x71\x41\x33\x5c\x26\x9d\xe6\x8b\xe7\x01\x2b\xb7\xfa\xf6\xbe\x2e\x75\x29\x7e\xd5\xa4\xa9\xe6\x30\xdd\x3f\xf0\x19\xbf\xf5\xc0\x9a\xef\x60\xf2\xb8\x7d\xc6\xf7\xcf\x9c\xf3\xd8\xd7\xb9\x70\x7e\xec\x2b\x37\x77\x2d\x2f\xdd\x95\x0f\xee\x7a\xe8\xbf\xde\xa0\xbe\x21\x2e\x09\x0d\xed\x36\xcc\x5b\xfd\xdf\x98\x93\x80\x1b\xe6\xa1\xd8\xa2\xdb\x29\x1c\xb6\x47\x61\xf4\xea\x3a\x6d\xdc\xe7\x5e\x1d\xa8\x08\xbd\xa1\xd4\x58\x11\x4c\xbb\xbf\xe6\x02\x12\xea\xfa\xce\x42\x11\xd7\x18\x38\x9e\xaa\x16\xd2\x50\x5e\xbc\xe8\x0e\x0d\xdd\x89\x35\x7b\x68\x56\x2b\x14\x07\x27\xd7\xb8\x5b\x67\xc5\x36\xc7\x24\x62\x5e\x69\xe1\x91\x1f\x74\xcc\x98\x36\x98\xb1\xea\x9e\x8d\xc8\xe6\x4b\xf8\x12\xd9\x4e\xc5\x35\x1c\x79\x98\x22\x44\xe5\xcf\x45\x1c\x8c\x47\x11\xa7\xfe\x35\x55\xd4\x59\xe3\x36\xb6\xdc\x8f\x27\x37\x96\xfd\x24\x4a\x34\xae\x53\xd3\x81\x2e\xb4\xcd\xfe\xf3\xdf\xde\x7f\xd4\xa0\xa2\xb9\xde\x61\xc1\xe2\x77\xf6\x3f\x10\xd0\x29\x8b\xfd\x07\x63\x65\xc3\x7a\xb7\x12\x50\x84\x69\xfa\x24\xff\xfd\x90\xff\x5f\xf4\x8d\x40\xc5\x5c\xa3\xb1\x05\xe3\x7b\xeb\x1d\xf3\xbf\x94\x23\xc4\x3a\x30\x20\x0c\x9e\x24\x5a\x3e\xc8\x93\x74\x88\x02\x83\x16\x2d\x04\xba\x28\x6a\xb6\xb8\xe7\xd2\x96\x33\xaf\xf1\x24\x8c\x5a\xcb\xd6\x7f\x5f\x73\xde\x1b\xed\xc1\x35\xef\x10\xf8\x6d\x0d\x5e\x6b\x3e\x5d\x9b\xbb\xaf\xef\x28\x4c\xa4\xc5\xa8\xeb\xf5\xd3\xc8\x30\x8e\x0a\xce\x39\x7c\x38\x62\xce\x59\x74\x38\xa3\x38\x9d\x46\x87\x84\xfc\x00\x1d\xe2\xef\xa1\x43\x45\x0d\xcd\x47\xbe\x81\x0c\x77\xfa\x7a\x1f\x1d\xc2\x35\x7f\x6c\x9f\xa7\xf4\x6f\x13\x6b\x16\x8c\x1f\xb4\x6b\x3b\x1b\x6b\x2c\x28\x1a\xa9\xa9\xd8\x1d\x5e\x9e\x89\x35\x2f\xf8\x3a\x5c\x79\xf2\x51\xff\x2f\x87\x3c\xc9\xcd\xd3\x3d\xf1\x6f\xef\xf0\xc4\x81\x7f\x39\x43\x7d\xec\x4b\x14\x21\x07\x15\x6b\xbe\xa7\x79\xe0\x5f\xa3\xf5\x21\x95\x92\x86\xb6\xe4\xfc\xc9\xfa\xc8\xf2\x06\x5a\xe8\x15\x12\xd5\xd2\xef\x52\x23\x50\xd6\x52\x11\xdc\xb6\x3e\x62\xa4\xa8\x6c\x61\x54\x53\xb0\xce\x5c\xbf\xbd\xea\xc5\x5e\xa9\x8f\x04\x62\xee\xa3\xd7\x6c\xe3\xd5\x73\x24\xf3\x37\x4e\x77\x47\x05\x08\xbc\xf2\xf1\xa7\x74\x48\x9f\x9d\x3b\x0f\x0a\x30\x7c\x3d\x9b\xec\xe7\x33\xce\xc0\xc0\x6b\x26\x16\x46\x8e\xdf\x2b\x9c\xf7\xce\x7e\xaa\xf5\x52\x8d\xd4\x2b\x32\x2b\x93\xd5\x0c\x51\x70\x68\x08\xac\xb5\xfd\x9b\xf3\x9f\xf6\x0c\x70\xa5\xa0\x3e\x73\xad\x5a\xee\xcf\x76\xbc\xe6\x04\x24\x58\x6d\xc3\x43\xfb\x0b\x4e\x68\x2e\x42\x37\x27\x06\x20\x0f\x24\xdd\x32\x4c\x18\x9e\x97\x7b\x35\xec\xc9\xd9\xc1\x03\x64\xfe\x7a\x35\xe3\xde\xd8\x8a\xe6\x5b\x22\xfb\x39\x6f\x5e\x0e\xed\x33\x98\x18\xb4\xf8\xc6\x8a\x16\x7a\xbd\x72\x58\x6c\xb5\x55\xae\xd1\xaf\x67\x59\xaf\x7a\xf3\x0c\xf7\x6a\x0f\x81\x9e\x9f\xc6\x9e\xf3\xa9\x1b\x19\x61\x0d\x91\x87\x31\x15\x89\x39\x76\x2d\xfb\xf2\x7c\xd3\x8b\xfd\xd8\x97\x33\xd8\x53\xa7\x06\xdb\xf3\xdc\x0b\x2e\x7f\x53\xf3\x6e\x11\xf5\x1d\xc4\xbc\xe3\xea\x06\xd9\xde\xe1\xf8\xb6\xd2\x4a\xfb\xd9\xfd\x76\xf6\xd7\x77\x7d\x5d\xf5\x0c\xa7\xb6\xd4\x84\x1d\x35\x38\x9f\xc1\xed\x0a\xba\x9f\x61\x39\x37\x83\xef\x67\xc8\x67\x6a\xd7\xd3\x61\x86\xf3\x49\x8e\xce\x5b\x6a\xa8\x7b\xed\xad\x0f\x57\x44\xd2\x34\x72\x25\x24\x16\xef\x67\xf2\x3d\xd3\xf2\x4b\xf6\x66\xc5\x96\x98\xe6\x22\xb3\xce\xcb\xb4\x64\x8e\x3e\x69\x98\x80\x41\x78\x8a\x4e\x2e\x38\xcf\x79\x22\x58\x66\x27\x5b\xd2\x8c\x0c\x26\x21\xc5\x6c\x3e\xdb\xcc\x38\xdd\x54\xab\xb7\xde\xe5\x8d\xac\xe4\x28\x1f\x71\xe8\xbe\xa9\xee\xeb\x92\x9b\x20\xd2\xb2\x7c\xa9\x08\x9e\xca\xc9\xae\x59\x0a\xd6\xb8\xf5\x39\x8c\x85\xa7\x2b\x62\x03\x4d\x5d\x11\x54\xcf\x00\x1b\x8e\xe2\x1b\x8c\xf5\x00\xb5\x9f\x95\xc4\xc1\x19\x14\x9d\xaf\xbf\x7e\x02\x33\x5f\xe4\x19\xec\x83\x31\x99\x0e\x2b\x9c\xf7\xb1\xf1\x8d\x34\xe7\x86\x84\x51\x83\xc5\xad\x3c\x1b\xde\x0e\x35\x4b\x55\x56\x3f\x6f\x5b\x2f\xca\x13\x2f\x32\xfd\xb5\x3c\xe8\x75\x9f\x7c\xf6\x5c\xae\x84\x39\x49\x08\x9c\xb2\xaa\x16\x37\x4a\xb3\x4f\x26\x14\x39\xc7\x98\x89\x20\x4c\xd5\x8c\xb2\xe4\xc4\x0b\x2d\xc1\x65\x71\xd5\x42\x19\x79\xb6\x3c\x85\xdb\xca\xcb\x77\xa4\x71\xe2\x5c\xee\x37\x91\xed\xa8\x53\xa0\x14\xfb\x53\x35\xd9\x3d\x86\xcd\xd5\xae\x08\xaa\x5c\xdb\xb9\x7d\x78\xc0\xe9\x7f\x65\x9d\x62\x48\x41\xd3\x27\xf3\x8b\xe9\x7c\xfe\xff\x2c\x9b\x7f\x49\x0a\x04\x91\x27\xff\x45\x8d\x0f\x04\x97\x7c\x17\xcd\x3e\x88\x05\x8e\x4f\xc7\xee\x68\xbd\x98\x1b\xdc\xaf\x9d\xbc\xa8\xf5\x9d\xcf\xcf\xfa\xed\xee\xf1\x99\xfb\xf7\xbf\x57\x2b\xbb\xc4\x7d\xff\x64\x2f\xd1\xb1\xad\xdc\x91\xdd\x8d\xf5\xbc\x61\x2b\x9d\x1f\xef\xd9\xc9\xaf\xcb\xef\x54\xcf\xd0\x7b\x3a\x3a\x72\xc4\x9f\x3c\x4b\xfa\xa9\x2c\xea\x99\x6e\xbc\xaa\xaf\x2f\x60\x0b\xc4\x68\xf1\x26\x6f\xfa\xc3\x68\x5e\xb1\xf2\xe8\x83\x58\xfe\xf0\xb4\xe4\x10\xcb\xaf\x98\xa4\x21\xc5\x9b\xfe\xc0\xb7\x51\xe3\xad\x7c\x8f\xfa\x03\xff\xc3\xf2\x2f\x62\xf9\xa0\xf2\x7f\x83\xe5\xd3\xf2\xb7\xfa\x2b\x7e\x02\xcb\x7f\x27\x62\x3c\xec\x05\xbc\x60\x8b\xd9\xf2\x1f\xc7\x16\x62\x55\x8f\xd9\xc4\x76\xbd\x01\xff\x42\x1c\xbe\xb0\xfe\x87\xc3\x9f\x68\xec\xc3\x4e\xd8\xf5\xf3\x3b\x52\x7c\xdc\x41\xbb\xed\xdb\x6a\x72\xca\xf0\xc9\xfc\xf4\xd8\xb3\xd4\x4c\xb4\x58\x1d\x5f\x7a\x37\xbf\xf5\x73\xb0\x68\xac\xaa\xf1\x56\x56\x3f\x8e\xb9\xdf\x38\x71\x78\x53\x2b\xfe\x91\x6e\xe5\x53\xa7\xd2\xef\xf2\x84\xd6\x5e\xe6\x71\x06\xfd\x72\xb7\x32\x16\x8c\xdb\x6e\x65\xcc\xed\x0d\xbf\x83\x6e\xe5\xf6\xd4\x37\xbb\x95\x31\x97\xf9\x71\xb7\xf2\xaa\x39\x00\xd7\xb7\x8a\x81\xfb\x89\x93\xab\x4c\x65\xe8\xd6\xb0\x98\x32\x7f\xb0\x27\xea\x85\x37\x5e\x9e\x47\x92\x58\x11\xee\xe5\x0d\x18\xb9\xed\xe8\xd8\x47\x9a\xb3\xb4\x1f\x21\xda\x1f\xcb\xb6\x9e\x44\xcb\x33\xb4\x1f\xa2\xbf\xc6\xad\x67\x6f\x58\x3c\x7b\xa3\xeb\x5c\xbf\xe2\xb9\xcc\x7e\xed\x60\x20\xc8\xe9\x2f\x21\x9b\x1b\xc9\x94\x7f\xa2\xc2\x58\x39\x69\x45\xba\x9e\xd7\x39\x83\x45\x03\x95\x73\x3b\x33\x3b\xdb\x1f\x74\xd6\xfb\x2a\x13\x45\xf2\x45\x53\x7f\x0b\xbb\xed\x83\xb7\x9d\xa7\xdf\xf9\x1f\x28\x2e\xbd\x4a\x5d\x36\x9f\x78\x07\xfd\x13\x35\x85\x4b\xcf\xd3\x5d\xef\x6b\x0e\x9c\x50\x7a\xfc\x20\x2c\x5f\xde\xcf\xad\xbe\xf9\x72\x95\x20\x89\xf1\x32\x4e\x05\x72\xff\x36\xee\xbb\xfe\xfe\x6b\x74\xc9\xe7\x89\x53\x08\xfe\x9f\x2e\xbd\xba\xc6\x29\x5d\x62\x5c\x9e\xe8\x12\x33\xbe\xa6\x4b\x9b\xfa\x00\x35\x1c\x34\xfc\x7f\x7f\x7b\x67\x78\x68\x16\x10\x2b\x59\x12\x84\xd8\xdf\xa5\x1f\x4f\xbf\x8a\x9f\xee\xa1\x9e\xeb\x7b\x66\x0d\x61\xb5\xff\x3f\xc6\x69\xc5\x56\xc4\x31\xf6\xbe\xbf\x46\x4f\x45\x75\xec\x75\x05\x73\x91\x46\xd3\x6c\x2b\x05\x30\x7a\x63\xea\x15\x27\x5c\xaf\x5a\xc4\xd6\xad\x52\xef\x41\xc4\x31\x5e\xdd\x3b\xb5\x6e\x42\xb9\xa2\xb4\x0d\xee\x42\xe2\xa9\x79\xec\xb5\x6f\xa5\x8e\x2c\x61\xed\x68\x59\xae\x1d\x2d\xad\x9a\x49\x5c\xa6\xc6\x8f\xd4\xba\x08\xc7\x2a\x45\x87\x6c\x56\x4c\x3c\xde\x43\x05\x6c\x73\xe4\xed\x1c\xf5\x13\x60\x42\x15\x25\x9b\x6c\x32\x62\x10\x27\xf0\x45\x0d\x19\x12\x60\x02\xcb\x29\x44\xe3\x9c\x98\xa6\x12\xac\xf0\x32\xcb\x02\x9a\x8b\x56\x6c\xef\x98\x62\x99\x30\x27\x2e\x54\x68\x31\x88\x65\xca\x5c\x59\xff\xbf\x00\x00\x00\xff\xff\xb6\xd5\x95\xfe\x92\x48\x00\x00")

func compiledExecutorBinBytes() ([]byte, error) {
	return bindataRead(
		_compiledExecutorBin,
		"compiled/Executor.bin",
	)
}

func compiledExecutorBin() (*asset, error) {
	bytes, err := compiledExecutorBinBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Executor.bin", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\xd3\x41\x4b\xc3\x30\x14\x07\xf0\xef\xf2\xce\x39\x4d\x1d\x92\xa3\xe8\xc1\x83\x20\x6e\xe0\x61\xf4\xf0\xd2\xbe\x4a\x68\x9a\x84\xe4\x65\x2e\x8c\x7d\x77\x69\x99\x5b\x0f\xe2\x2a\xa2\xed\xad\xd0\xfc\x79\x3f\xfe\xbc\xb7\xd9\x43\xe9\x6c\x64\xb4\x0c\x92\x43\x22\x01\xda\xfa\xc4\x11\xe4\xa6\x10\x60\xb1\x25\x90\xc0\x8e\xd1\xac\x92\xf7\x26\x83\x00\x97\xf8\xf8\x62\xff\xf9\x00\x04\x70\xf6\xdd\x57\xd2\x96\x17\x37\x4b\x38\x14\x02\x3c\x66\x54\x86\x40\xd6\x68\x22\x09\x88\x8c\x4c\x4f\x89\x51\x69\xa3\x39\x83\x84\xad\xa6\xf7\x73\xb6\x4e\xb6\x64\xed\x2c\x1c\xc4\x37\xac\xd3\xd0\x0a\x19\xcf\x61\x95\x99\x62\x3f\xf6\xf8\x5b\x19\x6c\x68\xa1\x3a\xcc\x05\x73\x1f\xbd\x5a\xfc\x87\xd9\xa6\xf6\xeb\xae\x4e\x68\x57\x36\x6b\xdd\xd2\x8c\x7a\x1e\x65\x5e\xe9\x37\x4b\xe1\x92\x1a\xab\x2a\x50\x8c\xb3\x51\xaf\xfb\xc5\x2e\x5d\x18\xd5\xf7\xf2\xfa\x0f\xe1\x83\x6b\xdb\x3d\xec\xbc\x0e\xd8\x67\x26\x5f\x83\xa1\xeb\xf1\x7e\xfa\x53\x1a\x7a\x9e\x83\xdb\x52\xf5\xea\x42\x33\x7d\x4f\x3f\x5b\xbc\xb9\x35\x79\xd7\xa1\x5e\xa8\x1e\xa5\xba\xfd\x25\xaa\xf8\x08\x00\x00\xff\xff\x20\x8c\x4d\x0b\x76\x06\x00\x00")

func compiledExtensionAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionAbi,
		"compiled/Extension.abi",
	)
}

func compiledExtensionAbi() (*asset, error) {
	bytes, err := compiledExtensionAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Extension.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionBin = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x0b\x56\xeb\x3a\x0c\xdc\xd2\x48\xb2\x64\x79\x39\xfe\xee\x7f\x09\xef\x38\x4e\x29\x6d\x78\xe5\x26\x97\x0b\x87\x72\xa0\x74\x6c\xeb\x33\x9a\x48\xae\xc1\x61\x08\x50\x96\xe0\x20\x35\x02\x08\x1a\x0d\x80\x63\x34\x2d\x0a\x23\x14\x6a\x3e\xdf\xc1\x98\x2b\x92\xe6\xdf\x21\xc0\xfd\xbc\x01\x41\x8c\xb6\x5d\x39\x2c\x0b\xa2\xb1\x82\x70\xf1\x95\x80\x60\x32\xf6\x17\x99\xc3\x84\x9c\x0c\xad\x35\x0a\x9b\x9f\xa4\x71\xa2\x12\x39\xa8\x53\x58\x68\x0b\x3b\x5a\x1c\xbd\x67\xde\x50\xd2\x7d\x6f\xc0\x48\x23\x8f\xbe\xd0\x94\x77\x94\x46\x42\x64\xda\x50\x46\x5c\xa8\x41\xdb\xd0\x54\x17\xaa\x75\xa1\x29\x57\x95\x56\xca\x42\x7d\xdf\x5b\xcb\xb0\xd6\xea\xb2\xcb\x65\xb7\xdb\x94\x63\x97\xb0\x22\xe3\xae\x0b\xed\x0e\x55\x97\xe5\x4d\xb8\x6b\xd4\x72\x67\xfc\x5e\x89\xa2\x87\x4a\xa0\xf4\x79\xc6\x87\xda\x3c\x13\xa0\xe4\x70\x76\x9a\x15\x60\x80\x12\x29\x14\xb7\x95\x44\x90\x84\x21\xef\xad\xf6\x63\x7d\x49\xa6\xff\xe0\x10\x83\xf8\xe4\x05\x0e\x87\x68\xc2\x6e\x15\xce\xa0\x27\x64\xab\x3d\x0d\xd0\x44\x36\x5f\x01\x7b\x14\xcb\x7f\xc2\xb4\xb5\xf4\xe1\x48\x92\x38\x6d\xd8\x3d\x5a\x17\x97\x2d\xfe\x20\x71\x7a\x58\xd1\xdf\x7e\x12\x6d\x27\x38\xed\x9f\x8d\x10\x44\x1f\x33\x9f\x99\x50\x22\xbb\xbd\x9f\x60\x82\xec\xc8\x2f\x79\xf8\x8c\x89\x95\xc5\x5b\x44\x1a\xda\xe5\x5a\x50\xb6\x63\x04\x55\x4f\x46\x60\x64\x8f\x11\xc4\xb7\xa7\xe6\xb3\x17\xd9\x99\xbd\x27\x32\x63\x92\x43\x66\x2c\x7c\x36\xb3\xf6\x5c\xed\x78\x8c\xea\x23\xec\x4c\xa4\xe6\xc7\x48\x23\x19\x21\xa6\x70\xb9\xb2\x9c\x3e\xc8\x3f\x55\x23\x78\xc0\x97\x29\x98\xeb\x51\x3f\x5c\xc7\xf4\xd2\xed\x7a\xec\x83\x0e\x56\x85\x70\xb2\x76\xc9\xeb\x97\xe5\x29\x92\x8f\x11\x6d\xe3\x26\x87\xf2\xa4\xfd\x83\x1a\x3e\xd5\x75\x22\xbb\x76\xea\xf3\x0c\xb6\x29\x88\x33\xcf\x98\x89\x26\x2e\xe2\xa9\xee\xd6\xe8\xfd\x0c\xfc\x9b\x79\x8a\x5d\x03\x08\xab\x63\xbf\x71\x26\xb3\xa2\x1b\xbb\xd1\x21\x85\xf4\xc6\xfa\x78\xea\x8f\x9a\x07\xbd\xad\x06\x24\x8d\xd2\xd6\xba\xf4\xf5\xdf\xbe\x0f\x77\x36\x26\xce\x70\xa2\xfd\x14\x8d\xf7\x36\xef\x4a\x9a\xd3\xe2\x23\x25\xa5\xf5\x6b\xd7\xb8\xcc\xb1\x23\x67\x76\x97\x3d\x5b\xfe\x17\x6c\xae\x49\xb8\xcd\x33\xf6\x39\x9d\x59\xd9\x65\x9b\x73\xf4\xa8\x91\xc7\x3c\x27\xf7\x33\x32\x40\xcb\xdc\x7f\xe3\xa8\x8c\x79\x4f\x98\xf3\x70\x9e\xf7\x80\xdd\xc6\x62\x6b\xcd\xc1\xbc\xf5\x26\x7d\x60\x69\xad\xcf\x99\x3c\x6f\x4b\xcb\x56\xaf\xbb\x2d\x99\xbe\x6d\x9b\xb9\x9b\xff\xf9\xf4\xcc\xec\x33\xe4\x03\x2d\x17\x45\xe2\x5b\x1d\xff\x40\x2b\x8a\xf2\x42\x2b\x3a\xab\x7e\x5a\x2b\x2a\x7a\x41\x2b\xeb\xd3\x45\xbd\xb0\xe4\x9e\xbc\xa6\x7f\xae\x97\x07\xbb\x0f\xb7\xdc\x43\x4f\xf9\x13\xf6\x6b\x7e\xc5\x7e\xeb\x57\xd8\x1f\xe1\x1c\xfb\x1f\xcd\xe1\x2f\xa8\x48\x41\xb3\x30\xf8\x97\x55\xc4\x9e\xe7\xff\x43\x45\x2c\xc7\x0b\x15\xb1\xd2\xbe\xfb\x79\xf0\xee\x15\x43\xfa\x2f\x63\x3f\x2a\xbf\x60\x3f\x9a\x5d\x60\x3f\xc6\xfa\xdd\xec\xd7\x54\x5c\x19\xfa\xe3\x37\x81\x38\x5e\xf5\x17\xc7\x95\xfe\xe2\x7c\xb6\xbf\xbc\xcb\xfe\xef\x6e\x05\x2d\x2b\x69\x0f\x3f\x7f\xc3\xf2\xe7\xef\x7f\x8f\xbc\x96\x7c\x85\xd7\x86\xef\xbc\x61\x89\x0f\x89\xe4\xe5\xc7\xb9\x4c\xa1\xbe\xe0\x32\x19\x2e\x70\x99\xa2\x7d\x27\x97\x1c\x43\x0e\xb1\xc6\x5f\xd6\x6d\xf3\xfc\x26\xf0\xbf\xcc\x67\x6a\x17\x98\xcf\x22\xdf\xdd\x6d\x69\x24\x16\x13\xfa\x71\x25\xe7\x42\xaf\xf8\xac\x7a\x85\xcf\x56\xae\x29\x19\xc8\x64\x6a\x1c\x73\xcc\x91\x05\xea\x8c\xa8\x16\x5d\x06\xf5\xee\xb1\xd1\xc8\x69\x70\x41\x6a\xb1\x85\xe8\xa9\xaa\x8f\xe0\xb5\xb5\xc8\x54\x20\xde\x9a\xf7\x48\xd6\x03\xf5\x5e\x47\xe8\x50\x05\x38\xfd\x17\x00\x00\xff\xff\x09\xd7\x85\xfe\x7a\x16\x00\x00")

func compiledExtensionBinBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionBin,
		"compiled/Extension.bin",
	)
}

func compiledExtensionBin() (*asset, error) {
	bytes, err := compiledExtensionBinBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Extension.bin", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionnativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\x41\x4b\xc3\x40\x10\x85\xff\xcb\x9c\xf7\x14\xb5\x48\x8e\xa2\x07\x0f\x82\x58\xc1\x43\x09\x32\x49\x26\xb2\x64\x33\xbb\xec\xce\xc6\x86\xd2\xff\x2e\x09\xd5\xa2\x04\x1b\x04\xd3\xdc\x72\x98\x37\xf3\xe5\xf1\xde\x6e\x76\x50\x58\x0e\x82\x2c\x90\x8a\x8f\xa4\x40\xb3\x8b\x12\x20\xdd\x64\x0a\x18\x1b\x82\x14\x18\x45\xb7\xf4\x2a\xdb\x1b\x63\x8b\xfa\x89\x2a\x50\x60\xa3\x1c\xe6\x76\x9f\x63\xa0\x40\x3a\xd7\x7f\xe5\x9d\x50\xb8\x86\x7d\xa6\xc0\x61\x87\xb9\x21\x48\x2b\x34\x81\x14\x04\x41\xa1\x87\x28\x98\x6b\xa3\xa5\x83\x14\x5a\x4d\xef\x47\x69\x15\xb9\x10\x6d\x19\xf6\xea\x17\xb6\xaf\x9b\x1c\x9b\xa3\x36\x6a\x96\x8b\x64\x38\xfb\x9d\x3c\xef\xb9\x9f\x75\x43\xa7\xc0\xfb\x0d\xab\xcb\x85\x81\xdf\xdf\x4e\xf2\xfb\xb0\x60\x39\xdc\x6b\xfd\xc6\xe4\x4f\xb1\x63\x59\x7a\x0a\xe1\x1f\xd9\x47\x82\xfc\xe8\x6d\x4b\xe5\x8b\xf5\xf5\x94\x44\x24\x57\xab\x59\xf1\xac\xa0\x59\x47\xe7\x4c\x77\x7e\xba\x3f\x35\x6d\xf8\x81\xc2\xfa\x05\xf5\xad\x44\xc1\x1f\x85\x19\xc5\xc7\x9a\x92\xbc\xb7\xf4\xec\x95\x1b\x89\xed\xdd\xd6\x69\x8f\x83\x74\x82\xb1\x73\xd3\xcd\xf5\x4e\x65\x1f\x01\x00\x00\xff\xff\x46\xf2\x90\x9d\xb6\x06\x00\x00")

func compiledExtensionnativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionnativeAbi,
		"compiled/ExtensionNative.abi",
	)
}

func compiledExtensionnativeAbi() (*asset, error) {
	bytes, err := compiledExtensionnativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ExtensionNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionnativeBin = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledExtensionnativeBinBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionnativeBin,
		"compiled/ExtensionNative.bin",
	)
}

func compiledExtensionnativeBin() (*asset, error) {
	bytes, err := compiledExtensionnativeBinBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ExtensionNative.bin", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledImeternativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x56\xcd\x6a\xc3\x30\x0c\x7e\x17\x9d\x7d\x1a\x6c\x87\x1c\x77\xdf\x69\xc7\x52\x82\x12\xab\xc1\xcc\x91\x83\x2d\x75\x84\xd2\x77\x1f\x8c\x86\xec\xa7\x5b\x53\x48\xe3\x92\x63\x40\x12\xfa\x7e\xf4\x39\x9b\x03\xd4\x81\x93\x20\x0b\x14\x12\x95\x0c\x38\xee\x54\x12\x14\x9b\x03\x30\xb6\x04\x05\xa0\xb5\x11\x0c\x48\xdf\x0d\x5f\x94\x12\x1c\xb7\x66\x28\x60\x14\xb7\xa7\xb2\x95\x58\x36\x24\x60\x20\xa8\xfc\x1c\x32\x0e\x50\xc7\xf2\xf0\xf8\xf4\x39\xa0\xc3\x1e\x2b\x4f\x50\xec\xd0\x27\x32\x90\x04\x85\x5e\x54\xb0\x72\xde\x49\x0f\x05\xec\x1d\xbd\x8f\xbd\x3b\xe5\x5a\x5c\x60\x38\x9a\x59\x37\xc7\x24\x14\x2f\x2d\xfe\xb5\xff\x36\x8b\x9f\xa5\x54\x82\xa0\x7f\xd5\xae\xf3\x7d\x06\x6a\x4f\xdd\x93\xb9\x35\x63\x41\x1b\x94\xe5\xfc\x72\xbf\x51\xfa\x50\xbf\x91\x2d\xd1\xda\x6f\x20\x27\x01\xe1\xc0\x43\xd1\x9d\xc0\x69\xca\xa4\xd5\x25\xb5\xaa\x10\xfc\x44\xa9\xae\x40\x38\xc7\x15\x9f\xc4\xc8\x73\xcc\x4b\x39\xee\xd6\x56\x9b\x41\x88\x26\xaf\x12\x13\xd2\xa9\xc9\x1c\x4f\xb3\x90\xbc\x6a\x9f\x37\x2b\x8b\xd6\x01\x4e\xb6\x80\x5d\x5a\xb7\x7b\x79\x49\xfe\xfe\x39\x79\xd6\xc8\x64\xd7\x7c\x42\x0b\xbf\x15\xff\x24\xed\xda\xb9\x5e\xd4\xee\xdb\x8f\x00\x00\x00\xff\xff\xc6\xe9\x57\x95\x00\x0d\x00\x00")

func compiledImeternativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledImeternativeAbi,
		"compiled/IMeterNative.abi",
	)
}

func compiledImeternativeAbi() (*asset, error) {
	bytes, err := compiledImeternativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/IMeterNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledImeternativeBin = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledImeternativeBinBytes() ([]byte, error) {
	return bindataRead(
		_compiledImeternativeBin,
		"compiled/IMeterNative.bin",
	)
}

func compiledImeternativeBin() (*asset, error) {
	bytes, err := compiledImeternativeBinBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/IMeterNative.bin", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMeasureAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcd\x31\x0a\xc2\x40\x10\x85\xe1\xbb\xbc\x7a\x4e\xb0\x77\xf0\x04\x21\xc5\x24\x4c\x60\x20\xce\x2e\xbb\x6f\x94\x45\xbc\xbb\x58\xd9\x58\x88\xf5\x0f\xff\xb7\x3c\xb0\xd7\x18\xd4\x20\x0a\x7b\x9a\xc0\xa3\x25\x07\xca\xb2\x0a\x42\xaf\x86\x02\x8f\xb0\x0e\x41\x4d\x7e\x5a\xd3\xa9\xdb\x69\x28\x87\x9e\xc3\x04\x83\x4a\xbb\x24\x75\xf3\xd3\x39\x51\xd0\xb2\x1b\x04\x9c\xed\x3d\x39\x32\x76\x7a\x0d\x3c\xe5\x27\xb4\x26\xff\x41\x6f\x6e\xf7\x6f\xe8\xfa\x0a\x00\x00\xff\xff\x0a\x34\xa0\xdd\xeb\x00\x00\x00")

func compiledMeasureAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledMeasureAbi,
		"compiled/Measure.abi",
	)
}

func compiledMeasureAbi() (*asset, error) {
	bytes, err := compiledMeasureAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Measure.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMeasureBin = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x52\x6b\x6e\x34\x21\x0c\xbb\x92\xf3\x0e\xc7\x21\x30\xdc\xff\x08\x9f\x58\x66\xbf\x69\xf7\x4f\xa5\x36\x91\x78\x24\x0e\xb2\x2d\x1c\x09\x87\xc2\x58\x34\x41\xe6\x04\x10\x2c\x1c\x40\x62\x4d\x2b\x83\x13\x88\x37\x8e\x00\xc6\xee\x48\xdb\xeb\x12\xe0\x99\x77\x40\xc5\x69\xdf\xda\x99\x17\x8b\x01\xc2\x2f\xa3\x01\xea\xb2\xee\x20\x4f\xb8\x68\x9f\x15\xc1\x8d\xd4\xa1\x97\xc5\xae\x65\x0c\x99\x55\xbe\x6b\xce\x16\x56\x0f\xf7\x5b\x13\xac\x7d\x28\x7a\x65\xb8\xb9\x15\xf0\xe0\x7c\x7e\xe2\x42\x1d\x91\x6f\xdc\xde\x05\xf1\x9f\xd5\x4f\x41\xfe\x70\x7e\xb9\x44\x49\x5f\x35\xfd\xc5\x1f\x70\xd2\x71\x1d\xb4\x39\xdf\xef\x23\x05\x92\xaf\x4a\x46\x42\x8a\xec\x68\x9b\xf5\x5d\x9b\xf5\x45\xef\xde\x75\x59\xc8\x3c\x5d\xb9\xce\xe9\x46\x9d\x74\xa0\x93\x9b\x73\xf4\xe8\xc1\x02\x4b\x86\x05\x8f\x81\x39\x17\xf3\x6c\xa3\x63\x19\x8f\xb6\x58\x7d\xff\xa2\x3e\x54\x25\xc8\x5a\xd5\xa2\x1a\x31\x4d\xed\x42\x21\xac\xec\x9a\x9c\x90\x04\xb8\xfd\x0b\x00\x00\xff\xff\x4d\xf1\x8e\xba\x80\x02\x00\x00")

func compiledMeasureBinBytes() ([]byte, error) {
	return bindataRead(
		_compiledMeasureBin,
		"compiled/Measure.bin",
	)
}

func compiledMeasureBin() (*asset, error) {
	bytes, err := compiledMeasureBinBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Measure.bin", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMeterAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xcb\xaa\x14\x31\x10\xfd\x97\x5a\x67\x25\x28\xd2\x3b\x5d\xb8\x13\x17\xba\xbb\x0c\x52\xdd\x5d\x2d\x81\xa4\x2a\x24\x95\x19\x9b\xcb\xfd\x77\x99\xb9\xfd\x42\xfb\xe5\x38\x32\xb3\xea\x86\x7a\x9e\x53\x75\x92\x3c\x3d\x43\x25\x9c\x14\x59\xa1\xd0\x98\xc9\x80\xe5\x90\x35\x41\xf1\x74\x30\xc0\xe8\x09\x8a\xd7\x8f\x01\xc9\xda\x99\x9e\x7b\x0b\x18\xd0\x36\x9c\xff\x92\x46\xcb\x3f\xe0\xe5\x60\x20\x60\x8b\xa5\x23\x28\x1a\x74\x89\x0c\x24\x45\xa5\xcf\x59\xb1\xb4\xce\x6a\x0b\x05\x84\x1c\x69\x0c\x6d\x32\x57\x6a\x85\xe1\xc5\x4c\xdb\xe9\xa2\x87\x7e\x86\xa2\xdf\x53\x20\xae\x29\x8e\x19\xb0\xae\x23\xa5\x74\x49\xd0\x3b\x1d\xd1\xe5\x49\x91\x6c\x59\xdf\xbc\x7d\x77\x69\xb0\x73\xc1\x10\xa2\x1c\x17\x90\xa5\x5c\x55\xe7\x94\x43\x82\x52\xc4\xed\x84\xc7\xc2\xbd\xd3\x16\xc8\x45\xce\x55\x14\xdd\xd7\x1c\x82\x6b\xb7\xa8\x9f\x42\xdb\x6e\xee\x68\xe9\xf4\x0f\xdc\x37\x51\xfc\x3a\xf1\x2a\xeb\x76\xf4\x92\x59\x57\x27\xa3\x11\x39\x35\x14\x3f\xbd\x16\x7b\xc0\xf1\xd4\x54\x59\x8f\x2e\xed\x99\xcd\xfb\x5b\xaa\xe2\xb7\x8e\x46\x5a\xe5\xc4\xb3\x92\x18\x7b\x2e\xd1\x21\x57\xf4\xa5\x99\x6f\xba\x33\xff\xd7\xbd\x5a\xe4\x33\xb5\xbe\x14\xf7\x48\x87\xcc\x0d\xd7\xf8\xae\x2b\x7c\x67\x29\xfb\xc7\x3e\x61\x3f\xe6\xc8\x54\xdf\xe1\x84\xfd\x6b\x1d\x9b\x3d\xf7\xdf\xe4\x72\x73\x4e\x4e\x9d\x9e\x67\xb0\x45\xf2\x68\xf9\x2c\xa6\xdb\x83\x44\x16\x6e\xbd\xe4\x34\xb7\x7c\x96\x6b\xfa\x49\x75\x4f\xc0\xf6\x2e\x2e\x04\x2c\xad\xe6\xe0\xde\x95\xde\xff\x1c\xf8\x36\xaa\xb5\x73\xa2\x23\xb1\x5e\x0d\x69\x65\x90\x0b\x11\xab\xef\x9a\xeb\x81\x7d\xb8\xbc\x73\xd0\xfd\x01\xec\xf0\x2b\x00\x00\xff\xff\x66\xc7\x72\x63\xff\x09\x00\x00")

func compiledMeterAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledMeterAbi,
		"compiled/Meter.abi",
	)
}

func compiledMeterAbi() (*asset, error) {
	bytes, err := compiledMeterAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Meter.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMeterBin = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x09\x72\xe3\x30\x0e\xfc\x12\x0e\xe2\x7a\x0e\xcf\xff\x3f\x61\x8b\xa2\x7c\xc5\x19\xc7\xb2\x93\xcc\xee\x8e\x54\x71\x6c\x88\x04\xc1\x66\xa3\x09\x4a\xc1\x41\x21\x81\x10\x27\x07\x14\x45\x00\x04\x31\x05\x00\x87\xd1\xa4\x08\x28\xc2\x48\xb3\x1d\x02\x10\xcc\x27\x1c\xf3\x73\x30\xc0\xa5\xbf\x02\x24\x56\xdc\x5a\xe5\xb1\x3c\xb0\x58\x05\x84\x17\xaf\x00\x48\xca\x63\xbf\x50\x1d\x94\x41\x47\x6b\x1d\x18\xd3\x1c\xa7\x24\xb1\xcd\x1a\xd2\xb3\x95\x65\xc5\xb4\x5b\xd1\x51\xa1\xb5\xb6\xac\x39\x96\x95\xb8\xb8\xd1\xc9\xda\xf6\xb6\x8c\x5c\xbb\xa8\x6d\x56\x92\xbd\xad\x41\x06\x27\xc6\x65\xf5\xbc\xac\x21\xcd\xa3\xa4\xdd\xda\x71\x59\x73\x80\x44\x2d\x65\xb3\xb2\xed\xd6\x52\x58\xcc\x79\xb7\x36\x5d\xd6\xe6\x81\x2c\x75\xc5\x90\xa4\xec\xd6\xa6\xd4\x1b\xf7\x65\x75\x15\x93\x72\x59\x87\xcb\xfa\xd4\xfb\xf5\x81\x1a\xb3\xcf\x68\xa2\xb3\x4f\x02\x41\xdf\x56\x86\x00\xd0\xc9\x11\xd8\x49\xc8\xd9\xd1\x51\xe6\x1f\xad\x67\x81\x02\x0e\x82\xb1\xb7\x0d\x70\x70\x76\x9e\xfe\xa5\xcc\xf6\xb8\x46\x45\xd8\x30\x71\x82\xad\xbf\x27\xd8\x7d\x38\xce\x5e\x2b\x8a\xde\xe7\xf8\x02\xeb\x8e\xed\x6f\x3d\x57\xc0\x6d\x05\x97\x2f\xd6\xdd\x17\xcf\xb1\x75\xc6\xc8\xdb\xf8\xbc\x8d\x04\x90\x81\x31\x50\x6f\xe3\x9c\x9e\x83\x96\xef\xd3\x1c\x03\x81\x03\x06\x5f\xe1\x33\x5b\x7e\xc4\x07\x7d\x4c\x7e\x3a\xb0\x02\xaf\x88\x26\x3e\x2c\x76\xe6\xd7\x57\x17\xea\x05\xa3\xa0\xd8\x3c\xb0\x7c\xb4\xed\xd1\x21\x08\xe7\x9b\xb5\x20\x94\x75\x7f\x98\xd3\xc3\x99\x14\xb9\x9f\x49\xe9\x33\xc9\xa8\xdc\x7a\x3f\xe2\xb5\xdf\xe3\x43\xfc\x43\xf8\xfc\x18\xbe\xda\xf0\x6d\x7c\x49\xef\xf1\x25\x9d\xf8\xba\xca\xad\x77\x85\x19\xe1\xfa\x3c\x32\x42\xe8\xfd\x08\xb5\x7c\x3f\xd6\x67\x5c\x5c\xfb\xcb\xcc\xa0\xde\xee\xa3\x1d\xaa\x08\x91\x7e\x4e\x59\xf8\xac\x06\x7f\x56\x16\xc6\xf2\x94\xb2\xb0\xf2\x0f\x2a\x0b\xdb\x3d\x3e\x5c\xea\x2f\x2b\x4b\xf8\xfb\xca\xc2\x9d\xee\x66\x92\x12\xfe\x8f\x69\x40\xe4\xf7\x35\x20\xa9\xdd\x23\x61\xf3\xb3\xa8\xbd\x9c\x49\x29\x3e\xc1\xb7\xdb\x7f\x1f\xbe\x67\x2c\x2b\xb4\xa3\xb3\x55\xd0\xcd\xba\xb2\x7c\xce\x68\x55\x82\x53\x1d\x20\x2e\xfd\x6d\x08\x4b\x12\x20\x90\xa4\x43\x8b\x8a\xf6\x63\x95\xe0\xf4\x75\xca\xfa\x15\xe5\xb4\x2d\x7c\x99\x8f\xcc\xff\x48\xdb\x2b\x04\xe0\xf2\x7d\x8e\xba\xaa\x60\x3f\x84\xfc\x77\x8d\xec\x73\xd5\x44\xc0\xe9\x88\xc7\x83\x28\x0d\xaf\x52\x3a\x76\xe9\xa5\x57\x6b\x52\x1a\xa6\x61\x98\xc8\x1a\x76\x4f\x83\x5b\x9b\x35\x78\x85\x61\x85\x28\xb0\x4b\x21\x80\x5c\xbd\x5a\xe5\x12\x24\x9e\x9e\x65\x52\x9e\x3b\xc2\xc6\xc4\xc9\xc8\x8d\x8f\xfb\x0a\x33\x1c\x89\x59\x19\x4c\x3b\x2b\xb6\xdd\x3f\x5e\x9f\x1d\xde\x39\x87\xc0\x3e\x03\x48\x73\x0d\xe8\x1c\xbf\xf3\xcc\xe3\x8d\x09\xe6\xc0\x05\x65\xcf\x7e\x0d\xbc\xcd\x7e\xc9\x03\x2f\x4f\xb3\x88\x71\xdb\xd9\xdb\xd7\xb7\xbd\xdd\xd5\x0e\x34\xed\x73\xb5\xf7\x5d\x52\x4b\xb9\xf6\x79\xd1\x8f\xeb\x1d\xf6\x3a\xa7\x3f\xcf\x16\x3f\xc4\xc3\xef\xcc\x96\xbf\x93\xa7\x92\x26\x7e\xf3\x56\x04\xab\x5b\x35\x36\xd1\xb5\x01\x5e\xd9\x22\xbf\x4c\x8a\x0b\x27\x3e\xab\x87\x66\x55\x72\x89\xc5\xc1\x86\x92\x89\x86\x56\x4b\x1a\xda\x39\x13\xcc\xff\xc6\x26\x3a\xaf\x50\xd6\x98\xca\x68\x89\x40\x51\xab\x56\x1d\x66\x8a\xda\x95\x55\x4e\x1a\xf8\x40\x91\x37\x56\xfc\x9b\xab\xbc\xcd\x9a\x9c\x24\x01\xaf\x3a\xee\xa4\x92\xb3\x22\x96\xec\x69\xde\x73\x97\x0b\xde\x33\x62\x29\x0e\x9f\xaa\xbe\x53\x9e\x28\x20\xdd\x66\xce\x61\x15\x12\xc4\x16\xb0\x55\xba\xdb\xfa\xd0\x4f\xe8\x90\x1f\xd4\xff\x17\x91\xde\x79\xf6\x84\xe6\x05\x94\x07\x9a\x17\x38\x5e\xd0\xbc\x60\x79\x41\xf3\xd6\x2f\xfd\xa2\x3e\x49\xf7\xf5\x89\xa4\x77\xb4\xe0\xa3\xe2\xce\xf8\xc3\x98\xff\xc0\xbc\x8f\x7b\xdd\xa1\xbc\xf1\x74\xa4\x35\xa6\xed\xdd\x5d\x6e\x4d\x4c\x0e\x8e\x74\x9c\xfd\x11\x02\x3d\x5c\xff\x29\xf6\x67\xcf\x0f\xd8\x9f\xa3\xbf\xc0\xfe\x5c\xd2\x31\xf6\x1f\xe3\x84\x94\x7d\x57\x2c\x82\xbf\xb7\x2b\x12\x7c\xb5\x2b\x1a\xab\x68\x55\x25\xd0\x61\x44\xa0\x4d\xd1\xd8\x92\xca\xfc\x65\xa4\x62\x38\xfb\xcc\x6f\x9a\x9e\xd9\x15\xb7\x39\xd6\xe7\xf7\x80\xa3\x9c\xaf\xb5\x5a\x1b\xf1\xf7\xeb\xce\x52\xdb\x03\x16\x96\x8e\x2f\xb0\xb0\x0c\x7b\xab\xee\x5c\x7b\xf3\x21\xbd\xfa\xd6\xaa\xe0\x2f\x55\x9d\x9f\x69\xbc\x23\xe2\x86\x69\xcf\x59\xec\x28\xcb\x06\x26\x4d\x32\xc4\xd3\xb9\xb2\xe0\x1f\xd2\xd6\x5f\xc0\xec\xe6\x54\x78\x7e\xf3\xf6\x04\xc7\x1b\x8f\x07\x1c\x6f\xc2\x2f\x70\xbc\x69\x1c\xe3\xf8\xae\x9c\xad\xf7\x5f\x3c\x4f\xb4\x37\xce\x13\xb4\x9d\x28\xce\x67\x09\x80\xe7\xce\x13\x47\x39\x6a\x09\x0a\x8a\x0c\xe7\xff\x5f\x8e\xc2\xd7\x1c\xed\x0f\xcf\xff\xfd\xab\xf3\xff\x64\xe0\xa1\x88\x0f\xbe\xdb\x69\x6d\x90\x50\x6e\x58\x3a\x55\x8f\xa2\x51\xa9\x80\xfa\xa8\x6c\xde\x72\x0e\xa1\x92\x6d\x16\x7f\x35\x65\x44\x25\x1f\x22\x39\xb5\x21\xc4\x85\xfb\x38\xaf\xed\x13\xef\x76\x4e\x3b\x2b\x40\x46\x15\x25\xcb\x96\x8d\x18\xc4\x09\xd0\x70\x8c\x48\x12\xac\x92\x2c\xd5\x56\x93\x8b\x91\x76\xca\x15\x8c\x43\xb6\x87\x92\x4b\xb2\xde\x53\x05\x0d\x37\xb0\x32\x0a\x86\x38\xf7\x0c\x40\xf1\x9f\x00\x00\x00\xff\xff\xbb\x77\xa3\xcf\xc0\x1e\x00\x00")

func compiledMeterBinBytes() ([]byte, error) {
	return bindataRead(
		_compiledMeterBin,
		"compiled/Meter.bin",
	)
}

func compiledMeterBin() (*asset, error) {
	bytes, err := compiledMeterBinBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Meter.bin", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMetererc20Abi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x4d\x8b\xdb\x30\x10\xfd\x2f\x73\xd6\xa9\xd0\x52\x7c\x6b\x0f\xbd\x95\x1e\xda\xdb\x12\xca\xd8\x1e\x17\x81\x34\x23\xa4\x51\x52\xb3\xec\x7f\x2f\x71\x1c\xdb\x6c\x6d\xc7\x4d\xb3\x24\x27\x1b\xe6\xf3\xbd\x99\x27\xe9\xe9\x19\x2a\xe1\xa4\xc8\x0a\x85\xc6\x4c\x06\x2c\x87\xac\x09\x8a\xa7\x9d\x01\x46\x4f\x50\x9c\x3e\x06\x24\x6b\x6f\x7a\x3e\x5b\xc0\x80\xb6\xe1\xf8\x97\x34\x5a\xfe\x05\x2f\x3b\x03\x01\x5b\x2c\x1d\x41\xd1\xa0\x4b\x64\x20\x29\x2a\x7d\xcd\x8a\xa5\x75\x56\x5b\x28\x20\xe4\x48\x63\x68\x93\xb9\x52\x2b\x0c\x2f\x66\xda\x4e\x1f\x3d\xf4\x33\x14\xfd\x99\x02\x71\x4d\x71\xcc\x80\x75\x1d\x29\xa5\x2e\xc1\xd9\x69\x8f\x2e\x4f\x8a\x64\xcb\xfa\xee\xfd\x87\xae\xc1\xde\x05\x43\x88\xb2\x5f\x40\x96\x72\x55\x1d\x53\x0e\x09\x4a\x11\xb7\x11\x1e\x0b\x9f\x9d\x2e\x81\x5c\xe4\x5c\x45\xd1\x7d\xcf\x21\xb8\xf6\x12\xf5\x53\x68\x97\x9b\xdb\x5b\x3a\xfc\x07\xf7\x4d\x14\xbf\x4e\xbc\xca\xba\x1d\xbd\x64\xd6\xd5\xc9\x68\x44\x4e\x0d\xc5\x2f\xa7\x62\x0f\x38\x9e\x9a\x2a\xeb\xd1\xa5\x2d\xb3\xf9\x78\x4b\x55\xbc\xea\x68\xa4\x55\x0e\x3c\x2b\x89\xb1\xe7\x12\x1d\x72\x45\xdf\x9a\xf9\xa6\x7b\xf3\x9b\xee\xd5\x22\x9f\xa9\xf5\xa5\xb8\x47\x3a\x64\x6e\xb8\xc6\x77\x5d\xe1\x3b\x4b\xd9\x3f\xf6\x09\xfb\x39\x47\xa6\xfa\x0e\x27\xec\x3f\xeb\xd8\x6c\xb9\xff\x26\x97\x9b\x73\x72\xe8\xf5\x3c\x83\x2d\x92\x47\xcb\x47\x31\xdd\x1e\xe4\x94\xeb\x21\xd1\x09\xef\x8c\x4a\x5f\x8f\xb1\xa3\x28\xe6\x4a\x25\x76\xd9\x90\x85\x5b\x2f\x39\xcd\xad\xb2\xe5\x9a\x7e\x53\x7d\x4e\x7f\x79\xb3\x17\x02\x96\x16\x7d\x70\xef\x4b\x6f\x7f\x5c\xfc\x18\xb5\xdf\x3b\xd1\x9e\x58\xaf\x86\xb4\xb2\x16\x0b\x11\xab\xaf\xa4\xeb\x81\x7d\xea\x5e\x4d\xe8\xfe\x02\xb6\xfb\x13\x00\x00\xff\xff\x55\xc9\x1e\xe6\x4d\x0a\x00\x00")

func compiledMetererc20AbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledMetererc20Abi,
		"compiled/MeterERC20.abi",
	)
}

func compiledMetererc20Abi() (*asset, error) {
	bytes, err := compiledMetererc20AbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/MeterERC20.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMetererc20Bin = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x09\x76\x22\x31\x0e\xbd\x92\x16\x6b\x3b\x8e\xd7\xfb\x1f\x61\x9e\xcb\xc5\x92\x90\x26\x14\x34\xc9\xcc\x34\xf5\x20\x44\xb8\x6c\xf9\xfb\xeb\x4b\x2a\x05\x07\x85\x04\x42\x9a\x53\x53\xb1\xa4\x62\x94\xba\xa2\x25\x0d\x53\x15\x05\x40\x05\x00\x45\x40\x00\xc8\x8e\x92\x1c\x8d\xc7\x83\x2f\x20\x0c\xd4\x00\xe7\xc7\xef\x41\x05\x42\x0b\x10\x11\x50\x44\x80\xea\x73\x7d\x90\x31\x3d\xe1\x98\x9f\x83\x01\xae\xbc\x07\x48\xac\xb8\x8d\xca\x43\x6c\x1b\x27\x56\x37\x9f\x9f\x7a\x05\x40\x52\xbe\x78\xe4\xa0\x0c\x3a\x5a\xeb\xc0\x98\xe6\x3a\x25\x89\x6d\xd6\x90\x9e\xad\x2c\x2b\xa6\xdd\x8a\x8e\x0a\xad\xb5\x65\xcd\xb1\xac\xc4\xc5\x8d\x4e\xd6\xb6\x8f\x65\xe4\xda\x45\x6d\xb3\x92\xec\x63\x0d\x32\x38\x31\x2e\xab\xe7\x65\x0d\x69\x1e\x25\xed\xd6\x8e\xcb\x9a\x03\x24\x6a\x29\x9b\x95\x6d\xb7\x96\xc2\x62\xce\xbb\x75\x1e\xef\xb4\x36\x0f\x64\xa9\xcb\x87\x24\x65\xb7\x36\xa5\xde\xb8\x2f\xab\xab\x98\x94\x89\xa2\xc3\x68\x52\x38\x39\xa0\xcc\x5d\x57\x58\xe8\x2e\xbb\x6c\x88\xd7\x98\xf7\x8c\x26\x3a\xef\x49\x20\xe8\xdb\xc9\x10\x00\x3a\x39\x02\x3b\x09\x39\x3b\x3a\xca\x7c\xd3\xfa\x2d\x50\xc0\x41\x30\xf6\xb1\x01\x0e\xce\xce\x73\x7e\x29\x73\x3c\xae\x55\x11\x36\x4c\x9c\x60\xbb\xdf\x13\xec\x73\x38\xce\xbb\x96\x17\xbd\xcf\xf5\x05\xd6\x15\xdb\x7b\xfd\xae\x80\xdb\x09\xae\xb9\x58\xf7\xb9\x78\xae\x3d\xf9\x3d\x57\x24\x00\x3e\x71\x1c\x78\x72\xf6\xa3\x9f\x73\xe6\xa0\x35\xf7\x69\x8f\x81\xc0\x01\x83\xaf\xf0\x99\x23\x3f\xe3\x83\x3e\x79\x9b\x1c\x58\x81\x97\x47\x13\x1f\x96\x23\x11\x71\xc1\x28\x28\xb6\x19\x58\x3e\xdb\x76\xef\x10\x84\xf3\x87\xb3\x20\x94\x75\x7d\xda\xd3\xdd\x9d\x14\xb9\xdd\x49\xe9\x33\xc8\xa8\x7c\x9c\xfd\xc8\xac\xfd\x16\x1f\xe2\x37\xe1\xf3\x36\x7c\x75\xf0\xcb\xf8\x92\xde\xe2\x4b\x3a\xf1\x75\xb7\x8f\xb3\x2b\x4c\x0f\xd7\xe7\x91\x15\x42\x6f\x57\xa8\xe5\xef\x63\x7d\xc6\xc5\x03\x9e\x66\x06\xf5\x76\xeb\xed\x50\x45\x88\xc0\xb7\x29\x0b\x9f\xd5\xe0\xcf\xca\xc2\x58\x1e\x52\x16\x56\x7e\xa3\xb2\xb0\xdd\xe2\xc3\xa5\xfe\xb0\xb2\x44\xed\x2f\x33\x9f\x3b\xdd\xec\x24\x25\xfc\x1f\xd3\x80\xe8\xf2\x32\x12\x49\xed\x16\x09\x9b\x9f\xa5\xb6\xa7\x23\x29\xc5\x17\xf8\x76\xfb\xef\xc3\xf7\x8c\x65\x0d\x39\xba\x5b\x05\xdd\xac\x2b\xca\xe7\x8e\x56\x25\x38\xd5\x01\xe2\x72\xbf\x0d\x61\x49\x02\x04\x92\x74\x68\x51\xd1\x7e\xac\x12\x9c\x73\x9d\xa2\x7e\x79\x39\x6d\x0b\x5f\x3e\x54\xd5\x1e\x19\x7b\x85\x00\x5c\xbe\xcf\x55\x09\xb6\xb5\x0f\x21\xff\xb7\x56\x76\x5c\x55\xb9\xd3\x91\x19\x0f\xa2\x34\xbc\x4a\xe9\xd8\xa5\x97\x5e\xad\x49\x69\x98\x86\x61\x22\x6b\xd8\x3d\x0d\x6e\x6d\xd6\xe0\x15\x86\x15\xa2\xc0\x2e\x85\x00\x72\xf5\x6a\x95\x4b\x90\x78\x7a\x94\x49\x79\x66\x84\x8d\x89\x93\x91\x1b\x1f\xf7\x13\x3e\xf5\x3d\x01\x92\xe2\xdc\xfd\xcc\xae\xe0\x5d\xb8\x2b\x83\x69\x67\xc5\xb6\xfb\x88\xd7\xfd\xc7\x2b\xbd\x0c\xec\x28\x40\x9a\x7b\xa2\x33\x06\xce\x53\x0b\x36\x36\x99\x03\x17\x94\x5d\x41\x74\x36\x0e\xd7\x0a\x22\x79\xe0\xe5\xd7\x6a\x62\xdc\xf6\x08\xe8\xeb\xdb\x3e\xee\x2a\x8b\x4d\xfb\x64\xcc\x9e\x69\xb5\x7d\xc8\x5f\x17\x0d\xba\xce\xd2\xd7\xba\xf0\x75\xc4\xf9\x21\x4c\xff\x66\xc4\xfd\x4e\xac\x4b\x9a\xf8\xcd\x4b\x11\xac\xfb\xc4\x70\xa2\x6b\x03\xbc\xb2\x45\x7e\x9a\x14\x17\x4e\x7c\x55\x53\xcd\xca\xe6\xe2\x8b\x83\x0d\x25\x13\x0d\xad\x96\x34\xb4\x73\x26\x98\x7f\x8d\x4d\x74\xbe\x42\x59\x63\xaa\xab\x25\x02\x45\xad\x5a\x75\x98\x29\x6a\x57\x56\x39\xe9\xe8\x1d\x55\xdf\x58\xf1\x6f\x9e\xf2\xb6\x6b\x72\x92\x04\xbc\x6a\xc1\x93\xd2\xce\xaa\xda\xaa\xa7\x79\x29\x42\xc3\xbd\xf7\xda\x55\x8b\x4f\x95\xe3\x45\xb7\x90\x3e\x46\xce\xaf\x28\x99\x20\xb6\x80\xad\xe2\xde\xce\x98\xde\xa1\x65\x7e\x30\x0f\x3d\x79\x5a\x3b\x57\x1f\xd0\xcd\x48\xe3\x8e\x6e\xc6\xec\x0f\x0e\xeb\x66\x58\x3c\xa1\x9b\xeb\x3f\xfd\xa6\x4e\x4a\xb7\x75\x92\xa4\x57\xf4\xe4\xb3\x6a\x4f\xff\x5b\x61\xfe\x03\x7b\x3f\xe5\xdc\x63\xb1\xe7\x87\xf8\x8b\x69\x7b\x86\x58\x12\x8b\xc9\xc1\x95\x7e\x27\x82\x22\x04\x7a\xb8\xfe\x53\x11\x94\x07\xdc\x89\xa0\x02\xe9\x89\x08\x2a\x98\x8f\x45\xd0\x31\x5e\x49\xd9\xb3\x73\x29\xf6\x73\xd9\x99\xe0\xbb\xec\x6c\xac\xa2\x55\x95\x40\x87\x11\x81\x36\x45\xe3\xf5\x84\x9f\xc0\x48\xc5\x70\xde\x33\xbf\x69\x7a\x24\x3b\x6f\x7d\x29\x1d\xc9\x45\x3f\x1f\x37\xb5\x56\x6b\x23\x7e\xbf\x86\xae\x22\x77\x98\x5c\x35\x9e\x60\x72\xb5\xf1\x52\x0d\xbd\xea\x8c\xb7\xa1\xff\x6d\x85\xf3\x4b\x15\xf4\x57\xb9\xc6\x11\x71\xc3\x74\xd8\x7a\x4a\xfa\xe3\x4c\x1d\x98\x34\xc9\x10\x4f\xe7\x2a\x89\xdf\xa4\xf1\x3f\x80\xfb\x87\x4e\xfb\xfc\x34\xf3\x81\x38\x69\x3d\xee\xc4\x49\x1b\xed\x89\x38\xe9\xc8\xc7\xe2\x64\x57\xf0\x1e\x3f\xd9\x5f\xb5\x17\xfa\x2b\xda\x3a\xac\x73\x6f\x05\xf0\x58\x7f\xf5\x1b\x3c\xb7\x04\x05\x45\x86\xf3\xff\x2f\xcf\xe1\x7b\x9e\x0f\x69\x77\x78\x3e\x0c\xef\xf3\x7c\xb2\xf8\x90\xc7\x07\x9f\xb9\xb5\x36\x48\x28\x37\x2c\x9d\xaa\x47\xd1\xa8\x54\x40\x7d\x54\x36\x6f\x39\x87\x50\xc9\x36\x50\xb9\xa6\x8c\xa8\xe4\x43\x24\xa7\x36\x84\xb8\x70\x1f\xe7\xb3\x7d\xe0\x99\xdb\xa9\x4a\x00\xc8\xa8\xa2\x64\xd9\xb2\x11\x83\x38\x41\xa6\x22\x63\xd2\x9d\xbc\xba\x34\x0a\xa1\xc8\x28\x23\x75\x37\xeb\x94\xa3\x8d\x34\x4a\x86\xac\x91\x86\xda\xf0\xc4\x39\x2b\x46\x89\xec\x5e\x7b\x02\xa0\xf8\x4f\x00\x00\x00\xff\xff\xcf\xef\x89\x17\xd6\x20\x00\x00")

func compiledMetererc20BinBytes() ([]byte, error) {
	return bindataRead(
		_compiledMetererc20Bin,
		"compiled/MeterERC20.bin",
	)
}

func compiledMetererc20Bin() (*asset, error) {
	bytes, err := compiledMetererc20BinBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/MeterERC20.bin", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMetergovAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xcb\xaa\x14\x31\x10\xfd\x97\x5a\x67\x25\x28\xd2\x3b\x5d\xb8\x13\x17\xba\xbb\x0c\x52\xdd\x5d\x2d\x81\xa4\x2a\x24\x95\x19\x9b\xcb\xfd\x77\x99\xb9\xfd\x42\xfb\xe5\x38\x32\xb3\xea\x86\x7a\x9e\x53\x75\x92\x3c\x3d\x43\x25\x9c\x14\x59\xa1\xd0\x98\xc9\x80\xe5\x90\x35\x41\xf1\x74\x30\xc0\xe8\x09\x8a\xd7\x8f\x01\xc9\xda\x99\x9e\x7b\x0b\x18\xd0\x36\x9c\xff\x92\x46\xcb\x3f\xe0\xe5\x60\x20\x60\x8b\xa5\x23\x28\x1a\x74\x89\x0c\x24\x45\xa5\xcf\x59\xb1\xb4\xce\x6a\x0b\x05\x84\x1c\x69\x0c\x6d\x32\x57\x6a\x85\xe1\xc5\x4c\xdb\xe9\xa2\x87\x7e\x86\xa2\xdf\x53\x20\xae\x29\x8e\x19\xb0\xae\x23\xa5\x74\x49\xd0\x3b\x1d\xd1\xe5\x49\x91\x6c\x59\xdf\xbc\x7d\x77\x69\xb0\x73\xc1\x10\xa2\x1c\x17\x90\xa5\x5c\x55\xe7\x94\x43\x82\x52\xc4\xed\x84\xc7\xc2\xbd\xd3\x16\xc8\x45\xce\x55\x14\xdd\xd7\x1c\x82\x6b\xb7\xa8\x9f\x42\xdb\x6e\xee\x68\xe9\xf4\x0f\xdc\x37\x51\xfc\x3a\xf1\x2a\xeb\x76\xf4\x92\x59\x57\x27\xa3\x11\x39\x35\x14\x3f\xbd\x16\x7b\xc0\xf1\xd4\x54\x59\x8f\x2e\xed\x99\xcd\xfb\x5b\xaa\xe2\xb7\x8e\x46\x5a\xe5\xc4\xb3\x92\x18\x7b\x2e\xd1\x21\x57\xf4\xa5\x99\x6f\xba\x33\xff\xd7\xbd\x5a\xe4\x33\xb5\xbe\x14\xf7\x48\x87\xcc\x0d\xd7\xf8\xae\x2b\x7c\x67\x29\xfb\xc7\x3e\x61\x3f\xe6\xc8\x54\xdf\xe1\x84\xfd\x6b\x1d\x9b\x3d\xf7\xdf\xe4\x72\x73\x4e\x4e\x9d\x9e\x67\xb0\x45\xf2\x68\xf9\x2c\xa6\xdb\x83\x44\x16\x6e\xbd\xe4\x34\xb7\x7c\x96\x6b\xfa\x49\x75\x4f\xc0\xf6\x2e\x2e\x04\x2c\xad\xe6\xe0\xde\x95\xde\xff\x1c\xf8\x36\xaa\xb5\x73\xa2\x23\xb1\x5e\x0d\x69\x65\x90\x0b\x11\xab\xef\x9a\xeb\x81\x7d\xb8\xbc\x73\xd0\xfd\x01\xec\xf0\x2b\x00\x00\xff\xff\x66\xc7\x72\x63\xff\x09\x00\x00")

func compiledMetergovAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledMetergovAbi,
		"compiled/MeterGov.abi",
	)
}

func compiledMetergovAbi() (*asset, error) {
	bytes, err := compiledMetergovAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/MeterGov.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMetergovBin = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x09\x96\xeb\x28\x0c\xbc\x92\x16\xb4\x70\x1c\xd6\xfb\x1f\x61\x9e\x8c\xb3\x75\xfa\xa7\xe3\xf4\x36\x33\xdf\x7e\x49\xa7\x65\x10\xa2\x28\x15\xc2\x0a\x0e\x0a\x09\x84\x38\x39\xa0\x28\x02\x20\x88\x29\x00\x38\xcc\x2e\x55\x40\x11\x66\x8a\x76\x08\x40\x10\x4f\x38\xc7\xf7\x64\x80\x4b\x7f\x05\x48\xac\xb8\xb5\x2a\x73\x79\x60\xb1\x06\x08\x2f\x5e\x19\x20\x29\xcf\xfd\x42\x75\x50\x06\x9d\xbd\x0f\x60\x4c\x31\x4e\x4d\x62\x9b\x35\xcb\x28\x56\x97\x15\xd3\x6e\x45\x47\x85\xde\xfb\xb2\x96\xbc\xac\xc4\xd5\x8d\x4e\xd6\xbe\xb7\x65\xe4\x36\x44\x6d\xb3\x92\xec\x6d\x0d\x0a\x38\x31\x2e\xab\x97\x65\xcd\xd2\x3d\xd7\xb4\x5b\x07\x2e\x6b\xc9\x20\xb9\xd5\xba\x59\xd9\x76\x6b\xad\x2c\xe6\xbc\x5b\xbb\x2e\x6b\xf7\x8c\x2c\x6d\xc5\x90\xa4\xee\xd6\xae\x34\x3a\x8f\x65\x75\x15\x93\x7a\x59\x87\xcb\xfa\xb4\xfb\xf5\x81\x96\xa3\xcf\xec\xa2\xd1\x27\x81\xa0\x6f\x2b\x43\x00\xe8\xe4\x08\xec\x24\xe4\xec\xe8\x28\xf1\xa1\xf5\x2c\xa3\x80\x83\x60\xde\xdb\x66\x70\x70\x76\x0e\xff\x52\xa3\x3d\xae\x51\x11\x36\x4c\x9c\x60\xeb\xef\x09\x76\x1f\x8e\xd1\x6b\x45\x31\x46\x8c\x2f\xb0\xee\xbc\x7d\xd6\x73\x05\xdc\x56\x70\xf9\x62\xdd\x7d\x71\x8c\xad\x11\x23\x6f\xe3\xf3\x36\x12\x40\x01\xc6\x8c\x7a\x1b\x67\x78\xce\xb4\x7c\x9f\xe6\x98\x11\x38\xc3\xe4\x2b\x7c\xa2\xe5\x5b\x7c\xd0\x67\xf0\xd3\x81\x15\x78\x45\x14\xf8\xb0\xd8\x99\x5f\x1f\x5d\xa8\x17\x8c\x32\xe5\xcd\x03\xcb\x5b\xdb\x1e\x1d\x82\x70\xb9\x59\x0b\x42\x59\xf7\x9b\x39\x3d\x9c\x49\x95\xfb\x99\xd4\x11\x49\x46\xf5\xd6\xfb\x11\xaf\xe3\x1e\x1f\xe2\x6f\xc2\xe7\xdb\xf0\xd5\x8e\x9f\xc6\x97\xf4\x1e\x5f\xd2\xc0\xd7\x55\x6e\xbd\x2b\x44\x84\xeb\xfb\xc8\x08\x59\xef\x47\x68\xf5\xeb\xb1\x3e\xe3\xe2\x3a\x5e\x66\x06\x8d\x7e\x1f\xed\x54\x45\xc8\xe9\xfb\x94\x85\xcf\x6a\xf0\x67\x65\x61\xac\x4f\x29\x0b\x2b\x7f\xa3\xb2\xb0\xdd\xe3\xc3\xb5\xfd\xb0\xb2\x64\xff\xbc\xb2\xf0\xa0\xbb\x99\xa4\x84\xff\x31\x0d\xc8\xe5\xf3\x1a\x90\xd4\xee\x91\xb0\xf8\xae\x6a\x2f\x67\x52\xca\xef\xe0\x3b\xec\xdf\x87\xef\x19\xcb\x06\xfd\xe8\x6c\x15\x74\xb3\xae\x2c\x8f\x19\xad\x4a\x30\xd4\x01\xfa\xa5\xbf\x4d\x51\x15\x23\x63\x15\x82\x34\x54\x2c\x99\xe9\x34\xd2\xfa\x5c\x25\x18\xbe\x4e\x59\xbf\xa2\x0c\xdb\xc2\x97\xf9\xc8\xfc\x8f\xb4\xbd\x42\x00\x2e\xbf\x63\xd4\x55\x05\xfb\x21\xe4\xbf\x6a\x64\x8f\x55\x13\x01\xa7\x23\x1e\x0f\xa2\x34\xbd\x49\x1d\x38\x64\xd4\xd1\xac\x4b\xed\x98\xa6\x61\x22\xeb\x38\x3c\x4d\xee\x3d\x6a\xf0\x06\xd3\x2a\x51\xc6\x21\x95\x00\x4a\xf3\x66\x8d\x6b\x26\xf1\xf4\x2c\x93\x4a\xec\x08\x1b\x13\x83\x91\x1b\x1f\xf7\x15\x66\x38\x12\xb3\x72\x21\xd6\x01\x70\xf2\x8f\xd7\x67\x87\xcf\x9c\x43\x60\x9f\x01\xa4\x58\x03\x3a\xc7\xef\x1c\x79\xbc\x31\xc1\x1c\xb8\xa2\xec\xd9\xaf\x19\x6f\xb3\x5f\xca\xc4\xcb\xd3\x22\x62\xdc\x77\xf6\x8e\xf5\x6b\x6f\x77\xb5\x03\x85\x3d\x56\x7b\xdf\x25\xb5\xd6\x6b\x9f\x17\xfd\xb8\xde\x61\xaf\x73\xfa\xfd\x6c\xf1\x43\x3c\xfc\xca\x6c\xf9\x9d\x3c\x95\x14\xf8\xc5\xad\x08\xd6\xb6\x6a\x2c\xd0\xb5\x09\xde\xd8\x72\x79\x99\x14\x17\x4e\xbc\x57\x0f\x45\x55\x72\x89\xc5\xc1\xa6\x92\x89\x66\x6d\x96\x34\xeb\xe0\x42\x10\x7f\x8d\x4d\x34\xae\xac\xac\x59\x45\x87\x25\x02\x45\x6d\xda\x74\x9a\x29\xea\x50\x56\x39\x69\xe0\x03\x45\xde\x58\xf1\x77\xae\xf2\x36\x6b\x72\x92\x04\xbc\xea\xb8\x93\x4a\x46\x45\x2c\xc5\x53\xdc\xb1\xcb\x65\xde\x33\x62\x29\x0e\x9f\xaa\xbe\x53\x9e\x28\x20\xdd\x66\xce\x61\x15\x62\x28\x93\x0c\xa2\xee\xdc\xd6\x87\xbe\x43\x87\xfc\xa0\xfe\xbf\x88\xf4\xce\xb3\x27\x34\x2f\x43\x7d\xa0\x79\x19\xe7\x0b\x9a\x97\x59\x5e\xd0\xbc\xf5\x9f\x7e\x50\x9f\xc8\x6d\x7d\x92\x44\x48\x38\xc9\xeb\x5a\xf0\x56\x71\x23\xfe\x6c\xcc\x7f\x60\xde\xdb\xbd\xee\x50\xde\x78\x3a\xd2\x1a\xd3\xf6\xee\xae\xf4\x2e\x26\x07\x47\x3a\xca\x7e\x90\x9c\x05\x46\x76\xfd\xab\xd8\x5f\xbc\x3c\x60\x7f\xc9\xe3\x05\xf6\x97\x9a\x8e\xb1\xff\x18\x27\xa4\xee\xbb\x62\x15\xfc\xb9\x5d\x91\xe0\xa3\x5d\x31\x4e\x09\xda\x54\x09\xe2\x84\x40\xa0\x5d\xd1\xd8\x52\x9c\x20\x08\x8c\x54\x0c\xa3\x4f\xfc\xd2\xf4\xcc\xae\xb8\xcd\xb1\x3d\xbf\x07\x1c\xe5\xfc\x28\x25\xf3\xd4\xfa\xeb\x75\x67\x6d\xfd\x01\x0b\xeb\xc0\x17\x58\x58\xa7\x7d\xaa\xee\x5c\x7b\xf3\x21\xbd\xfa\xd2\xaa\xe0\x97\xaa\xce\xf7\x34\xde\x11\x71\xc3\x74\x94\x22\x76\x94\x65\x54\xeb\x48\x6a\xc3\xd3\xb9\xb2\xe0\x6f\xd2\xd6\x1f\xc0\xec\xe6\x54\x78\x7e\xf3\xf6\x04\xc7\x3b\xcf\x07\x1c\xef\xc2\x2f\x70\xbc\x6b\x3e\xc6\xf1\x5d\x39\xfb\x18\x3f\x78\x9e\xe8\x9f\x38\x4f\xd0\x76\xa2\x38\x9f\x25\x00\x9e\x3b\x4f\x1c\xe5\x68\x9f\x66\x45\x7b\x5a\xef\x79\xff\x9f\x1c\x85\x8f\x39\x3a\x1e\x9e\xff\xc7\x47\xe7\xff\x60\xe0\xa1\x88\x0f\xbe\xdb\xe9\x7d\x92\x50\xe9\x58\x07\x35\xcf\x55\x73\xa3\x0a\xea\xb3\xb1\x79\x2f\x25\x0b\xd5\x62\x51\xfc\xb5\x54\x10\x95\x7c\x8a\x94\xd4\xa7\x10\x57\x1e\xf3\xbc\xb6\x4f\xbc\xdb\x39\xed\xac\x00\x05\x55\x94\xac\x58\x31\x62\x10\x27\x90\x3c\x46\x17\x98\x8a\xa5\xe7\x8c\xc1\xd7\x2a\xcd\x44\xdb\xa4\x40\xa4\xb4\xc9\x5e\x9a\xa5\xda\x90\xa8\xd5\x02\xc5\x0a\xcf\x2c\x85\x04\xa6\x31\x00\xe5\x7f\x02\x00\x00\xff\xff\x77\x7c\x25\xc1\xc0\x1e\x00\x00")

func compiledMetergovBinBytes() ([]byte, error) {
	return bindataRead(
		_compiledMetergovBin,
		"compiled/MeterGov.bin",
	)
}

func compiledMetergovBin() (*asset, error) {
	bytes, err := compiledMetergovBinBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/MeterGov.bin", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMetergoverc20Abi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x4d\x8b\xdb\x30\x10\xfd\x2f\x73\xd6\xa9\xd0\x52\x7c\x6b\x0f\xbd\x95\x1e\xda\xdb\x12\xca\xd8\x1e\x17\x81\x34\x23\xa4\x51\x52\xb3\xec\x7f\x2f\x71\x1c\xdb\x6c\x6d\xc7\x4d\xb3\x24\x27\x1b\xe6\xf3\xbd\x99\x27\xe9\xe9\x19\x2a\xe1\xa4\xc8\x0a\x85\xc6\x4c\x06\x2c\x87\xac\x09\x8a\xa7\x9d\x01\x46\x4f\x50\x9c\x3e\x06\x24\x6b\x6f\x7a\x3e\x5b\xc0\x80\xb6\xe1\xf8\x97\x34\x5a\xfe\x05\x2f\x3b\x03\x01\x5b\x2c\x1d\x41\xd1\xa0\x4b\x64\x20\x29\x2a\x7d\xcd\x8a\xa5\x75\x56\x5b\x28\x20\xe4\x48\x63\x68\x93\xb9\x52\x2b\x0c\x2f\x66\xda\x4e\x1f\x3d\xf4\x33\x14\xfd\x99\x02\x71\x4d\x71\xcc\x80\x75\x1d\x29\xa5\x2e\xc1\xd9\x69\x8f\x2e\x4f\x8a\x64\xcb\xfa\xee\xfd\x87\xae\xc1\xde\x05\x43\x88\xb2\x5f\x40\x96\x72\x55\x1d\x53\x0e\x09\x4a\x11\xb7\x11\x1e\x0b\x9f\x9d\x2e\x81\x5c\xe4\x5c\x45\xd1\x7d\xcf\x21\xb8\xf6\x12\xf5\x53\x68\x97\x9b\xdb\x5b\x3a\xfc\x07\xf7\x4d\x14\xbf\x4e\xbc\xca\xba\x1d\xbd\x64\xd6\xd5\xc9\x68\x44\x4e\x0d\xc5\x2f\xa7\x62\x0f\x38\x9e\x9a\x2a\xeb\xd1\xa5\x2d\xb3\xf9\x78\x4b\x55\xbc\xea\x68\xa4\x55\x0e\x3c\x2b\x89\xb1\xe7\x12\x1d\x72\x45\xdf\x9a\xf9\xa6\x7b\xf3\x9b\xee\xd5\x22\x9f\xa9\xf5\xa5\xb8\x47\x3a\x64\x6e\xb8\xc6\x77\x5d\xe1\x3b\x4b\xd9\x3f\xf6\x09\xfb\x39\x47\xa6\xfa\x0e\x27\xec\x3f\xeb\xd8\x6c\xb9\xff\x26\x97\x9b\x73\x72\xe8\xf5\x3c\x83\x2d\x92\x47\xcb\x47\x31\xdd\x1e\xe4\x94\xeb\x21\xd1\x09\xef\x8c\x4a\x5f\x8f\xb1\xa3\x28\xe6\x4a\x25\x76\xd9\x90\x85\x5b\x2f\x39\xcd\xad\xb2\xe5\x9a\x7e\x53\x7d\x4e\x7f\x79\xb3\x17\x02\x96\x16\x7d\x70\xef\x4b\x6f\x7f\x5c\xfc\x18\xb5\xdf\x3b\xd1\x9e\x58\xaf\x86\xb4\xb2\x16\x0b\x11\xab\xaf\xa4\xeb\x81\x7d\xea\x5e\x4d\xe8\xfe\x02\xb6\xfb\x13\x00\x00\xff\xff\x55\xc9\x1e\xe6\x4d\x0a\x00\x00")

func compiledMetergoverc20AbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledMetergoverc20Abi,
		"compiled/MeterGovERC20.abi",
	)
}

func compiledMetergoverc20Abi() (*asset, error) {
	bytes, err := compiledMetergoverc20AbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/MeterGovERC20.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMetergoverc20Bin = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x59\x09\x76\x22\x31\x0e\xbd\x92\x16\x6b\xf1\x71\xbc\xde\xff\x08\xf3\x54\x2e\xb6\x90\x26\x14\x69\x92\x99\x69\xea\x41\xd3\xc2\x8b\xfc\xfd\xf5\x2d\x39\x0a\x0e\x0a\x09\x84\xb4\xa4\xae\x62\x49\xc5\x28\x0d\x45\x4b\x9a\x4d\x55\x14\x00\x15\x00\x14\x01\x01\xa0\x38\x4a\x72\x34\x9e\x4f\xbe\x80\x30\xa3\x66\x70\x7e\xbe\x0f\x2a\x10\x5a\x06\x11\x01\x45\x04\x68\x1e\xf3\x83\xcc\xf0\x84\x73\x7c\x4e\x06\xb8\xf2\x1e\x20\xb1\xe2\xd6\xaa\x4c\xb1\xad\x9d\x58\xdb\x7c\x7e\xe9\x95\x01\x92\xf2\xc5\x23\x07\x65\xd0\xd9\xfb\x00\xc6\x14\xf3\xd4\x24\xb6\x59\xb3\x8c\x62\x75\x59\x31\xed\x56\x74\x54\xe8\xbd\x2f\x6b\xc9\xcb\x4a\x5c\xdd\xe8\x64\xed\x7b\x5b\x46\x6e\x43\xd4\x36\x2b\xc9\xde\xd6\xa0\x80\x13\xe3\xb2\x7a\x59\xd6\x2c\xdd\x73\x4d\xbb\x75\xe0\xb2\x96\x0c\x92\x5b\xad\x9b\x95\x6d\xb7\xd6\xca\x62\xce\xbb\x35\xb6\x37\xac\xdd\x33\xb2\xb4\xe5\x43\x92\xba\x5b\xbb\xd2\xe8\x3c\x96\xd5\x55\x4c\x6a\xa0\xe8\x30\xbb\x54\x4e\x0e\x28\xb1\xea\x06\x0b\xdd\x65\x97\x0d\xf1\x96\xa3\xcf\xec\xa2\xd1\x27\x81\xa0\x6f\x3b\x43\x00\xe8\xe4\x08\xec\x24\xe4\xec\xe8\x28\xf1\xa6\xf5\x5b\x46\x01\x07\xc1\xbc\xb7\xcd\xe0\xe0\xec\x1c\xe3\x4b\x8d\xf6\xb8\x66\x45\xd8\x30\x71\x82\xad\xbf\x27\xd8\xc7\x70\x8c\x5e\xcb\x8b\x31\x62\x7e\x81\xf5\xe4\xed\xbd\x7e\x57\xc0\x6d\x07\xd7\x58\xac\xfb\x58\x1c\x73\x07\xbf\x63\x46\x02\xe0\x13\xc7\x81\x83\xb3\xb7\x7e\xc6\xc8\x99\xd6\xd8\xa7\x35\x66\x04\xce\x30\xf9\x0a\x9f\x68\xf9\x11\x1f\xf4\xe0\x6d\x72\x60\x05\x5e\x1e\x05\x3e\x2c\x47\x22\xe2\x82\x51\xa6\xbc\x8d\xc0\xf2\xd1\xb6\x7b\x87\x20\x5c\x6e\xf6\x82\x50\xd6\xf3\x61\x4d\x0f\x57\x52\xe5\x7e\x25\x75\x44\x90\x51\xbd\x1d\xfd\xc8\xa8\xe3\x1e\x1f\xe2\x37\xe1\xf3\x36\x7c\x75\xf2\xb7\xf1\x25\xbd\xc7\x97\x34\xf0\x75\xb7\xdb\xd1\x15\xc2\xc3\xf5\x79\x64\x86\xac\xf7\x33\xb4\xfa\xf7\xb1\x3e\xe3\xe2\x19\x5e\x66\x06\x8d\x7e\xef\xed\x54\x45\xc8\x19\xdf\xa6\x2c\x7c\x56\x83\x3f\x2b\x0b\x63\x7d\x4a\x59\x58\xf9\x8d\xca\xc2\x76\x8f\x0f\xd7\xf6\xc3\xca\x92\xdb\xf8\x36\xf3\x79\xd0\xdd\x4a\x52\xc2\xff\x31\x0d\xc8\x43\xbe\x8d\x44\x52\xbb\x47\xc2\xe2\xb3\xb6\xfe\x72\x24\xa5\xfc\x09\xbe\xc3\xfe\xfb\xf0\x3d\x63\xd9\xb2\x1c\x5d\xad\x82\x6e\xd6\x15\xe5\xb1\xa2\x95\x09\x86\x3a\x40\xbf\xf4\xb7\x29\x1a\x39\xad\xb1\x0a\x41\x1a\x91\xe3\x9a\xe9\x34\xd2\xfa\x5c\x26\x18\x63\x9d\xa2\x7e\x79\x19\xb6\x85\x2f\x1f\xca\x6a\x8f\xb4\xbd\x42\x00\x2e\xdf\x63\x56\x82\x6d\xee\x43\xc8\xff\xad\x99\x1d\x57\x56\xee\x74\x64\xc4\x83\x28\x4d\x6f\x52\x07\x0e\x19\x75\x34\xeb\x52\x3b\xa6\x69\x98\xc8\x3a\x0e\x4f\x93\x7b\x8f\x1c\xbc\xc1\xb4\x4a\x94\x71\x48\x25\x80\xd2\xbc\x59\xe3\x9a\x49\x3c\x3d\xcb\xa4\x12\x27\xc2\xc6\xc4\x60\xe4\xc6\xc7\x7d\x87\x4f\x75\x4f\x06\x49\xf9\x5c\xfd\x44\x55\xf0\x2e\xdc\x95\x0b\xb1\x8e\x6d\xee\xcd\x47\xbc\xae\x3f\xbe\x53\xcb\xc0\x8e\x02\xa4\x58\x13\x9d\x31\x70\x0e\x2d\xd8\xd8\x64\x0e\x5c\x51\x76\x05\xd1\x28\x1c\xae\x15\x44\xca\xc4\xcb\xaf\xcd\xc4\xb8\xef\x11\x30\xd6\xb7\xbd\xdd\xd5\x29\x16\xf6\x60\xcc\x7e\xd2\x6a\xbf\x39\xbf\x2e\x1a\x74\x7d\x4a\x5f\xeb\xc2\xe7\x11\xe7\x87\x30\xfd\x9b\x11\xf7\x3b\xb1\x2e\x29\xf0\x8b\x47\x11\x6c\x78\x60\x18\xe8\xda\x04\x6f\x6c\xb9\xbc\x4c\x8a\x0b\x27\x3e\xcb\xa9\x22\xb3\xb9\xf8\xe2\x60\x53\xc9\x44\xb3\x36\x4b\x9a\x75\x70\x21\x88\x7f\x8d\x4d\x34\x5e\x59\x59\xb3\x8a\x0e\x4b\x04\x8a\xda\xb4\xe9\x34\x53\xd4\xa1\xac\x72\xd2\xd1\x07\xaa\xbe\xb1\xe2\xdf\xdc\xe5\x6d\xd5\xe4\x24\x09\x78\xe5\x82\x27\xa5\x8d\xac\xda\x9a\xa7\x78\x14\xa1\xe3\x5e\x7b\xed\xaa\xc5\xa7\xcc\xf1\xa2\x5b\x48\xb7\x91\xf3\x2b\x4a\xc6\x50\x26\x19\x44\xfe\xbb\xed\x31\xbd\x43\xcb\xfc\xe0\x39\xf4\xe2\x6e\xed\x5c\x7d\x42\x37\x73\x9a\x0f\x74\x33\x47\x7d\x70\x58\x37\xb3\xe5\x17\x74\x73\xfd\x4f\xbf\xc8\x93\xe4\x36\x4f\x4a\x22\x24\x9c\xe4\x75\x3d\xf9\xa8\xda\xe1\x7f\xaf\xcc\x7f\x60\xef\x87\x33\xf7\x58\xec\xf9\x21\xfe\x62\xda\xee\x10\x6b\x62\x31\x39\x38\xd3\x6f\x44\x10\x48\xce\x02\x23\xbb\xfe\x53\x11\x54\x26\x3c\x88\xa0\x0a\xe9\x85\x08\xaa\x58\x8e\x45\xd0\x31\x5e\x49\xdd\x4f\xe7\x5a\xed\xe7\x4e\x67\x82\xaf\x4e\xe7\xa8\x78\xb4\xa9\x12\x44\xb5\x43\xa0\x5d\xd1\x78\xdd\xf0\x13\x18\xa9\x18\x46\x9f\xf8\xa6\xe9\x99\xd3\x79\xab\x4b\xe9\xc8\x59\xf4\xf3\x71\x33\x4a\xc9\x3c\xb5\xfe\x7a\x0e\xdd\x44\x1e\x30\xb9\x69\x7e\x81\xc9\xcd\xe6\xb7\x72\xe8\x95\x67\xbc\x0d\xfd\x2f\x33\x9c\x5f\xca\xa0\x3f\x3b\x6b\x1c\x11\x37\x4c\xa7\xad\x5b\xd2\x1f\x67\x2a\xd5\x3a\x92\xda\xf0\x74\xce\x92\xf8\x4d\x1a\xff\x03\xb8\xdf\x54\xda\xe7\xdb\xcc\x27\xe2\xa4\x8f\xfc\x20\x4e\xfa\xec\x2f\xc4\xc9\x40\x3e\x16\x27\xbb\x82\x8f\xfc\x93\xf5\x55\xff\x46\x7d\x45\x5b\x85\x75\xae\xad\x00\x9e\xab\xaf\x7e\x83\xe7\x7d\x9a\x15\xed\x69\xdd\xbf\xff\x7f\xf2\x1c\xbe\xe6\xf9\x94\xfe\x80\xe7\xd3\xf0\x31\xcf\x83\xc5\x87\x3c\x3e\x78\xe7\xd6\xfb\x24\xa1\xd2\xb1\x0e\x6a\x9e\xab\xe6\x46\x15\xd4\x67\x63\xf3\x5e\x4a\x16\xaa\xc5\x26\x2a\xb7\x54\x10\x95\x7c\x8a\x94\xd4\xa7\x10\x57\x1e\xf3\xbc\xb7\x4f\xdc\xb9\x9d\xb2\x04\x80\x82\x2a\x4a\x56\xac\x18\x31\x88\x13\x78\x72\xa7\x61\x73\x64\x6c\x98\xeb\x60\xee\x63\x62\xc1\x3e\x3d\xb1\x97\xd4\x0d\x27\x0e\x4c\x93\x95\x2b\x5a\x0f\x2e\xad\xbf\x6c\x67\xe6\xa4\x19\x80\xf2\x7f\x02\x00\x00\xff\xff\xef\x3b\x2a\x01\xd6\x20\x00\x00")

func compiledMetergoverc20BinBytes() ([]byte, error) {
	return bindataRead(
		_compiledMetergoverc20Bin,
		"compiled/MeterGovERC20.bin",
	)
}

func compiledMetergoverc20Bin() (*asset, error) {
	bytes, err := compiledMetergoverc20BinBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/MeterGovERC20.bin", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMeternativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x94\x3f\x6b\xc3\x30\x10\xc5\xbf\xcb\xcd\x9a\x0a\xed\xe0\xb1\x7b\xa7\x8e\x21\x98\x73\x7c\x31\x02\xf9\x24\xa4\x77\x29\x26\xe4\xbb\x17\x4a\x8d\xfb\x27\x25\x1e\xdc\xc4\x64\x14\xdc\x1d\xef\xf7\x78\x7a\x9b\x23\xed\xa2\x16\xb0\x82\x2a\x64\x13\x47\x5e\x93\xa1\x50\xb5\x39\x92\x72\x2f\x54\x11\xb7\x6d\x26\x47\x18\xd2\xf8\x92\x52\xe8\xb4\x75\xe3\x80\x32\xfc\x41\xea\x1e\xb9\xee\x04\xe4\x28\x1a\x7e\x1e\x99\x0e\x98\x57\x3c\x3c\x3e\x7d\x1c\x48\x3c\x70\x13\x84\xaa\x3d\x87\x22\x8e\x0a\x18\xf2\x62\xe0\xc6\x07\x8f\x81\x2a\x3a\x78\x79\x9b\x76\xf7\xa6\x3b\xf8\xa8\x74\x72\x8b\x2a\xe7\x02\xc9\x97\x84\x7f\xdd\xff\x1f\xe1\x67\x2d\x45\x04\x87\x57\x4b\x29\x0c\x37\xb0\xf6\x73\x7b\xb6\xb7\x6e\x1a\xe8\xa3\x29\xce\x8b\xfb\x45\xd9\xd5\xc5\x9a\x4b\x78\x4d\x8c\x61\x26\x9b\x46\x1d\x87\x56\x42\x58\x73\xdb\x7e\x03\x5c\x9a\x63\x46\x96\xba\x1b\x87\x69\x81\x86\xe9\xd6\x51\x31\x7f\xff\xd4\x67\xcb\x2a\xed\x3d\xff\xd4\xf5\x04\xf9\xde\xbd\xbe\x6a\x29\x6e\xdf\x03\x00\x00\xff\xff\xeb\xb1\xae\x26\x0d\x08\x00\x00")

func compiledMeternativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledMeternativeAbi,
		"compiled/MeterNative.abi",
	)
}

func compiledMeternativeAbi() (*asset, error) {
	bytes, err := compiledMeternativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/MeterNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMeternativeBin = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledMeternativeBinBytes() ([]byte, error) {
	return bindataRead(
		_compiledMeternativeBin,
		"compiled/MeterNative.bin",
	)
}

func compiledMeternativeBin() (*asset, error) {
	bytes, err := compiledMeternativeBinBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/MeterNative.bin", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledNewmeternativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x56\xc1\x6e\xa3\x30\x10\xfd\x97\x39\x73\x5a\x69\xf7\xc0\x71\xa5\x3d\xe6\xb4\xbd\x45\x11\x1a\xf0\x84\x5a\x31\x63\x64\x8f\xd3\xa2\x28\xff\x5e\x89\x86\x40\x1b\x92\x50\x89\x40\xc4\xd1\x8a\xdf\xcb\xbc\xf7\x66\xc6\xac\x0f\x90\x59\xf6\x82\x2c\x10\x8b\x0b\x14\x81\xe6\x32\x88\x87\x78\x7d\x00\xc6\x82\x20\x06\x54\xca\x41\x04\x52\x95\xcd\x89\xbc\x87\xe3\x26\x6a\x2e\x30\x8a\xde\x53\x52\x88\x4b\x72\x12\x88\xc0\x06\xf9\x4e\xd2\x12\x04\xcd\xf2\xeb\xf7\x9f\x9a\xa0\xc4\x0a\x53\x43\x10\x6f\xd1\x78\x8a\xc0\x0b\x0a\xad\x82\x60\xaa\x8d\x96\x0a\x62\xd8\x6b\x7a\x6b\xb1\xdb\xc0\x99\x68\xcb\x70\x8c\x46\xad\x1c\xbd\x90\xbb\x57\x78\x17\xff\x98\xc2\x7b\x2d\x15\x2b\x68\xfe\x87\xb2\x34\xd5\x0c\xd6\x9e\xd0\x83\xbd\x8d\xda\x0b\x85\x0d\x2c\xfd\xc5\x5d\xaa\x34\x36\xdb\x91\x4a\x50\xa9\x2f\x22\x07\x09\x61\xcb\xcd\xa5\x27\x91\x93\x27\x3e\xa4\xf7\xd2\x4a\xad\x35\x03\xa3\xfa\x81\xc2\x31\xa6\xf8\x14\xc6\x3c\xc3\x3c\x55\xc7\x3d\xba\xd5\x46\x08\x22\x9f\x37\x89\x01\xdb\x29\x9f\x79\x3d\x8d\x62\xf2\xa2\xfb\x3c\x5f\xd8\x6a\x6d\xe4\xcc\xb6\x60\xa7\xce\xed\x59\x5e\x92\xeb\x1f\x27\x7f\x83\x63\x52\x4b\x1e\xa1\x89\xdf\x8a\x1b\x9b\x76\xe9\x5e\x4f\xdd\xee\x5d\xcf\xcf\x74\x9f\x71\x5c\xb2\x5d\x50\xd5\xf6\xb8\x90\x89\x75\x35\x1b\xb2\xe5\xaa\xb0\xc1\xf7\xf9\xa5\x59\xd1\x3b\xa9\xf3\x4f\x27\x5d\x49\x63\x59\xaf\x87\x57\x41\xd7\x4c\xbd\x81\x29\x48\x5e\xad\x6a\x31\x5e\x9c\xe6\xbc\x9b\xc3\x8a\x84\xdc\x8b\xc3\x6c\x47\xee\xdf\x9e\xba\x7f\x40\xf5\xf1\xb8\xf9\x08\x00\x00\xff\xff\x3e\x80\x29\x9a\x33\x0e\x00\x00")

func compiledNewmeternativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledNewmeternativeAbi,
		"compiled/NewMeterNative.abi",
	)
}

func compiledNewmeternativeAbi() (*asset, error) {
	bytes, err := compiledNewmeternativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/NewMeterNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledNewmeternativeBin = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x6b\x52\xe3\x3c\x10\xbc\x52\x8f\xe6\x25\x1d\x47\xcf\xfb\x1f\xe1\x2b\x59\x61\x3f\xc0\x4b\xd6\x31\x09\xa4\x28\x9c\x82\x1f\x6d\x65\xdc\x6a\xb5\x5b\xa3\x18\x22\x0c\x02\x0d\x46\x44\xa3\x45\x18\x01\xc4\x06\x80\xd3\xfc\x3f\x18\x78\x35\x0a\x10\x36\xda\x46\x0d\x52\xdf\xc6\xa9\x57\x10\x4e\x5e\x09\x10\xe3\x71\xb9\xc8\x22\x8c\xa1\x44\x2d\x81\x49\xb6\xe7\x98\xfa\x42\x53\x52\xf4\xb4\xa1\x24\xed\x82\xba\x75\x36\x6a\x0b\x6d\x58\x68\x40\xee\xa6\xa0\x85\x8e\x72\x41\x4b\xe9\x62\xde\x37\x34\x48\x5c\x28\xa3\xe5\x1c\x62\x58\x68\xbe\xd4\x75\x41\x21\xd5\xb1\xa1\x0c\x59\x68\x8a\xd5\x46\x89\xeb\x69\xac\xb4\xd0\x1c\xd8\x3a\x80\x85\xe6\x4b\xdd\xcc\xc8\x23\xf8\x05\x6d\xbc\xd0\xa2\xe2\x1e\xa5\x6c\xa8\x84\x7c\x41\x27\x83\x84\xc5\x41\xdc\x17\x5a\x6b\x60\x98\xac\x59\x48\xab\x2f\x68\xf5\x36\xd2\xe2\xa0\x72\xe1\xd0\x86\x7b\xb6\x26\x0b\xb5\xcb\xd8\x9e\x73\xe2\x61\xeb\x69\x5a\xd2\x42\xe7\xa4\x44\x87\x2e\xb4\x8b\xba\x96\xb9\x92\x11\xa3\x69\x61\x89\x20\x9d\xba\x21\xac\x15\x5e\xb8\xce\x55\x27\x9e\x88\x44\xb0\x81\x23\x81\x12\x22\xe2\xf4\xc0\x9f\x35\xfc\xd7\x45\x96\x60\x08\x98\xdf\x4d\x21\x51\x82\x6e\x9f\x69\x2b\x49\x6a\x93\x8b\x40\x29\x22\x86\x48\xd3\x73\xdb\x58\xda\xc6\x5c\xee\x24\x02\x27\x0c\x7e\xcd\x56\xd3\x9e\x6d\xec\x8f\x64\x3b\xde\xb1\xbd\xa5\xea\x2d\x63\x6f\x51\x61\xba\xe4\xbd\x0a\x7d\xde\xf1\x7c\x5e\xdb\x00\xdf\x55\x0d\x62\xf7\xd7\x76\x7e\xff\x43\xbd\xa3\xfa\x9c\x01\xf0\x9a\x99\xca\x9e\x59\xe2\xaf\x66\x36\xc6\x5b\x6d\x49\xd7\xe7\x16\x8d\xcb\xde\xbf\xa1\x3f\xd2\xbf\x29\x8f\xd3\x8e\x60\xc2\x8e\x2d\xcb\xf8\x62\xdd\xb3\x8e\x9d\x23\x58\xdb\x9e\x59\x0a\x0f\xd4\xb1\xc0\xcf\xeb\x58\xf6\xfe\xe5\xd2\x66\xd5\xf2\x89\xaa\x6d\xec\xaa\xce\x9d\xe1\x71\x1a\x54\xd3\xd3\x6c\x85\x6d\xcf\xd6\xf5\x8b\xbd\xd4\x48\x77\x5e\x92\xc8\x7b\x66\xf5\x01\x5e\xba\xce\xac\xb4\x4f\xa7\x8b\xf4\xb8\x9b\x89\x86\x07\xec\xe5\x57\x67\xd2\xed\xf3\x33\x51\xd9\xbf\xdf\xaa\x66\x84\x41\xed\xb4\x07\xd5\xff\xa2\x4f\xf9\x6a\x7d\x46\x2d\x3b\x0f\x6a\xd5\x3d\xb3\xda\x8d\x08\xce\xe7\xe7\x3b\xf6\xf9\x6d\xe1\x8b\xf3\x9b\x28\xd0\x59\x3f\x4c\xee\x3e\xba\x33\x8f\x56\x92\x97\x86\x90\x7b\x8c\x2e\x16\x0a\x63\x24\x8e\xa6\xdc\x3d\x3b\xa8\x0e\xf4\x9a\xc2\xa8\x21\x36\xe9\xea\x4d\x2c\x24\xa3\x11\x48\xe2\x7c\x97\xff\x54\x8f\xfc\xf8\x0e\xee\xf5\x2a\x45\xfc\x8f\x81\x63\xd8\xce\x57\xfd\xf5\x7d\x1f\xd6\x8d\x5c\x2c\xb9\x99\xea\xb0\xe6\xe2\x41\x87\xb9\xa9\xcb\x91\xf3\xd5\xac\xa6\x2f\xfa\xb3\xbe\x68\xff\x46\xcf\x4c\xb6\x9d\xc4\x14\x97\xd5\xb1\x1f\xac\x6f\xbb\xae\xaf\x91\xb3\x8b\xa9\x87\x63\xe7\xd7\xef\xd5\x97\xf9\xd9\xf4\x7d\x33\xf6\x43\xff\xba\xd8\xfc\x23\xab\xca\xae\x0e\x87\x55\x4f\x77\xd0\x77\xd3\xf6\x1e\xbe\x9d\xce\x7d\x22\x55\xf5\x50\x2a\x54\x1b\xc6\x56\x4c\xe7\xf1\xde\xc8\xc4\x3e\xc8\x88\x63\xaa\xea\x7d\xb3\x80\x23\x3f\x93\xa6\x18\xff\xd6\xd4\x5c\x87\xb3\xab\x1d\x48\x83\xc3\x4e\xdd\x32\x60\xee\x84\x77\xd6\xf7\xe9\xb2\xf6\x94\x6b\xaf\xec\x6c\x67\xb3\xf6\xe7\xe5\xc1\xc1\x2e\xe1\x4a\x02\x3c\x41\x1e\x3c\x9f\x5f\x0f\xec\x5d\x33\x11\x8e\x3a\xf6\xb7\x37\x78\xa7\xaf\x1f\x4c\xdc\x83\xdd\xc1\x99\xde\xe0\xa7\x7a\xf7\xe8\x6e\x76\xf4\xe4\xf0\x9b\xb5\x9f\x4c\x85\x0f\xb3\xf7\xb7\xf7\x3a\xd7\x19\x5c\xeb\xc3\xbe\xbd\xf7\x7a\x36\x7d\x4f\x79\xf6\x63\x85\xbf\x5b\xdf\x27\xdc\xcb\x6e\x3c\xe7\x4a\x70\xf5\x60\x7d\x2a\x7d\x87\xbc\xfd\xa1\x59\x7b\x78\x17\x3b\xd8\xd9\x7e\x47\xd6\x3e\xa1\x57\x6f\xee\xbb\xae\xbb\xf5\x1b\xfb\xae\x27\xcb\xd9\x63\xe7\xb0\xa3\xbf\x20\x9c\xcf\x59\x4c\x54\x2d\x78\xf6\xec\x81\xa1\x31\x20\xa7\x8c\x26\x56\x35\x21\x8f\xce\xf0\x84\x1a\x2a\x69\x26\x6e\x8e\x5e\x63\xd2\xde\x2a\xe7\x8a\xde\x84\x82\x79\x8c\x05\x85\x84\x55\x1c\xb5\x57\x20\xa4\xff\x02\x00\x00\xff\xff\xc2\x88\xb6\xe9\x20\x24\x00\x00")

func compiledNewmeternativeBinBytes() ([]byte, error) {
	return bindataRead(
		_compiledNewmeternativeBin,
		"compiled/NewMeterNative.bin",
	)
}

func compiledNewmeternativeBin() (*asset, error) {
	bytes, err := compiledNewmeternativeBinBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/NewMeterNative.bin", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xc1\x6a\xc3\x30\x0c\x86\xdf\xe5\x3f\xfb\xd4\xb1\x1d\xf2\x0e\x3b\xed\x58\xc2\x50\x12\x75\x98\xa5\x72\x88\xa4\xac\xa6\xe4\xdd\xc7\x4a\x12\xc3\xe8\x08\x65\x47\xe3\xcf\xbf\x3e\xa3\xff\x78\x45\x9b\x44\x8d\xc4\x50\x9d\xa8\x57\x0e\x88\x32\xb8\x29\xaa\xe3\x15\x42\x67\x46\x85\xf7\x4f\xce\x08\xb0\x3c\xfc\x9c\x9a\x6c\xac\x4f\x07\xcc\xa1\x00\x13\xf5\xce\x05\xf1\x28\x76\x78\x7e\xc1\x5c\x87\x15\x51\x36\x04\x24\xb7\x25\xbc\x0e\x18\x28\x53\xd3\xf3\x36\x58\x8d\x8c\x5f\xdd\xa8\x89\x7d\xb4\x8c\x0a\x92\x64\x85\xb6\xec\x93\x4b\x6b\x31\xc9\x6d\x7e\x91\xb7\xd1\x1f\x71\x2f\x62\x1f\xbf\xc4\xb6\x97\xf7\xbf\xb3\x2f\x3d\x45\xfe\x7a\x54\xb7\xe8\xf0\x85\x5b\xb7\x34\xee\x39\x51\xd7\x8d\xac\xfa\x7f\x27\x92\x24\xf9\x9c\x5c\xef\x15\x20\x4a\xc7\x17\xee\x56\xdf\xc5\xe2\xcf\x3a\x6c\xf8\x92\xb4\xf0\xfb\xed\x78\xbb\x2d\x61\xb9\xe7\x89\xc5\x30\xd7\xdf\x01\x00\x00\xff\xff\xfb\x8f\x43\xc8\x9d\x02\x00\x00")

func compiledParamsAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsAbi,
		"compiled/Params.abi",
	)
}

func compiledParamsAbi() (*asset, error) {
	bytes, err := compiledParamsAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsBin = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x09\x92\xeb\x3a\x08\xbc\x52\x03\x62\x3b\x8e\xac\xe5\xfe\x47\xf8\x25\xdb\x89\x33\xcb\xcf\x4c\xf2\x6a\xe4\xaa\x48\x01\xcc\xd2\x0d\xb2\x21\x60\x28\x50\x96\x12\x20\x35\x02\x08\xea\x06\x20\x30\xbb\x6e\x0a\x23\x94\x42\xb1\x76\x30\x96\x46\x72\xfd\x4e\x01\xae\xf7\x0d\x28\x62\xb4\x5b\xa9\x1f\x1e\x44\xbd\x81\xf0\xe6\x4a\xa0\x98\xcc\x73\x91\x05\x4c\xd8\x65\x96\x2c\xa0\xb2\xc7\x69\xea\x4b\x1a\xa3\x56\xab\xed\x94\xa6\x1f\xd2\x26\xa5\x21\x86\x1e\xd2\xde\xd4\x75\xbb\xea\xba\xea\xb5\xf8\x52\x2f\x52\x57\x3d\x01\x31\x48\x10\x28\x11\x08\xc8\x92\x82\x92\x2c\x61\xe0\x75\x44\x72\xee\x5a\xd1\xcf\x32\xdd\x1f\x23\x90\x88\x9a\x6e\xc0\x63\xd4\x2a\x5f\xa3\x36\x7b\x2d\xea\x3d\x02\x6f\x65\x45\xd8\x99\xa0\x40\x70\xd0\x62\x64\xb7\xa5\xdd\xe6\xd4\x24\x41\x12\x53\x1e\x33\x19\xdf\xd4\x3f\xc9\x08\x62\xf3\xa3\x57\xbf\xb3\xf1\xd3\x22\x7b\xc5\xf6\xe7\x6c\x77\x14\xb7\x2b\xa7\x57\xbc\x8b\xbc\x62\x4d\x85\x74\xc7\x85\x7a\x5f\xb8\xac\x4c\x7c\x22\x9a\x78\xd6\x77\x5b\x19\x47\x85\x28\x58\x38\x9e\x2c\x2e\x96\x20\xc1\x4b\x43\xf5\xc2\x20\xe0\xd3\xd8\xd5\xd2\x9a\x17\x4b\x1b\x52\x19\xa6\x1e\xa6\x26\xae\x5e\x6c\x3a\x33\x9c\x4d\x9d\x96\xdd\x3a\x59\xf9\x1c\x4f\xf1\x04\xd3\x35\x01\x78\x05\x17\x13\x2e\x69\x35\xa5\x86\x84\x9c\xde\xe4\x71\x3e\xff\x65\xd6\xc1\x1f\x10\x92\x5b\xc7\xdf\xf6\x07\x74\x1e\x7b\x9b\xcf\x09\x00\xee\xf5\x85\xac\xd9\xd9\xfb\xd9\x03\xb2\x91\x9e\x7d\xce\xeb\xb6\x78\xec\x73\xad\x93\x2e\xad\x43\x5d\xfa\xa1\x97\x71\x9c\x4e\xbb\xfd\x39\x7c\xae\x5c\x7c\x72\x0c\xe1\x62\x33\xa0\xa4\x53\x1b\x8d\x9e\xe1\x1b\x89\x8c\xc9\x93\x52\x8a\xe4\xc6\x5a\xdb\x56\xad\xea\xb0\x9c\x4c\x39\x22\x6d\xb6\xec\xe4\x19\xfc\xdb\x49\xad\x47\x85\x76\xdc\x5c\xaf\x32\xb6\x75\x52\x8c\x51\xef\x7c\xf1\x1f\xf1\xc5\xff\xcf\xd7\xad\x2a\xfe\x99\x21\xe1\xfe\x84\x21\x29\xf4\x9c\xa1\xc3\xff\x92\x33\x82\xe8\x7c\xeb\xf6\x2d\x3a\x7c\x5e\xb7\xaa\xd2\xf7\xb7\xe9\xda\xcf\x7f\x6f\xa2\x9e\x5c\xc9\x66\xaf\x67\xbd\xf4\x17\x98\xff\x0e\xcf\xae\xcf\xf0\x1c\xf9\x0e\x9e\x73\xbe\x81\x27\xd6\x27\xac\x92\xa9\xb1\x57\xaf\xce\x02\x0d\x86\x96\x30\x68\x92\x74\xaf\x23\xc8\xdc\x63\xd6\x11\x45\x4b\x8e\x52\xdd\xb2\x94\xe9\x45\xc7\x46\xe1\x3c\xc0\x7d\x36\x92\xad\x06\x8d\xd1\x7a\xef\x15\xe0\xfc\x2f\x00\x00\xff\xff\xa6\xdc\xdb\xb3\xc2\x08\x00\x00")

func compiledParamsBinBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsBin,
		"compiled/Params.bin",
	)
}

func compiledParamsBin() (*asset, error) {
	bytes, err := compiledParamsBinBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.bin", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsnativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x41\x4e\xc3\x30\x10\x45\xef\x32\x6b\xaf\x8a\x60\x91\x3b\x70\x82\x2a\x42\x93\x74\x8a\x2c\xcc\x38\xca\xfc\x09\x58\x55\xef\x8e\x5a\x51\x27\x10\xa4\x88\x2e\x2d\x7f\xfb\xbf\xf7\xf7\x27\xea\xb3\x1a\x58\x41\xcd\x91\x93\x49\xa0\xa8\x83\xc3\xa8\xd9\x9f\x48\xf9\x5d\xa8\xa1\x37\x29\x14\x08\x65\xb8\x1c\xba\x02\xb1\x87\x1d\x9d\x43\xbd\x9f\x38\xb9\xcc\x09\x8f\x8a\xdd\xe3\x13\x9d\xdb\x70\x4b\x28\x23\x4e\xf2\x62\x02\x0a\x94\x1d\xdf\x0d\x6d\xa0\x81\x0b\x77\x49\x6a\xbb\x81\x21\xcf\x0e\xee\x62\x8a\x28\x97\xb7\x59\x6f\xa1\x5a\x71\x74\xed\x11\xb3\x5e\x29\x66\x03\x8c\xbe\x14\x58\xf5\xcb\xa7\xf4\x8e\x3c\xfe\x80\xa8\x1a\xf3\xf7\x7c\x38\x8c\x62\x76\x35\xd8\x06\x9c\xa2\x7c\xfc\x17\x6d\x63\xdb\x15\xf9\xeb\xaf\xe5\xfe\x80\x5e\xce\x7e\x3f\x74\xfb\x15\x00\x00\xff\xff\x4b\xb6\x04\x06\x13\x02\x00\x00")

func compiledParamsnativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsnativeAbi,
		"compiled/ParamsNative.abi",
	)
}

func compiledParamsnativeAbi() (*asset, error) {
	bytes, err := compiledParamsnativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ParamsNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsnativeBin = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledParamsnativeBinBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsnativeBin,
		"compiled/ParamsNative.bin",
	)
}

func compiledParamsnativeBin() (*asset, error) {
	bytes, err := compiledParamsnativeBinBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ParamsNative.bin", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x4d\x8f\xda\x30\x10\xfd\x2f\x3e\xe7\x44\xd5\x1e\x72\x45\xea\x8d\xaa\x6a\xd5\x13\x42\xd5\xc4\x19\xa8\x85\x33\x8e\x3c\x63\x50\x84\xfa\xdf\x57\xa0\x25\x31\x4b\x84\x77\xf9\xd8\x84\x23\xe2\x4d\x3c\xcf\xf3\xde\xf3\xcc\x77\x4a\x3b\x62\x01\x12\x95\x2f\xc1\x32\x66\xca\x50\x1d\x84\x55\x3e\xdf\x29\x82\x0a\x55\xae\xfe\x32\xda\xa5\xca\x94\x34\xf5\xfe\x27\x94\xa5\x47\x66\xf5\x3f\xeb\x10\x84\xdb\x19\xb0\xa0\xef\x81\x2d\xb2\x23\x8c\x51\x5a\x94\x0b\xf2\x7a\xce\x22\x53\x35\x34\x50\x58\x6c\x7b\x60\x01\xc1\x59\x10\x28\x8c\x35\xd2\xa8\x5c\x91\xa3\x23\xa8\x3d\x61\x19\x48\x8b\x71\x74\xe8\xa4\xe3\x21\x3e\x5c\x4b\x23\x70\x82\x81\xe1\x3f\xfc\xa6\xfd\xb6\xba\x2b\x2c\x9c\xb3\x87\xaa\x34\xaf\x8d\xc1\xed\x23\x19\xad\xb1\x89\xfa\x6a\x04\xf9\xcb\xe4\x64\x24\xe2\x3c\xac\xf0\xbb\x4b\x93\x8a\x8a\x87\xe7\x55\x58\xa7\xd7\x3f\x42\x55\xc4\x03\x0b\x86\x64\xf2\xf5\x5b\xcc\x0f\x09\xfd\xaa\x49\x71\x8b\x0b\xef\xc4\xed\x16\x37\x25\x65\xe8\xb1\x72\x1b\x3c\x93\xe2\xd0\x4e\xea\x1a\xd4\xc1\x7b\x24\xf9\x5d\x3b\xe2\xb4\xb4\xe2\x0f\x8c\xe0\xfa\xb5\xc7\xd2\x48\x8f\x3a\x22\x8c\x47\xed\x36\xe8\x9b\x5f\x20\x78\x51\x80\x8c\x32\x3d\x7c\xef\xa7\x05\x7a\xe8\xb4\x6e\xa1\xcc\xed\xa0\x2e\xa5\xb7\x45\xdd\x3b\xd2\xa1\x75\x77\x45\x2e\x14\x60\x81\x34\x3e\x43\x30\x44\x13\x18\xe1\xdd\x47\x9e\xef\x97\xf9\xee\xf4\xff\x8b\xb6\x4a\xbb\x6a\x04\xf1\x90\x4c\x67\x28\xcb\x11\x47\xf3\x3f\xe0\xa9\x2b\x93\xca\x1f\x7a\x87\xe9\x1a\xae\xce\x57\xc6\xcf\x79\x43\x1e\xb9\x48\xee\x01\xd3\xa3\x21\x9e\x28\x82\x02\x8d\x31\x84\x3e\xf8\x92\x19\x7e\xe7\x62\x72\x07\x13\x2c\x5e\x02\x00\x00\xff\xff\xc1\xa7\x82\x58\x64\x0d\x00\x00")

func compiledPrototypeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeAbi,
		"compiled/Prototype.abi",
	)
}

func compiledPrototypeAbi() (*asset, error) {
	bytes, err := compiledPrototypeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Prototype.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeBin = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x0b\x96\xda\x3c\x0f\xdd\x92\x64\x3d\x2c\x2d\xc7\xcf\xfd\x2f\xe1\x3f\x4e\x32\x30\x33\x99\x66\x70\x28\xfc\x9c\x7e\xc0\x69\x29\x22\x7e\xc8\xf7\xea\xca\xb2\xab\x60\xa0\xc0\x20\x81\xd8\x00\x45\x11\x00\x41\xa2\x02\x80\x41\xaf\x92\x05\x14\xb1\x86\x64\x30\x7e\x0b\x30\x7e\x21\x1f\x7f\x77\x02\xb8\xb6\x57\x00\x26\xc5\xe5\xa9\x8e\x6b\x0f\x24\xb1\x00\xc2\xc9\x97\x03\xb0\x52\xdf\x5e\xa8\x06\x4a\x80\x14\x2d\x8b\x21\x2f\xe3\xa8\xc4\xc5\x1a\x2a\x53\x2d\xab\x15\xc5\x37\x2b\xb7\x98\x58\xe2\x6a\xad\xbc\x5a\xb1\xb9\xe4\xc6\xb2\x58\x03\xe3\x6a\x0d\xc1\x83\x55\xcd\xab\x35\x85\xcd\x4a\xd5\x4a\xac\xab\x95\x40\x56\x2b\xa9\x78\xb7\x56\x57\xab\xd9\x66\xb5\x88\xc9\xfb\xf6\x6c\xed\xab\x55\xab\x15\x13\x4f\x8b\x95\x79\xeb\x37\xaa\x16\xee\xb4\xce\x8c\x13\xad\x56\x83\xda\x59\x32\xaf\xd6\xb6\xf9\x66\x25\x51\x66\x5e\x7d\x13\xde\xbc\x70\x21\x2b\x9c\x69\xb5\xa6\xb8\x59\x5b\x45\xa1\x02\x8b\x55\x61\x1b\xad\x78\xe1\x5e\x18\x57\xab\x6d\x5e\x94\x5a\x43\x72\xef\xab\xb5\x97\xd5\x5a\x2d\x12\x51\x2a\x8b\x35\x52\x97\x28\xf9\xca\x85\x0b\x47\x70\xf4\xfd\x95\x23\xb0\x62\xce\x06\xa4\x40\x86\x80\x0e\x06\x36\x38\x70\xc1\xf0\xb7\x17\xaa\x8f\x69\xc3\x68\xeb\xc1\x97\x1e\xee\x6b\x2f\xcb\x7b\xf8\x92\x93\xa8\x64\x80\xcf\x5e\xa8\xec\xbd\xc8\xe9\x85\xbd\xb0\xd4\x86\x17\x4b\xc4\xa1\x81\x05\x94\xf5\x6d\x38\x22\x70\x69\x83\xcb\xb3\xdb\x13\x8e\x40\x0e\x9d\x3e\x7b\xdd\x76\xf1\x0d\x21\xd0\x63\xbc\x1e\xe3\xa0\x1f\x78\xe4\x25\x7c\xf5\xe8\xa3\xc5\xc7\xe7\x84\x67\x81\xeb\xde\x33\x2b\x8f\xf1\xec\x8f\x1e\xa5\xfc\xcd\xa3\x19\x0f\x52\xdb\x79\x40\xf0\x20\x6c\xfe\x0a\x23\x73\xd2\x5d\x5c\x11\xe2\xde\x0b\xd6\xbf\xef\xc5\x65\x16\x95\xf0\xeb\x9a\xcf\xf4\x3a\xf3\xec\x04\x96\xe4\xbc\x5f\x85\x5a\x9f\xc3\xc6\x43\x86\x36\x84\x3d\x66\x2d\xef\x66\xcb\x0c\x2f\xcc\xbc\xd6\x70\xe7\x05\xf3\x3e\x7e\xd8\x9e\xb4\xe6\x1f\x33\x43\xd0\x72\x5a\x01\x38\xf5\xbd\x07\x8d\x1f\x17\x3b\x88\xba\x67\x03\xf7\x7d\x7e\x97\xf0\x80\xfc\x7e\x99\x45\x68\x5f\x23\x98\xae\x6b\xf6\x65\xfd\xc2\xd6\xe2\xcf\x2b\x28\xb2\xcf\x6f\x92\xe4\x75\x99\x8c\x54\xca\x0e\x01\xc9\xb4\xf7\xa2\xd9\x03\x11\x90\xa6\x77\xef\x2d\x14\xf6\xf1\xa7\xfc\x80\xfc\x75\x99\xb5\x16\x79\x39\xe5\x57\xdf\xe7\x3f\x6d\x0f\xc8\x7f\x7f\x6d\x15\x47\x9d\x74\x56\xb1\x22\xd8\xce\xdb\x48\x0f\xd0\xdc\xcb\x6c\x2d\xdb\x2e\x5e\x22\xef\xf3\x57\x4c\x2f\x9c\xbf\x30\x91\x9f\x8d\xb7\xe1\x5b\x21\x0b\x8a\x98\xb9\x8e\x5e\x08\x66\xe6\xa4\x84\xc9\x72\x48\x31\x18\x19\x6d\xfd\xd3\xe7\x5a\xfb\x9e\xba\x1d\x36\xf6\x00\xc3\xa2\xe4\x8f\x8f\xc8\xa7\x44\xfd\x25\xf3\x00\x5c\xb3\xd4\xe0\xd5\xc2\xba\x68\x40\x19\x65\x63\xa3\xf9\xb7\xfc\x29\xa9\xe3\xf5\xd7\xa4\xb2\x46\xc8\x60\x53\x5b\xff\xb5\x3d\x77\x7d\xeb\x5a\x79\xcf\x22\x4b\xa8\x84\xe0\xd5\xd8\xf8\x8d\xec\x2d\x63\x5c\x91\x0d\xbf\x23\xeb\xb1\x1f\x20\xeb\x4e\xc7\xc8\xae\xfd\x0f\x7b\x00\x43\xdc\x5a\x25\xff\xdc\xe7\x55\xa9\x04\x7f\x56\x8f\xf1\x39\xbe\xdf\xc3\x93\xe0\x8d\x5a\xef\xe1\x5f\xe1\xc9\xc1\xb9\xc1\x0c\xbe\x49\x8f\xf0\x4d\x76\x06\xdf\xe4\xff\x07\x7c\x31\x54\x81\xd0\xff\x19\x1d\xf8\x3c\xf7\x2f\xa7\xc2\xe7\x70\xce\x4a\x07\x38\xe7\x18\x4f\xe0\x9c\xad\xde\x89\x33\x42\x4e\xfd\x9e\xbc\xee\xd9\xb8\x17\xcf\xef\xbc\x7e\xeb\x18\x53\xac\x29\xb1\x1d\xb0\xa6\x8c\xac\x3f\xcd\x9a\x92\x6c\x8e\x35\x63\x8f\xa8\x08\x35\x2c\x6c\x1b\x3d\xc6\x0e\x56\x28\x7a\x3a\x0d\xed\x17\x64\xe1\x5a\x77\x03\x59\x18\xbf\xe0\xe7\x7a\x1c\x62\xd7\x10\x45\x5d\x4b\x64\x75\x6d\x94\xc2\x28\x70\x7a\xe4\x00\x8a\x01\x46\xf0\xa8\xc4\x70\x3c\x9e\xc0\xc1\x2e\xf7\x63\xd5\x4e\xaa\x9f\xb4\x90\x38\xa6\x6b\x14\x84\x07\x45\xc1\x13\xeb\xcd\x1b\xf8\x59\xcb\x11\x3f\x6b\x3b\xc3\xcf\xda\x27\xf9\xb9\xa8\xda\xfa\x6d\xd5\xb4\x86\x6e\x74\x5e\xd3\x34\x73\x2d\x90\xcb\xc8\x64\x97\x5c\xc6\x0f\xc2\x93\x9f\xa0\x6a\x7f\x3a\xdb\xa2\x2b\x0e\x37\xd4\x18\xad\xf0\x01\xd6\xad\xda\x0d\x35\xc6\x05\xa1\x96\xee\xc9\x3a\x2a\x49\x73\xd5\x77\x35\x79\xf3\x18\x53\x59\xa7\x67\x3f\x40\xba\x97\x7a\x22\xaa\x7b\xa3\x33\x59\x67\xb9\x40\x7e\x5e\xd6\xd1\xa9\xac\x43\x11\xb4\x6b\x8b\xa4\xfd\xe7\xdc\xf3\xe8\xac\x93\xa1\xa1\x19\xa7\xf7\x9e\xfb\x27\x1e\x23\x62\xfd\x33\x8f\x11\x09\xe7\x79\x8c\xc8\xf1\xbe\x3d\xf7\x2c\xc6\xcd\x2d\x53\x37\xb6\x40\x6f\xad\xbb\x69\x8c\x29\x8e\x84\x70\x50\x7f\x63\xe0\x13\xf5\x37\x06\x99\xac\xbf\x37\xad\x0b\xb5\x3d\x51\xeb\xd2\xaf\x5a\x87\x5a\x62\x50\x51\x54\x8e\xfe\x5d\xef\x54\x94\xbf\x8f\x77\x83\xd6\xe9\xc7\xff\xef\x99\xd7\xba\xc2\x39\x54\xbb\x28\xdd\x3f\xb0\xc3\xe6\x85\x13\x07\xec\xa4\xa3\xfa\x0f\xe9\xf6\xfa\x8f\xaf\xec\xa4\xdb\xeb\xbf\x03\x55\xc3\x2f\x7f\x3e\x50\xc5\x99\xf5\x40\x5e\xef\x1f\x14\x91\x25\x3f\x91\xf9\xf2\x2b\xf3\x5d\x5b\xd4\xc1\x7f\x75\xe5\xdf\xea\xcb\x5b\x98\x3f\x7c\x54\xbe\x67\xcf\x6b\x8e\xf5\x7d\x83\x32\x33\xc6\x54\x1e\x10\x3a\x38\x9f\x43\xe1\x13\xe7\x73\x28\x32\x79\x3e\xb7\x45\x83\xb4\xf0\x52\x7b\xde\x6f\x79\x60\x7c\x2a\x7f\xd7\xff\x99\x68\xb8\xeb\xa4\xc5\x35\xf5\x9e\xe5\xbf\x75\xd2\x82\x6a\x47\xfc\x54\x3f\xc3\x4f\x4d\x67\xce\x8f\xaf\x27\x2d\x27\xd0\x03\x71\x17\x68\xfe\x1f\x43\x2f\xea\xc1\xfd\x2c\xc6\xf8\xcb\xfd\xec\x8f\xe8\x45\x2b\xcf\x46\xaf\x54\xee\x21\x80\xfd\x2b\xf5\xe6\x8b\xe5\x20\x8b\x72\xc0\x12\x33\x3f\xc1\x12\xf3\xfe\xdc\x7a\x15\x38\xc5\x56\xa3\xbd\xeb\xd5\x5b\xc7\x98\xe2\x88\x5b\x3c\xe0\x88\x7b\x3e\xc1\x11\xcf\x78\x6a\x9f\x92\xc6\xa6\xf8\x85\xf6\x29\xdb\xd9\xdc\x71\x9d\xfa\x79\xbc\xdb\xeb\xd5\xf9\xfb\x20\x53\x0c\x98\xdf\x4a\x79\xeb\x18\x53\x51\x90\x21\x1d\x44\x41\xc6\x76\x22\x0a\x32\xf1\x9d\x4a\x39\x85\xc4\x6c\xad\x6c\xa0\x88\x65\x44\xbf\xc0\xdc\x48\xef\x3d\xda\x4d\x9c\x2a\x74\x70\xbf\x85\x85\x7f\xb9\xdf\xfa\x91\x53\x45\xda\x1c\xa7\xe6\x38\x21\x79\x53\xe2\xd2\x9f\x78\x7e\x12\xe0\x37\x25\x8e\xa4\xa2\x45\x35\xc0\x50\xe0\x00\x5a\x15\x23\x45\x56\x19\xdf\x86\x26\x47\x1c\x6d\x56\x75\xbe\x55\x89\x01\x12\xaa\x68\x88\x29\xa6\x18\x08\xc4\x02\xb4\xe0\x6e\x91\x23\x63\x68\xd6\x5b\xb2\x96\x94\x8c\x4b\xa5\xa0\xcd\x59\x52\x60\xe8\x31\x67\xc0\x1e\x2a\x21\x7b\xd4\x22\x58\x28\xb9\x58\xe9\x3e\x28\xe9\xff\x0b\x00\x00\xff\xff\x6b\x3b\xf5\xa7\x94\x3a\x00\x00")

func compiledPrototypeBinBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeBin,
		"compiled/Prototype.bin",
	)
}

func compiledPrototypeBin() (*asset, error) {
	bytes, err := compiledPrototypeBinBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Prototype.bin", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeeventAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\x3f\x6b\x84\x40\x10\xc5\xbf\xcb\x90\xd2\xca\x90\x14\xb6\xa9\x03\x21\x21\x95\x58\xcc\xb9\x73\xb0\xa0\xb3\xb2\x33\xeb\xdd\x22\x7e\xf7\xe3\xe4\xf0\x1f\xda\x78\xd7\xee\xce\xfb\xbd\x1f\x2f\xef\x00\xd9\x71\xac\x5d\x10\xc8\xce\x58\x09\x25\x60\xb9\x09\x2a\x90\xe5\x1d\x58\x36\x74\x25\x33\x7e\x31\xd6\x04\x19\x30\x5d\xbe\x51\x94\x3c\x24\xa0\xb1\xb9\x3f\xa1\x31\x9e\x44\xa0\x2f\xc6\xab\xb7\xf5\x0d\xb5\xc4\x0a\x7d\x72\xac\xb4\xf4\x64\xac\x4e\xb4\x60\x59\xd3\x8f\xcf\x81\xb7\x13\xf1\x54\xba\x96\x7c\xfc\x45\xa5\x8d\xe0\x4c\xf5\x6b\x80\xff\x54\xc8\xc7\x75\xd5\x87\xa9\x3a\xc8\xe6\x3a\xfb\xae\x58\xaa\x75\xb3\xf6\x53\x54\x92\xf7\x74\x61\xf9\x2f\xcf\xcc\xb9\xf0\x93\xc6\xb1\xb8\xd7\x2b\xfe\xad\xb9\x0f\xcb\xe2\x16\x00\x00\xff\xff\xa4\xcf\xdd\xbb\x6b\x02\x00\x00")

func compiledPrototypeeventAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeeventAbi,
		"compiled/PrototypeEvent.abi",
	)
}

func compiledPrototypeeventAbi() (*asset, error) {
	bytes, err := compiledPrototypeeventAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeEvent.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeeventBin = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcb\xbb\x91\xc6\x40\x08\x04\xe1\x94\x1a\xd8\x01\x36\x9c\x7d\x48\xf9\x87\x70\x25\xe3\xea\x77\xc6\x98\xfa\x3a\x69\x92\x81\x3c\x46\x63\x4a\x78\x55\x09\x34\xef\xd5\x16\x49\xe8\x33\x76\xbf\x37\xe6\xb7\x6f\xc0\xaf\xfc\xd7\xb0\x2c\x95\x5e\xab\x56\x79\xa0\x76\x6a\x98\xc9\x74\xbc\x7d\x54\x3f\x95\x23\x29\x8b\xec\x75\xcc\x66\x85\x4e\xfb\xb3\x75\x3b\xf7\xf5\x1d\x2a\xea\xac\x79\x8f\xb8\x11\x4f\x4e\xf0\xf9\x17\x00\x00\xff\xff\xb8\x50\xde\x51\xa4\x00\x00\x00")

func compiledPrototypeeventBinBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeeventBin,
		"compiled/PrototypeEvent.bin",
	)
}

func compiledPrototypeeventBin() (*asset, error) {
	bytes, err := compiledPrototypeeventBinBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeEvent.bin", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypenativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x4f\xeb\x9b\x40\x10\xfd\x2e\x7b\xf6\xf4\x2b\xed\x21\xb7\x36\xd0\x5b\x4a\x69\xe9\x29\x84\x32\xae\x93\x74\xc9\x3a\x2b\x3b\xb3\x06\x09\xfd\xee\xc5\x80\x51\xaa\x54\x4d\xfd\x93\x1c\x85\x99\xf1\x3d\xde\xec\x7b\xb3\xbf\x2a\xed\x88\x05\x48\xd4\xe6\x08\x96\x31\x52\x86\xb2\x20\xac\x36\xfb\xab\x22\x48\x51\x6d\x14\xa3\x3d\xaa\x48\x49\x91\x95\x5f\x90\x24\x1e\x99\xd5\xef\xa8\x2e\xc8\x1c\xb1\xf3\x1d\x35\x87\xa8\xaa\x21\x10\x93\xe3\xcf\x40\x75\xb1\x0b\xf2\xf7\xaf\xea\x11\xb1\x73\xf6\xd6\x9f\x41\x01\xb1\xc5\x3b\x3e\x16\x10\xdc\x05\x81\xd8\x58\x23\x45\x39\xda\x51\x55\x74\x6f\x3f\x06\xd2\x62\x1c\xdd\x60\xd6\x1c\xc5\x87\x31\x14\x5b\xf0\x53\x60\xc1\x5e\xec\xcd\xfe\x7e\xf8\xb9\xc1\xcb\xd4\xc0\x6b\x6d\x62\xeb\xf4\xf9\x4b\x48\x63\x6c\xe8\x13\x0c\xc9\xbb\xb7\x0e\x7e\x48\xe8\x4f\xc5\x47\xf9\x54\x76\xf5\xd1\x2c\xa7\xbc\xbd\xff\x30\x25\xcd\xc7\x77\x90\xf0\xb2\xab\xc4\xe9\x95\x91\x51\x76\x6d\x25\x57\x5e\xb6\x9a\xcb\x19\x8b\xc6\x43\x28\x04\xb9\x53\x2c\x16\xe7\xe1\x84\x9f\x07\x3c\xa6\xc6\x8c\xb5\x17\x32\xf0\x30\x8d\x0c\xff\xe0\xfe\xa7\x36\xc2\x26\xe6\xa0\xd5\x42\xfd\x0b\x78\xeb\x12\x7c\x35\xd8\x3a\x78\x8f\x24\xdf\x87\x79\xf3\x33\xf9\xdb\x88\xec\x31\x3c\x90\xdf\xd4\xea\x2c\x92\xac\x8c\x16\xf5\x50\x05\xe7\x49\xd7\xc7\x79\x6a\x8f\x89\x91\x8e\x68\xa9\x4b\x3c\x6a\x97\xa3\x2f\xbe\x81\x60\x77\x06\xb5\x3c\x7e\x7b\x9b\xfa\xd5\x02\xcd\xea\xf3\x8f\xd3\x1e\xea\x85\x90\x24\x13\x9b\xe1\x53\xd1\xf3\x98\xba\x1c\xd7\x63\xf8\xdf\xee\xd9\xbd\x67\xff\x3a\x99\xa2\x65\xee\xa9\x85\xce\xc6\x18\x2c\x90\xc6\xf5\xee\xc6\xd9\xaf\x91\xb2\x6e\x5b\x99\xd4\xeb\x5c\xc5\x63\xf2\x63\xe1\xe4\x38\xfc\x09\x00\x00\xff\xff\xb1\x59\x01\xf8\x7d\x0e\x00\x00")

func compiledPrototypenativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypenativeAbi,
		"compiled/PrototypeNative.abi",
	)
}

func compiledPrototypenativeAbi() (*asset, error) {
	bytes, err := compiledPrototypenativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypenativeBin = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledPrototypenativeBinBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypenativeBin,
		"compiled/PrototypeNative.bin",
	)
}

func compiledPrototypenativeBin() (*asset, error) {
	bytes, err := compiledPrototypenativeBinBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeNative.bin", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"compiled/Executor.abi": compiledExecutorAbi,
	"compiled/Executor.bin": compiledExecutorBin,
	"compiled/Extension.abi": compiledExtensionAbi,
	"compiled/Extension.bin": compiledExtensionBin,
	"compiled/ExtensionNative.abi": compiledExtensionnativeAbi,
	"compiled/ExtensionNative.bin": compiledExtensionnativeBin,
	"compiled/IMeterNative.abi": compiledImeternativeAbi,
	"compiled/IMeterNative.bin": compiledImeternativeBin,
	"compiled/Measure.abi": compiledMeasureAbi,
	"compiled/Measure.bin": compiledMeasureBin,
	"compiled/Meter.abi": compiledMeterAbi,
	"compiled/Meter.bin": compiledMeterBin,
	"compiled/MeterERC20.abi": compiledMetererc20Abi,
	"compiled/MeterERC20.bin": compiledMetererc20Bin,
	"compiled/MeterGov.abi": compiledMetergovAbi,
	"compiled/MeterGov.bin": compiledMetergovBin,
	"compiled/MeterGovERC20.abi": compiledMetergoverc20Abi,
	"compiled/MeterGovERC20.bin": compiledMetergoverc20Bin,
	"compiled/MeterNative.abi": compiledMeternativeAbi,
	"compiled/MeterNative.bin": compiledMeternativeBin,
	"compiled/NewMeterNative.abi": compiledNewmeternativeAbi,
	"compiled/NewMeterNative.bin": compiledNewmeternativeBin,
	"compiled/Params.abi": compiledParamsAbi,
	"compiled/Params.bin": compiledParamsBin,
	"compiled/ParamsNative.abi": compiledParamsnativeAbi,
	"compiled/ParamsNative.bin": compiledParamsnativeBin,
	"compiled/Prototype.abi": compiledPrototypeAbi,
	"compiled/Prototype.bin": compiledPrototypeBin,
	"compiled/PrototypeEvent.abi": compiledPrototypeeventAbi,
	"compiled/PrototypeEvent.bin": compiledPrototypeeventBin,
	"compiled/PrototypeNative.abi": compiledPrototypenativeAbi,
	"compiled/PrototypeNative.bin": compiledPrototypenativeBin,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"compiled": &bintree{nil, map[string]*bintree{
		"Executor.abi": &bintree{compiledExecutorAbi, map[string]*bintree{}},
		"Executor.bin": &bintree{compiledExecutorBin, map[string]*bintree{}},
		"Extension.abi": &bintree{compiledExtensionAbi, map[string]*bintree{}},
		"Extension.bin": &bintree{compiledExtensionBin, map[string]*bintree{}},
		"ExtensionNative.abi": &bintree{compiledExtensionnativeAbi, map[string]*bintree{}},
		"ExtensionNative.bin": &bintree{compiledExtensionnativeBin, map[string]*bintree{}},
		"IMeterNative.abi": &bintree{compiledImeternativeAbi, map[string]*bintree{}},
		"IMeterNative.bin": &bintree{compiledImeternativeBin, map[string]*bintree{}},
		"Measure.abi": &bintree{compiledMeasureAbi, map[string]*bintree{}},
		"Measure.bin": &bintree{compiledMeasureBin, map[string]*bintree{}},
		"Meter.abi": &bintree{compiledMeterAbi, map[string]*bintree{}},
		"Meter.bin": &bintree{compiledMeterBin, map[string]*bintree{}},
		"MeterERC20.abi": &bintree{compiledMetererc20Abi, map[string]*bintree{}},
		"MeterERC20.bin": &bintree{compiledMetererc20Bin, map[string]*bintree{}},
		"MeterGov.abi": &bintree{compiledMetergovAbi, map[string]*bintree{}},
		"MeterGov.bin": &bintree{compiledMetergovBin, map[string]*bintree{}},
		"MeterGovERC20.abi": &bintree{compiledMetergoverc20Abi, map[string]*bintree{}},
		"MeterGovERC20.bin": &bintree{compiledMetergoverc20Bin, map[string]*bintree{}},
		"MeterNative.abi": &bintree{compiledMeternativeAbi, map[string]*bintree{}},
		"MeterNative.bin": &bintree{compiledMeternativeBin, map[string]*bintree{}},
		"NewMeterNative.abi": &bintree{compiledNewmeternativeAbi, map[string]*bintree{}},
		"NewMeterNative.bin": &bintree{compiledNewmeternativeBin, map[string]*bintree{}},
		"Params.abi": &bintree{compiledParamsAbi, map[string]*bintree{}},
		"Params.bin": &bintree{compiledParamsBin, map[string]*bintree{}},
		"ParamsNative.abi": &bintree{compiledParamsnativeAbi, map[string]*bintree{}},
		"ParamsNative.bin": &bintree{compiledParamsnativeBin, map[string]*bintree{}},
		"Prototype.abi": &bintree{compiledPrototypeAbi, map[string]*bintree{}},
		"Prototype.bin": &bintree{compiledPrototypeBin, map[string]*bintree{}},
		"PrototypeEvent.abi": &bintree{compiledPrototypeeventAbi, map[string]*bintree{}},
		"PrototypeEvent.bin": &bintree{compiledPrototypeeventBin, map[string]*bintree{}},
		"PrototypeNative.abi": &bintree{compiledPrototypenativeAbi, map[string]*bintree{}},
		"PrototypeNative.bin": &bintree{compiledPrototypenativeBin, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

