// Code generated by go-bindata.
// sources:
// compiled/Executor.abi
// compiled/Executor.bin-runtime
// compiled/Executor.opcode
// compiled/Extension.abi
// compiled/Extension.bin-runtime
// compiled/Extension.opcode
// compiled/ExtensionNative.abi
// compiled/ExtensionNative.bin-runtime
// compiled/ExtensionNative.opcode
// compiled/Measure.abi
// compiled/Measure.bin-runtime
// compiled/Measure.opcode
// compiled/Meter.abi
// compiled/Meter.bin-runtime
// compiled/Meter.opcode
// compiled/MeterGov.abi
// compiled/MeterGov.bin-runtime
// compiled/MeterGov.opcode
// compiled/MeterNative.abi
// compiled/MeterNative.bin-runtime
// compiled/MeterNative.opcode
// compiled/Params.abi
// compiled/Params.bin
// compiled/Params.bin-runtime
// compiled/Params.docdev
// compiled/Params.docuser
// compiled/Params.opcode
// compiled/Params.signatures
// compiled/ParamsNative.abi
// compiled/ParamsNative.bin
// compiled/ParamsNative.bin-runtime
// compiled/ParamsNative.docdev
// compiled/ParamsNative.docuser
// compiled/ParamsNative.opcode
// compiled/ParamsNative.signatures
// compiled/Prototype.abi
// compiled/Prototype.bin-runtime
// compiled/Prototype.opcode
// compiled/PrototypeEvent.abi
// compiled/PrototypeEvent.bin-runtime
// compiled/PrototypeEvent.opcode
// compiled/PrototypeNative.abi
// compiled/PrototypeNative.bin-runtime
// compiled/PrototypeNative.opcode
// DO NOT EDIT!

package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _compiledExecutorAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x55\x3d\x6f\xdb\x40\x0c\xfd\x2f\x9c\x35\xb5\x45\x51\x68\x33\xd2\xa5\x43\x01\x4f\x5d\x82\xc0\xa0\x75\x4c\x7a\xa8\x4c\xaa\x77\x3c\x25\x42\x90\xff\x5e\xc4\xd2\xf5\x24\xeb\xa3\x6e\x6a\x58\xe8\x66\xc0\x8f\x4f\x8f\x8f\x8f\xbc\xdb\x67\x28\x84\xbd\x22\x2b\xe4\xea\x02\x65\x60\xb9\x0a\xea\x21\xbf\x7d\x06\xc6\x03\x41\x0e\x90\x81\x36\xd5\xeb\x2f\x34\xc6\x91\xf7\xf0\x72\x97\xc5\x3f\xb1\xaa\x9c\xd4\xe4\x3c\x64\x20\x41\x4f\x6b\xad\x21\x56\xab\x4d\xe2\xd8\x37\x4a\xfe\xfd\x3b\x78\xc9\x12\x88\xb7\xf2\x48\xae\x87\x11\x29\x8f\x1f\xa9\xb0\xc1\x7d\x49\x90\xdf\x63\xe9\x29\x03\xaf\xa8\xf4\x35\x28\xee\x6d\xf9\xca\x9a\x43\x6d\xe9\x31\x15\xde\x07\x2e\xd4\x0a\x1f\xd9\x67\x3b\x1b\xab\xbf\x91\xc0\x3a\xdd\x41\x22\x0f\x96\xf5\xd3\x25\x65\x75\xd5\x63\xc7\x77\x51\xd7\xa2\xf5\x8e\x6a\xf9\x41\x9b\x04\x4d\xea\xcf\xd2\xc8\xc2\x11\xf4\x97\x06\x4e\x98\xf3\x7b\xac\x49\x5f\xe5\xa4\x12\x8f\xe5\x4c\x34\xd4\x1e\x68\x7b\x84\x90\x19\x9a\xfc\xf1\x43\x3f\x1d\x2d\xcd\xa4\x17\x09\xf4\x33\x88\x0b\x87\xd1\xac\x12\xa0\x75\x14\xcb\x38\xe9\x39\x1c\x3d\x51\x11\xb4\xaf\xa8\x0d\x63\x42\x28\xba\x07\xd2\x45\x35\x06\x15\x4f\xac\x59\x3d\x37\x49\xdd\x6e\x61\x29\x7b\xab\x61\xcc\x55\xa2\x35\xdf\xcc\x19\x46\xef\xe6\x9c\x1e\x66\xe7\x4f\x9b\xdd\x6f\xff\x4a\xcd\x15\xc2\xea\xb0\x98\x6a\xaf\x37\x03\x55\x2c\xbe\x7f\x13\xb5\xfc\x70\x93\x0a\xd6\x18\x46\x5c\xe6\x2f\x9f\x97\x53\xd3\x46\x66\x25\x91\x67\x99\x6a\xe8\x7f\x33\xb5\xbb\x49\x2b\x5f\xf8\x09\x2b\xeb\x81\x89\x33\x77\xfe\xd2\xcf\x3a\xb2\x70\x73\x90\xe0\xa7\x9c\xb5\x6c\xe8\x89\x4c\xec\xe7\xe4\x25\x9a\xf4\x39\xeb\x55\x75\x84\x31\xcc\xed\x47\x97\x46\xb3\xed\x98\x13\x88\x6a\x62\x7d\xab\xd0\xe5\xfb\xfd\x76\x99\x9b\x11\xef\x3f\xc9\x8c\x7b\xb6\x31\xe6\xe2\x52\x47\x8b\x39\x14\x7c\xf7\x2b\x00\x00\xff\xff\xa9\x52\x06\x45\xb3\x0a\x00\x00")

func compiledExecutorAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExecutorAbi,
		"compiled/Executor.abi",
	)
}

func compiledExecutorAbi() (*asset, error) {
	bytes, err := compiledExecutorAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Executor.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExecutorBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x0d\x96\xf2\x2a\x0f\xde\x52\x12\xc8\x0f\xcb\x69\x29\xec\x7f\x09\xdf\x09\x50\xad\x53\xb5\xd6\xb9\xe3\xcc\x3d\xdf\x1d\xcf\xab\x1e\x6c\x21\xe4\xf7\x49\x48\x5f\x01\x03\x81\x08\x4c\x02\x10\x83\x20\x08\x02\x4c\x95\x55\x00\x20\xb0\x66\x40\x78\xf3\x2f\x01\x44\x09\x75\xfc\xa1\x18\x48\x80\x09\x63\x0c\x09\x31\xfa\x3a\x73\x64\xf5\x51\x24\x2b\x69\x2e\xd2\x46\x11\xcb\x18\xb5\x05\x43\xa9\xda\x47\x63\xed\xa3\x81\xca\xc2\x33\x52\x1f\x4d\x34\x46\x4b\x85\x0c\xa9\xb4\x51\x2a\x63\x34\x2d\xd1\xd0\xa2\xb5\xd1\x10\x42\x1f\x9d\xb0\xce\x22\x56\xfb\xe8\x62\x63\x94\xc3\x84\xd3\xd2\x47\x23\xce\x63\xd4\xc2\x1c\xe6\xa5\xcf\x10\x63\xee\xa3\x45\x19\x2b\x69\xdf\x45\xb4\x41\x59\x9d\x40\x34\xd1\xdc\x47\x33\xb0\xf2\xec\x5c\x34\xa8\x0b\xcf\x21\x1a\x20\xfb\xae\xfd\x97\xeb\x38\x37\x8e\x57\x76\xfe\x1b\x04\x81\x60\xbe\x2f\x30\x30\xe7\xff\x85\x7f\x47\x7f\x28\x09\x04\x08\xfc\xde\x44\x09\x13\x70\x7b\x09\x02\xe3\xcc\xe2\xb4\x44\x60\x34\xb0\xe0\xab\x63\x42\x59\x3f\x0d\x5d\xfe\x7e\xaf\x11\x72\x7f\x5d\xc7\x12\x8d\x99\xc6\xfd\x09\x21\x24\xa8\x61\xb3\x27\xa4\x69\xb7\x27\x0c\xae\x4e\x1c\xf3\xcd\xda\x24\xe0\xb4\xf6\xf7\xcd\x1a\x78\xb4\x02\xcf\xfb\x15\x7c\xc7\x3f\xc7\x35\xae\x4e\x39\xc0\x96\x8a\x54\xf6\x54\x64\xbc\x4f\xc5\xca\xdd\x87\x2b\xa8\xea\x0d\x6f\x4c\x74\x4f\xdf\xbd\xb1\x8d\xbc\xf4\xcc\x5e\xcf\x5c\xbb\x59\x43\xee\xcb\xcc\xf8\xc1\x78\xdc\xeb\x90\x85\x0f\xd0\x09\xab\x0e\x1b\x42\x30\x62\xb2\x60\x68\xc8\x78\xab\x67\x06\x8c\x57\x99\xb8\x3d\x74\x8b\xe0\xd9\xaf\xc7\x2e\x69\x9a\xd0\xad\xda\x08\xda\xfd\x16\x61\xcc\xd1\x25\xdc\xe4\x47\x26\x2e\x3f\x1e\x12\x4d\xed\x9f\x0d\xbd\xc4\xe6\xf1\xfa\x5c\xb9\x8c\xb9\x82\xaf\x2d\x8d\x1f\x6d\x7d\xb7\x10\xf7\xaf\x13\x84\x5b\x3b\x6c\xf6\x30\x33\x24\x5b\x67\xbf\xbe\x9e\x58\x09\x95\xbd\x7e\x86\xf0\x40\x3f\xbf\x63\x25\x2f\xe9\xb7\xe5\xbc\xb3\xa0\x10\xea\x9e\xc2\x79\xfa\x19\x0a\x37\x52\x26\xd7\x8f\x9b\x91\x16\xf9\xb0\x02\x36\xa9\x3a\x37\x23\x0c\xee\x77\x0e\x77\x59\xf6\xe8\x68\x90\xc2\x98\x17\xb7\x5a\x6d\xc1\xe5\x6a\x31\xa8\xaf\xd0\xbd\xd8\x45\x1f\xb0\xdd\x41\x1b\x8e\x64\xd3\xaf\xde\xf0\x91\x27\x3e\xf4\x88\xa1\xc4\x1d\x27\x23\xa6\x9f\xf3\x88\x48\x0b\xef\xe4\x19\x49\xf7\x54\xc4\x07\xf2\x3c\xd2\x18\xe4\x18\xf6\x2b\xb0\xed\x57\xb0\xe5\x07\xf7\x99\x14\xf7\x54\xa4\x7d\xfc\x89\x73\x79\x73\x9f\x33\xa5\xfd\x0a\x39\xef\x56\x60\xf8\x01\xdb\x5d\xa9\x20\x20\xbb\xd5\xc6\x3b\xb1\xff\x81\x16\x3a\x9d\x7e\x85\x5b\x46\xf3\x9d\xe4\xd7\xf8\x37\x6a\xef\x7e\x9f\xaf\xd4\x7f\x05\xe4\x98\xfa\xf7\x66\x51\x8e\x0d\x7d\x64\xf5\x7e\x0d\x29\x42\xa7\x95\xc1\xa8\x53\xf5\xfc\x4a\x6b\x32\x72\x1e\x89\xfa\x5e\xe2\xd8\x8b\xf3\xcf\xe8\xe7\xa3\x8d\x7b\x02\xbe\xf8\x8b\xb1\xef\x83\xdd\x39\x6f\x1d\x62\x73\x43\x80\xce\x53\xad\x60\x39\x68\x9a\xde\x05\xd9\x83\x0a\x88\xee\xdf\xf6\x11\x50\x80\xe2\x36\x42\x6a\x15\x52\x96\x24\x59\xa3\x24\x29\x61\x22\x50\x96\x22\xb3\x14\xa9\xaa\x52\x08\xa4\x2a\x11\x28\x09\xab\x48\x95\x59\x58\x22\x81\xa0\x82\x82\xd2\x75\x36\xad\x52\x55\x84\x95\xbe\x43\x7b\xd7\xae\x07\x9a\xb6\xac\x12\x6d\xef\x1f\xc0\x10\xcf\xa4\xba\xca\xd3\x90\xa3\xa1\x4b\x14\xa8\x5b\xb9\x05\x97\x2c\x10\x6a\x02\x66\x86\x55\x77\x3d\x56\x3c\xd4\xdf\x61\x8d\xd2\x56\x85\xd0\xbe\x3f\x59\xa1\xdf\x75\x5d\xa3\x23\x48\x10\xc3\x00\x67\xf6\xea\xb6\x52\x96\x04\x6d\xbd\x4d\x76\xe6\xd6\x63\xa7\x66\xd2\xaa\x0a\x88\x9c\x97\xa2\x5c\x04\x2a\xea\x4c\xc2\x8b\x16\xc8\x5c\x42\xca\xac\xd3\x5c\x29\x86\x39\x07\x94\xac\x85\x33\x55\x5b\x8c\x51\x15\x97\x49\xa6\x7c\xf1\x3c\xa0\xf5\x56\xdf\xde\xd7\xa5\x2e\xc5\xaf\x9a\x34\x79\x0e\xd3\xfd\x43\x38\xe3\xb7\x1e\x58\xf3\x1d\x4c\x9e\xb6\xf7\xd8\xfe\x9e\x73\x1e\xfb\x3a\x17\xe6\xc7\xbe\x72\x73\xd5\xf2\xd2\x55\xe5\xe0\xaa\x87\xfe\xeb\x0d\xea\x1b\xe2\xe2\xd8\xd0\x6e\xc3\xbc\xee\xff\xc6\x9c\x04\xa1\x61\x1e\x4a\x2d\xba\x9d\xc2\x61\x7b\x14\x46\xaf\xae\xd3\xc6\x2d\xf7\xea\x80\x23\xf4\x86\x52\x93\x23\x98\x76\xbd\xe7\x02\x1c\x7d\x7d\x0b\x4c\x09\xd7\x18\x38\xee\x72\x0b\x69\x28\x2f\x5d\x74\x87\x86\xee\x24\xcf\x1e\x9a\xd5\x32\xa5\xc1\xc9\x35\xee\xfa\xac\xd8\xe6\x98\x98\xd5\x9c\x96\x30\xf2\x83\x8e\x19\xe7\x0d\x66\x74\xdd\xd3\x11\xd9\x6c\x89\x5f\x22\xdb\xa9\xb8\x86\x23\x0f\x13\x84\x24\xe1\x73\x11\x07\xd3\x51\xc4\xf1\x4f\x15\x41\xc9\x92\xb6\xb1\xe5\x7e\x3c\xb9\xb1\xec\x27\x51\xa2\x71\x9d\x9a\x0e\x74\xa1\x6d\xf6\x5f\xfe\xf6\xfe\x93\x44\x61\x29\x7e\x85\x46\x4d\xdf\xd9\xff\x40\x40\xa7\x2c\xf6\x1f\x8c\x95\x0d\xeb\xdd\x4a\x40\x10\xa6\xe9\x93\xfc\xb7\x43\xfe\x7f\xd1\x37\x02\x61\x35\x49\x1a\x34\x6a\xb8\xb7\xde\x31\xff\x6b\x3d\x42\xac\x03\x03\xc2\xe0\xc9\x4c\xcb\x07\x79\x32\x1f\xa2\xc0\x28\x55\x2a\x81\x2c\x82\x52\x34\xed\xb9\xb4\xe5\xcc\x6b\x3c\x89\xa3\xd6\xb2\xf5\xdf\xd7\x9c\xf7\x46\x7b\x70\xcd\x3b\x18\x7e\x5b\x83\xd7\x9a\x4f\xd7\xe6\xee\xeb\x3b\x0a\x63\x6e\x31\xea\xfa\xfb\x69\x64\x98\x46\x05\xe7\x1c\x3e\x1c\x31\xe7\x2c\x3a\xcc\xc8\x46\xa7\xd1\x21\x61\x78\x80\x0e\xf1\xf7\xd0\xa1\xa0\xc4\xe6\x23\xdf\x40\x86\x3b\x7d\xbd\x8f\x0e\xe1\x9a\x3f\xb6\xf7\x53\xfa\xb7\x89\x35\x0b\xa6\x0f\xda\xb5\x9e\x8d\x35\x1a\x05\x95\x44\x85\xf5\x0e\x2f\xcf\xc4\x9a\x17\x7c\x1d\xae\x3c\xf9\xa8\xff\xe7\x43\x9e\x94\xe6\xe9\x9e\xf8\xb7\x77\x78\x62\x10\x7e\x39\x43\x7d\xec\x4b\x04\xa1\x44\x61\x6d\xbe\xa7\x79\xe0\x5f\xa3\xf5\x21\x95\x3c\x0f\x6d\x29\xe5\x93\xf5\x91\xe5\x0d\xb4\xd0\x2b\x24\x22\xb5\x5f\x25\x4a\x20\x41\xaa\x23\xb8\x6d\x7d\x44\x49\x50\x82\xc6\x51\x4d\x41\x9f\xd9\xbf\xbd\xea\xc5\x5e\xa9\x8f\x44\x0a\xa1\x8f\x5e\xb3\x8d\x57\xcf\x91\xd4\xde\x38\xdd\x1d\x15\x20\x30\xe7\xe3\x4f\xe9\x90\x3c\x3b\x77\x1e\x14\x60\xfc\x7a\x36\xd9\xcf\x67\x2c\x40\x80\xb0\x66\x62\x71\xe4\xf8\xbd\xc2\x79\xef\xec\xc7\xad\x97\x3c\x52\xaf\xc8\xac\x4e\xea\x19\x22\xe3\xd0\x10\x58\x6b\xfb\x37\xe7\x3f\xed\x1e\x08\x4e\x81\xdf\x73\xad\x5a\xee\xcf\x76\xcc\x73\x02\x62\x74\xdb\xb0\xd8\x3e\xc1\x08\xd5\x98\xe9\xe6\xc4\x00\xf8\x81\xa4\x5b\x86\x09\xc3\xf3\x86\x5e\x0d\x7b\x72\x76\xf0\x00\x99\xbf\x5e\xcd\xb8\x37\xb6\xa2\xf9\x96\xc8\x7e\xce\x9b\xd7\x43\xfb\x8c\xca\x0a\x2d\xbe\x05\x41\x8d\xbd\x5e\x39\x2c\xd6\x6d\x35\x78\xf4\xeb\x59\xd6\xab\xde\xbc\xc0\xbd\xda\x43\xa4\xe7\xa7\xb1\xe7\x7c\xea\x46\x46\xe8\x21\xf2\x30\xa6\x22\x85\x90\xba\x96\x7d\xb9\xbf\xe9\xc5\x7e\xec\xcb\x19\xec\xa9\x53\x83\xed\x79\xee\x05\x97\xbf\xa9\x79\xb7\x88\xfa\x0e\x62\xde\x71\x75\x83\x6c\xef\x70\x7c\x5b\x69\xa5\xfd\xec\x76\x3b\xfb\xeb\xbb\xbe\xae\x7a\x86\x53\x5b\x6a\xe2\x8e\x1a\xcc\x67\x70\xbb\x80\xec\x67\x58\xce\xcd\x60\xfb\x19\xca\x99\xda\xf5\x74\x98\xe1\x7c\x92\xa3\x79\x4b\x0d\x75\xaf\xbd\xf5\xe1\x82\x48\x32\x8f\x5c\x09\x29\xb0\xf5\x33\xf9\x9e\x69\xd9\x25\x7b\xd3\xaa\x4b\x9a\x73\xe5\x2c\x79\x99\x96\x12\x92\x4d\x12\x27\x08\xc0\x61\x4a\x46\xc6\x98\x73\x99\x08\x96\x6c\xa4\xcb\x9c\x31\x80\x72\x9c\x53\x51\xcb\x9a\x03\x4e\x37\xd5\xea\xad\x77\x79\x23\x2b\x39\xca\x47\x0c\xba\x6f\xf2\x7d\x5d\x72\x13\x44\x5a\x96\x2f\x15\xc1\x53\x39\xd9\x35\x4b\x41\x8f\x5b\x9f\xc3\x58\x78\xba\x22\x36\xd0\xd4\x15\x41\xf5\x0c\xb0\xe1\xa8\x70\x83\xb1\x1e\xa0\xf6\xb3\x92\x38\x38\x83\xa2\xf3\xf5\xd7\x4f\x60\xe6\x8b\x3c\xa3\x7e\x30\x26\xd3\x61\x85\xf3\x3e\x36\xbe\x91\x66\x6e\x48\x18\x25\x6a\xda\xca\xb3\xe1\xed\xe8\x59\xaa\x04\xb1\xf3\xb6\xf5\xa2\x3c\xf1\x22\xd3\x5f\xcb\x83\x5e\xf7\xc9\x67\xcf\xe5\x6a\xcc\x33\xc7\x18\xe6\x22\x22\xd5\x94\xe6\x6c\x93\x32\xa5\x50\x52\x2a\x44\x10\x27\x37\xa3\xc2\x65\x0e\x0b\x2d\xd1\x78\x31\x91\x4a\x05\x43\xd6\x32\xc5\xdb\xca\xcb\x77\xa4\x71\xe2\x5c\xee\x37\x91\xed\xa8\x53\x20\x57\xfd\x53\x35\xd9\x3d\x86\x2d\x6e\x57\x04\x2e\xd7\x76\x6e\x1f\x1f\x70\xfa\x5f\x59\xa7\x18\x52\x90\xf9\x93\xf9\xc5\x74\x3e\xff\x7f\x96\xcd\xbf\x24\x05\x82\x14\x26\xfb\x45\x8d\x8f\x04\x97\x7c\x17\x55\x3f\x88\x05\x8e\x4f\xc7\xee\x68\x3d\xab\x29\xdc\xaf\x9d\xbc\xa8\xf5\x9d\xcf\xcf\xfa\xed\xee\xf1\x39\xf4\xef\x7f\xaf\x56\x76\x89\xfb\xf6\xc9\x5e\xa2\x63\x5b\xb9\x23\xbb\x1b\xeb\x79\xc3\x56\x3a\x3f\xde\xb3\x93\x5f\x97\xdf\xa9\x9e\xa1\xf7\x74\x74\xe4\x88\x3f\x79\x96\xf4\x53\x59\xd4\x33\xdd\x78\x55\x5f\x5f\xc0\x16\x88\x49\xd3\x4d\xde\xf4\x87\xd1\xbc\xa0\xf3\xe8\x83\x58\xfe\xf0\xb4\xe4\x10\xcb\xaf\x98\xa4\x21\xc5\x9b\xfe\xc0\xb7\x51\xe3\xad\x7c\x8f\xfa\x03\xff\xc3\xf2\x2f\x62\xf9\x28\xfc\x7f\x83\xe5\xe7\xe5\x6f\xf5\x57\xfc\x04\x96\xff\x4e\xc4\x78\xd8\x0b\x78\xc1\x16\x59\xcb\x1f\xc7\x16\xac\xae\xc7\x41\x59\x77\xbd\x01\xff\x42\x1c\xbe\x04\xf9\x0f\x87\x3f\xd1\xd8\x87\x9d\xb0\xeb\xfb\x77\xa4\xf8\xb8\x83\x76\xdb\xb7\xd5\xe4\x54\xe0\x93\xf9\xe9\xb1\x67\xf1\x4c\xb4\xaa\x8f\x2f\xbd\x9b\x5f\xfb\x39\x58\xd2\x20\x22\xe9\x56\x56\x3f\x8e\xb9\xdf\x38\x71\x78\x53\x2b\xfe\x91\x6e\xe5\x53\xa7\xd2\xef\xf2\x84\xd6\x5e\xe6\x71\x06\xfd\x72\xb7\x32\x56\x4c\xdb\x6e\x65\x2c\xed\x09\xbf\x83\x6e\xe5\x76\xd7\x37\xbb\x95\xb1\xd4\xfc\xb8\x5b\x79\xd5\x1c\x80\xeb\x53\xc5\x10\xfa\x89\x93\x09\x4f\x75\xe8\xd6\xb0\x98\x9a\x3f\xd8\x13\xf5\xc2\x13\x2f\xcf\x23\x49\x72\x84\x7b\x79\x02\x86\x6f\x3b\x3a\xf6\x91\xe6\x2c\xed\x47\x88\xf6\xc7\xb2\xad\x27\xd1\xf2\x0c\xed\x87\xe8\xaf\x71\xeb\xd9\x13\x16\xcf\x9e\xe8\x3a\xd7\xaf\x78\x2e\xb3\x5f\x3b\x18\x08\xca\xfc\x97\x90\xcd\x8d\x64\xea\x3f\x51\x61\x74\x4e\x6a\xe5\xae\xe7\x3e\x67\xd4\xa4\x20\x7c\x6e\x67\xaa\x67\xfb\x83\xce\x7a\x5f\x09\x44\x89\x6c\x91\xb9\x3f\x85\xdd\xf6\x11\xb6\x9d\xa7\xdf\xf9\x1f\x28\x2e\xbd\x4a\x5d\x36\x9f\x78\x06\xfd\x13\x35\x85\x4b\xcf\xd3\x5d\xef\xab\x06\x61\x46\xee\xf1\x83\xb0\x7e\x79\x3e\xd7\x7d\xf3\xe5\x57\x82\x99\x35\x2c\xe3\x54\xa0\xf4\x6f\xe3\xba\xeb\xeb\x5f\xa3\x4b\x96\xa7\x30\xc7\x68\xff\xe9\xd2\xab\x6b\x9c\xd2\xa5\x80\xcb\x13\x5d\x0a\x01\x5f\xd3\xa5\x4d\x7d\x80\x1a\x0e\x1a\xfe\xbf\x3f\xbd\x33\x3c\x74\x60\x60\xad\x85\x67\x88\xa9\x3f\x4b\x3f\xee\x7e\x15\x3f\xdd\x43\x3d\xd7\xe7\xcc\x1a\xc2\x6a\xff\x7f\x8c\xd1\x8a\xad\x28\xa4\xd4\xfb\xfe\x1a\x3d\x8e\xea\x82\xf9\x0a\x6a\xcc\x8d\xa6\xac\x2b\x05\x30\x7a\x63\xfc\x17\x23\x5c\x7f\xd5\x84\xad\x5b\xc5\xaf\x41\xc4\x31\xee\xee\x9d\x5a\x37\x21\x5f\x51\xda\x06\x77\x21\x85\xa9\x79\xec\xb5\x6f\xc5\x47\x96\xb8\x76\xb4\x2c\xd7\x8e\x96\x56\xcd\xa4\x50\xa7\xc6\x8f\xb9\x75\x11\x8e\x55\xaa\x0c\xd9\xac\x98\x78\x3c\x87\x0a\xd8\xe6\x28\xdb\x39\xfc\x1d\x60\x42\x61\x21\x9d\x74\x52\x0a\xc0\x46\xb0\x98\x58\xc5\x9c\x63\x99\x73\xcc\x9a\xa6\x38\x19\x70\xad\xa9\x44\x02\x0a\x51\x71\xd2\x49\xa6\x14\x43\x84\x9c\xb9\x44\x5c\xca\x94\xc8\x02\x41\x95\xb4\x54\x67\xfd\xff\x02\x00\x00\xff\xff\xa1\x85\x02\x7f\x52\x48\x00\x00")

func compiledExecutorBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExecutorBinRuntime,
		"compiled/Executor.bin-runtime",
	)
}

func compiledExecutorBinRuntime() (*asset, error) {
	bytes, err := compiledExecutorBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Executor.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExecutorOpcode = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x69\x76\xe3\x38\x0e\xbe\x8a\x8e\xc0\x7d\xf9\x49\x91\x54\x4d\xa6\x53\x65\x77\x1c\xd7\xf4\xf4\xef\x39\x44\x8e\x3f\x4f\xd4\xc6\x4d\xb2\x36\x3b\x56\x3a\xf5\x5e\x52\xb1\x4c\x91\x20\x08\x80\xc0\x07\x2e\xe7\xeb\xe5\x5f\xb0\x00\x1f\x02\x14\xdd\x9f\x04\x14\x3f\x2f\xef\xa7\x37\x5b\x68\xf5\xfa\xfa\x5b\xbd\x5e\x6d\x61\xae\x67\x58\xbc\x5c\xfe\xb6\x6f\x27\x57\x0e\x15\xe0\x03\x82\xe2\xdf\xd7\x9f\xe7\x97\xfe\x45\xd0\x14\x7b\xb3\xbf\xed\xdb\xbb\xfb\xce\xd8\xcb\x7b\x71\x3e\x9d\xfb\x77\x10\x41\xb2\x29\xd5\x3f\x01\xde\xfb\xfa\x64\xac\x3e\x9d\xff\xeb\x3d\x7a\xb3\xef\xd7\xb7\x5f\xc5\xe5\xbd\xad\x65\x94\xd8\xfe\x89\x23\xdb\xa8\x77\x75\x79\xf9\xdb\x16\xaf\xef\x7d\x53\xaa\x4a\x08\xee\x8a\xbe\x9e\x94\x69\xca\x49\xd7\xb3\x95\xff\x8a\xcb\x7f\xd4\x19\x16\xe6\xe5\xb7\xab\x8c\x14\xe0\xa3\x6a\xff\x15\xea\x97\x19\x7a\x5e\x7f\xa3\x20\x21\x58\xc2\xc2\xfe\xd9\x53\x58\x92\x96\xc2\xa0\x20\x44\xc2\xca\xd2\x32\xbf\x24\x84\x36\x5b\x54\x18\x88\x6d\xc5\x83\xa2\xa4\xca\x15\xc5\xc8\x1a\x5a\x42\x14\x14\x95\x28\x5b\xd4\x56\x40\x03\x69\xfd\xa2\xc8\x66\x8b\x4a\x43\x04\x14\x44\xf8\x45\x31\xc6\xb9\xa2\x0a\x56\x25\x63\xa2\x0a\x8a\x1a\x91\x2d\x4a\xb1\x82\xca\x04\x45\x09\x2c\xb3\x45\x05\x2e\x71\x69\x02\x02\x08\xd1\xb9\xa2\x96\x53\x58\x21\x1e\x8c\x00\x11\x59\x66\x55\x0a\x30\x2e\x51\x19\x14\xd5\x9d\x02\x0c\xa2\x3e\xad\x09\xd3\xfa\xa4\x57\xe8\x53\x45\x3d\xb9\x77\xa5\x03\xe1\xbf\x5c\xcb\xfa\x29\x2a\x94\x31\x9d\x6c\x5e\xbb\x5f\xa9\xec\x03\x4f\x5e\x6f\xfd\x73\xf2\xdc\x54\xd9\x51\x80\x80\xd7\x4e\xfd\x1b\xbb\xdf\xa8\x2b\x56\xd3\xdd\xfd\xb4\xf4\xd3\x76\x10\x53\x16\xd6\x8a\xed\x28\xeb\x08\x26\x1e\x5f\x7e\x9d\xde\x5d\xfb\xe9\x13\xd7\xdb\xc8\x22\xb4\x74\x99\xeb\x19\x77\x3c\xcf\xfe\x37\xf1\x6e\xd3\x9b\xb8\x07\x29\x9d\x6d\x7f\xaf\x65\xdb\xe7\xd6\x7a\xcd\x94\x00\x88\xd4\x72\x11\x80\x18\x0f\xec\x6c\x05\x7d\x06\x3b\x71\xff\x55\x3b\x96\xd1\xc7\x1b\xcc\x40\xf7\x65\x04\x2d\x57\x30\x42\x82\x83\x2b\x03\xad\xa2\xd1\x73\xb3\xde\x5c\x9e\x49\xbb\x82\x67\x1a\xee\xc8\xb3\x50\x15\x37\xf3\x83\x73\x3e\x57\x9a\xa5\xfb\x4a\x64\x86\xac\x97\xed\xd1\x2f\xa7\x4d\x86\x58\x29\x0d\xeb\xde\x9a\xa6\x85\xaf\xd7\x59\x73\x3d\xb3\x4d\x6f\xd3\xb5\xa6\xb3\x37\xdd\xcf\xc1\xc3\x44\x22\x9d\x2d\x74\xef\xb4\xc2\x8e\xbb\x97\x1d\xe5\xee\x9b\xa6\xca\x4e\xe2\x6e\xdb\x45\xd7\x4e\x53\x7e\x42\x0b\x86\x99\x2d\x9a\xde\x7a\x79\x1f\x28\x78\x7d\x8f\xf5\x1d\x29\xe8\x7b\x2a\x8e\xf0\xba\x6e\x8f\x4c\x37\x6c\xee\x59\x42\x6f\xa4\xd4\x81\x8f\x2e\x58\xac\x76\xbe\x72\x9e\xce\xde\x3b\x7d\x47\x82\xca\xda\x66\xa0\xe7\xf4\xc6\xc4\x6b\x9b\x10\xdf\xb2\xbf\x63\x5c\x5f\x4b\xc8\x1d\x04\x5c\xc1\x21\x08\x01\x85\xfd\xeb\xec\x9e\xcd\xf0\x01\x86\x21\x0a\x3a\x57\x3f\x96\x49\x37\xb3\x3f\x77\x98\xed\x90\x5d\x61\xb9\x31\xde\xd3\x72\xdf\x79\xb6\x7b\xc8\x74\x21\x74\xec\xfc\x2c\x99\x3e\x31\x4e\xa3\xc3\xdb\x83\x50\xaa\x23\x0f\xc2\xb4\x6d\xc2\x83\xc9\x5c\xf0\x16\x0c\x8d\x6c\x6d\x03\x8c\x89\x2c\x4f\xa7\x30\x75\x9c\xfc\xf3\xfa\x1a\xd7\x95\xe8\x58\x64\x65\xd2\xd8\xbf\xaf\x93\xe4\xfb\x8d\x6e\x4e\x50\xdd\x2f\xd8\xcf\x07\xb4\xef\xb5\x43\x24\x7a\x86\x44\xde\x6f\xc6\x34\xa2\x84\x08\x3c\x21\xb6\x5a\xcc\xf6\x72\xf0\xd6\x10\xe8\xfe\x9e\x3b\xb6\x64\xb9\x1a\x11\x28\x8f\xa3\x46\xb9\x31\x84\xc8\xd0\x0d\xb6\x87\x20\xbe\x82\x69\x64\x4f\xdb\xb3\xb3\x2d\x86\x94\xe0\x2d\x0c\xa1\x62\x05\x43\x84\x39\xb8\x14\x49\x0e\xb7\x30\x4d\xae\x08\x9a\x49\x69\x9f\x58\x8a\x4a\x24\xb7\x30\x44\xeb\xe5\x0c\xa1\xe0\x40\x7e\x55\x8e\x69\x08\x20\x31\x7f\x42\xd9\x80\x87\x6d\x9d\x48\x86\x41\xf1\x2a\xf7\x27\xf4\xa1\x40\x0c\xf1\xfb\x39\x83\x3f\xac\xd6\xea\x0f\x44\x99\xf7\x6c\x20\x6f\xe0\x53\x54\xa5\xeb\x45\xe8\x5d\x78\x5e\x4b\xe0\x67\x74\xb0\xfe\x25\x72\x7f\x82\xf8\x23\x00\xfe\xbd\xa8\x3a\x20\x20\xb6\x89\x43\x7b\xbb\xb4\xe5\x06\x2c\x6d\xc1\x89\x35\xe3\x9e\x84\x90\x31\x09\x01\x91\xaf\xf1\x04\x31\xbb\xe7\xc4\xe5\x0b\x4c\x89\xc2\x8e\x03\x19\xea\x46\xf7\x1a\xa3\x31\x6a\xdf\x2b\x41\xfd\x00\x37\x81\x09\xe6\x52\xad\xcd\x29\x81\x6c\xdf\xc9\xe0\x9c\x2f\x03\x35\xfa\x82\x64\x16\x50\xe2\x3a\xc0\x10\xa7\x4c\x32\xcd\x09\x93\xcc\x62\x85\x00\xa7\xcc\xb2\x92\x59\x56\x71\xce\x2c\x02\xac\xe2\x08\x01\x8e\x18\xe5\x8c\x55\xac\x64\x94\x11\x04\x18\xe4\x80\x03\x3e\xe9\x7d\x0f\x8d\x54\x9c\x31\xca\xd1\x3e\x6c\x0a\xad\xd2\x7a\x93\x15\x4d\x14\xa1\x9a\x04\x1f\x9f\x06\xe4\xda\x55\x61\x62\xf5\x68\x64\x6a\x80\x98\x3c\x25\xa9\x23\xb9\x70\xea\x77\x5c\x09\xf5\xa6\x2e\x74\x7a\xeb\xf4\x30\x1d\xac\x88\xa9\xad\xe8\x6c\xb3\x89\xd9\x99\xb3\x6f\xaf\xad\xbb\x1d\x73\x34\x52\xff\xf2\x7e\x47\x74\x8c\x76\xdc\x07\xbc\x01\xeb\x7d\x8b\x37\x7b\xb9\x6c\x91\x28\x37\xdc\xd6\x77\x1d\xfc\xae\x25\x99\xe9\x70\x3a\x18\x32\xf4\xab\x1a\xc7\x0d\x7a\x0f\x20\xa4\xda\x58\x4e\x2d\x03\x15\xe4\x25\x62\xd4\x70\x0b\x34\xb5\x58\x6a\xca\x55\x59\x21\x82\x4b\x8d\x21\xd3\xdc\x52\x8d\x2a\x61\x04\x85\x9c\x43\xa3\x98\xd2\xe3\x5e\x8b\x67\x99\x42\x8b\xb3\xa3\xd1\x08\x74\x69\xbe\xc1\x78\x3d\xfd\x18\xe0\xc5\xd4\x6e\xe0\x4f\x73\x75\xd6\x4f\x81\xa3\x79\x93\x8c\xdf\x14\xb6\x25\x16\xb7\xb5\xd6\x5d\x9e\x20\x02\xea\xed\xde\xdb\x54\xf5\xe6\xbe\xd5\xdb\x9d\xab\xdf\xea\x10\xed\x32\x42\x68\xf0\x31\x2e\x29\xd6\x8f\x7c\x62\x07\xc7\xcb\xa7\xab\x36\xa6\xb5\xd2\xf9\x00\x18\xf2\x28\xfd\x4c\x08\x72\x31\xf8\x88\xef\xce\x89\xe8\x3d\xa1\x93\xa5\x3b\x2d\x9f\xbc\xc5\x52\x42\xfa\x98\x54\xd7\xdc\x90\xb2\x6a\xe7\xc2\x96\x7d\xee\x51\xdb\xc3\xd6\x22\x65\x03\xc6\x88\x82\x60\xc6\xf1\xe1\xd5\x70\x92\x4e\xac\x22\xca\x5b\xc5\xe6\x2d\xbf\xce\x60\xce\xf6\xe8\x8b\x15\x22\x1b\x75\x0f\x9d\xfd\xe1\xf1\x45\xd1\x81\x79\xd8\xf3\x1e\x7c\x71\xfb\x65\xe2\x0e\x8d\xe6\xd2\x12\xcb\x9d\x0b\xcd\x5c\xc3\x86\xcc\x8e\xe0\xd6\x06\x6f\xf6\xcf\x3c\x12\xd0\xb5\x2b\x19\x3e\x66\xb4\x03\xe5\x96\x68\xa7\xfe\x9f\x33\x06\x99\x66\xd2\x8f\x6b\xf2\x21\xcb\x1c\x9f\x62\xbf\x40\x64\x90\xe3\x56\x0f\x91\xf7\x65\xe7\x96\xde\x1c\x57\xfb\x3d\xae\xc4\x7d\x26\x8c\x32\x5b\x97\xe0\x84\xcb\xe7\x19\xd7\x73\x82\xcf\xd0\x2f\x11\x6e\xfa\x38\xdc\x0c\xb1\xed\xe4\x55\xa9\xa3\xca\xab\xd8\x24\xaf\x91\xdd\x41\x80\x51\x2e\x98\xe4\x98\x13\x8e\xa7\x7b\x70\x5f\x79\xad\xaa\x6c\x04\xbf\xc1\x77\x8d\x3e\x0e\xeb\x5f\x22\x51\x28\x91\x39\xa8\x28\x94\x9b\x00\x38\xc2\x2a\x56\x21\xc0\x0c\x83\xcc\x72\x99\x0a\x87\x2f\x10\x8f\x14\x05\xd2\xda\xa8\x25\x7e\xf3\x48\x6e\x7b\x86\x51\x81\x53\x39\x0b\xaf\x2f\x5f\xcf\x70\xe6\x16\x7c\x45\x66\x35\x72\xa2\x43\x90\xea\x92\x5b\x13\x36\x5a\xe3\x67\xe1\x82\x51\x9e\xeb\xd3\x50\xc2\x5c\x68\xf2\x70\x7c\x50\x43\xda\x0f\xd2\x1e\xf8\x20\x82\x78\x35\x3e\x88\x36\x34\xfe\x38\x7c\x90\x41\x46\x9c\x4f\xb7\x02\x1b\x9c\x6b\x38\x57\xe1\x83\xe3\x18\x61\x2e\xb7\xb0\xd6\x66\xdd\xf2\xfb\x0d\x94\x07\x9d\x3c\xf9\x9e\x7e\x3f\x27\x0c\x72\xc4\x38\xa3\x3c\x23\x27\x9f\xe5\xf7\xdf\xc3\x8d\xfa\x31\xe6\x46\x99\xc3\x7a\xd4\x74\x93\x24\x58\xe7\x44\x4d\xb8\x4e\x9f\x27\x09\xfd\x8a\x12\xfb\xf6\x25\x5c\x96\x1d\x73\xf1\x43\x7e\xaa\x00\x1f\x96\xb0\x4e\x74\xfd\x21\xf1\x5a\xfa\x42\x4c\xdc\xc4\xb6\x5e\xc8\xf2\x36\xc0\xda\xa3\xae\x65\x98\xb7\xe9\x63\x7e\x54\xdd\xac\x66\x60\xac\x6a\x4a\x31\x8e\x00\xc3\xac\x62\x96\x4f\xae\x9a\x38\x7b\x69\x49\xc8\x30\x27\xed\x92\x08\x58\x37\x59\xff\x35\xd7\x0d\x19\x35\x34\x3b\xae\x65\x78\x7f\xf9\x69\x2f\xef\xea\xe7\xd9\x57\x8f\x64\xd0\xb3\x70\xf8\x79\xf5\x5e\x2b\x27\x6a\x74\xcd\x16\xeb\x01\xde\x8c\x78\x2f\x06\x21\x79\xa4\x82\xbb\xe6\xf1\x54\x4f\x46\x29\x86\x64\xee\x9e\xd2\x30\x38\x43\x0d\xf7\xdd\x90\x5e\xcb\x89\x9c\x46\x66\x53\x7c\xba\xf2\x6f\xd5\x1e\xa5\x64\x9a\x42\xed\xda\x97\x51\x7c\xa6\x52\xdc\x4f\x36\xf5\x54\xa4\x4a\xec\x05\xa0\x9e\x7c\x47\x1c\xc8\x3b\xdd\x1d\x15\x9d\xb4\xe3\x20\x6c\xaa\x44\x6e\x55\x1c\x5c\xb4\xb7\xc8\x11\x5f\x47\x71\x0d\xe9\xae\x17\xbd\x9d\x77\x1e\x7a\xf0\xac\xe5\xf1\xe9\xad\x70\x1b\xef\x7e\x46\xf1\xdc\x68\xfe\x67\xad\x72\xc7\x39\xb0\x10\xfa\xe8\xfe\xc2\xa1\x77\xb1\x79\x47\xf5\x0e\xd0\xef\xfa\x79\x6d\x9d\x01\x1a\x85\x94\x21\x10\xf1\xe6\xeb\x83\xcc\x7e\xb0\xda\x34\xfb\x11\x4e\x39\x70\x91\x10\x66\x90\x93\x66\xe5\x5e\x3b\x1f\xd6\x33\x21\xae\xe3\xa4\x26\x37\xf2\x58\x0f\xd8\x82\xb4\x82\x79\x70\xe2\x30\xb5\x4d\xca\xc2\x04\xd7\x36\x79\x8c\x37\x14\xa2\x91\x36\xa3\xee\x11\xea\x39\x58\x07\xe3\x78\xd5\x7c\xea\x3e\xdf\xd6\xd8\x35\xef\x2c\xd9\x14\xcc\xf6\xe7\xae\xb3\xc3\x63\x12\xfa\x64\xc6\xef\x36\x7c\x7b\x5e\x04\xb6\x66\xa5\x7c\x02\x7a\x1c\xd5\x8a\x5b\x2b\x34\x6f\x00\xc5\xf1\x12\xb0\x39\xb4\x2f\x13\x82\x89\x4e\x2d\x97\xa6\x5b\xbd\x25\x4b\x7a\x0b\xf5\xac\xee\xee\x83\x0b\xb7\xc5\xd8\x22\x02\xcd\xe3\x09\x14\x8b\x08\xb4\x3b\x10\xb8\x6c\xc5\xb1\xda\x3f\xf1\xf1\xc4\xf2\xac\xa7\x7b\x9b\x6c\x6b\xba\x19\x20\xf4\xfc\x40\xac\x1c\xc9\xa0\x34\x93\x12\x4d\x56\x2c\x25\xe9\x9d\x08\xf8\xf6\xcd\x72\x13\x56\x1b\x59\xea\x8a\x6a\xa6\x8d\x32\x16\x4b\xa1\x18\x51\x00\x03\x8a\x95\x14\x48\x50\xa8\xb5\x55\x08\x18\x2d\x10\x37\xa5\x86\x18\x70\x4a\x4a\x69\xb9\xd0\x5c\x63\xa8\xc6\xc3\x21\x7f\x49\xb1\xef\xfa\xac\x48\x1c\xcc\x71\x91\x16\xa7\x0c\xbc\x6f\xfc\xa0\x01\x47\xcf\xf2\x2b\xc7\x20\x32\xfe\xa2\xf0\xe9\xa5\x63\x6b\xf3\x3a\xb7\x52\x0d\x10\xf7\x67\x8b\x1d\xcc\xbf\x46\x93\xb3\xfc\xe2\x35\x46\x2d\x8e\x34\x40\x44\x4d\x8e\xca\x01\x45\x78\x1e\xba\x34\x02\x4f\x6f\x96\xd0\x3b\xec\x94\x41\xb1\xcb\xb3\x4e\xba\x76\x77\x15\x3f\x0f\x84\x9d\xd6\x12\xc2\x0f\x1a\x85\xa2\x4d\x2b\xf1\xf2\x58\x6b\xa0\x23\xda\x01\xa8\x90\x11\x3e\xd9\x52\xdf\x88\x03\x76\x09\x27\x75\x15\x4c\x2c\xb7\xe4\x8f\xd4\x12\x38\xa6\x2f\x5f\x63\x53\xd9\xe3\x96\x8b\xec\xb1\x71\xa9\x22\xba\xa4\x84\xe0\xd2\x32\xc6\x2a\xc1\x51\xa9\x85\xe2\x14\x49\x6c\xa5\xb4\x08\x01\xa2\x6a\x53\x6d\xa9\x2d\xb1\x41\x86\x08\x6a\x04\x63\x15\xb2\x10\x6b\x6e\x15\x99\xe5\x65\x6c\x93\xcd\x87\x6f\x5c\xfa\xc6\x10\xbd\x2f\x47\x93\xe8\x90\x56\xf1\x41\x1e\x07\xb1\xde\x1b\x17\x23\xa6\x68\xa1\xad\xed\x39\x02\xb5\x06\xb9\xbd\xc2\x64\x99\xe8\x7e\x67\xd1\xc7\x44\xfe\xee\x3b\xda\x21\x2b\x0f\xea\x82\x40\xb5\xc9\x51\x4f\xd2\xc0\x53\xb9\xdb\x47\x09\x31\x2e\xc0\x87\xc4\x4a\x7c\x1b\x60\xef\xcb\x01\xdf\xaf\x99\x37\x9a\x7a\x84\x9c\x1f\x34\xe4\xdc\xb6\xad\x25\x63\x8e\x29\x17\x1c\xe4\xd7\x20\x3c\xd2\x1c\xe3\x5c\x34\xf8\x59\xb2\x8b\xa3\x12\x5f\x68\x92\xb8\x63\x80\x2a\x8e\x7a\xe0\xc9\xb6\xd9\x21\xa3\x53\xc1\x7c\xf1\x39\xb3\x43\x18\x3b\x3e\xd5\xcc\xf0\xa5\xb5\xeb\x51\xe1\xec\x53\xda\xcd\x24\xa5\xf4\x0f\xd8\x81\xf1\x14\x99\x89\x29\x8b\xb3\xdc\xae\xde\x15\x33\x68\x8f\x33\x94\xfd\x87\x89\xb4\xc3\x37\x44\x3c\x33\x30\x53\xec\xa0\x53\x2f\xda\xb4\x46\xff\x26\x36\xdc\x61\x0d\x0e\x52\x9b\x85\x0d\xaf\xc7\xdd\x6e\x68\xd2\x5d\xce\x1a\x1b\x51\x94\x6f\x6c\xf8\xab\x62\xc3\x84\xd1\x6f\x6c\xf8\x98\xd0\xc4\x38\x36\x5c\x9a\x7f\xe6\x46\xf5\xa7\xc5\x86\x9f\xd9\xa9\xde\x74\xec\xd7\x74\x00\xaf\x79\x7c\xdb\xc4\x51\xe4\x70\xef\x00\x9e\xf2\xda\xbc\x62\x4e\x79\xb2\x43\xf8\x1b\xde\xfd\x44\x1b\x3a\x17\xde\x35\x98\x1d\x54\x92\xbf\xe1\xdd\x87\x5b\xd4\x4d\xc7\x40\x8e\x7c\x7c\x62\x5d\xdd\x76\x2e\x65\xf4\x31\x51\xc1\x58\x13\x2d\x38\x6a\xca\x70\x9b\x6f\x03\x39\x65\x15\xaf\x9f\x9b\xe6\x4c\x6c\xde\xec\xa1\x91\x1c\x33\xc6\x64\xa8\x8d\xdf\xa0\xf0\xe7\x2f\xf6\x7e\x2a\x0b\xf5\xf8\xb3\x58\xd7\xbf\xf5\x74\xa2\x94\x6e\x00\xcb\xed\x6f\x7d\xdc\xa1\xaa\xb0\xea\xcf\x52\x99\x38\x55\x15\xda\xe0\xae\xb7\x9d\x8f\x55\xed\x69\x38\xe0\xb9\xaa\xd0\x56\x7a\x97\x83\x55\xf3\x66\x34\xb3\x97\xd0\x63\x7a\xb7\x9b\x3a\x90\x6f\x5e\xfc\x50\x17\x97\xb7\x8a\xea\x1c\x99\x04\x2b\x7d\xd0\xc3\x74\x36\x5e\x05\x31\x1d\x58\x49\x56\x31\xdb\x5f\x0d\x31\x09\x04\x9f\x87\xe3\x13\xd2\x88\x6c\x3d\x9b\xee\x03\xcf\x3e\x47\x46\x68\x22\x84\xdd\xc4\xa8\xfb\x20\x85\x81\xf9\xf2\x37\xec\x8e\x1a\xa4\x25\xc7\xdf\xaf\xcc\x3a\xc6\x67\x03\x6c\x3b\x5b\x6d\x53\x9a\x7b\x74\x73\x3a\x02\x36\xbe\xdb\xeb\x20\xb6\x65\xe3\x9a\x3c\x5f\xbe\xab\x67\x58\x93\x97\x0a\xb6\x23\x9d\x36\x46\xb0\x26\x92\x70\xc9\x01\xa3\x0b\x99\xef\x46\x9a\x2c\x3f\x18\x65\x17\x97\xb0\x6e\x17\x21\x89\x84\x61\x65\x91\x5e\x48\xec\x73\x88\xf4\x2f\x24\xb5\x20\xb9\xe6\x5c\x97\xbe\x23\x63\xa7\xa5\x90\xc8\x67\x78\xa4\xe7\x3b\x2d\xba\x4f\x95\xa9\xce\x9f\x24\xb3\xc2\xed\x11\x4d\x09\xfb\xd7\xbb\x3e\x19\xeb\xee\xbc\x1b\xf6\xf3\xa7\x77\x17\xc3\x64\xc9\xfb\xc4\x25\x7b\xbd\x43\x35\x55\x23\x02\x9d\xad\x6b\x6e\x8c\xeb\xaf\xde\x4b\x1a\xe8\xbe\x75\x17\xb4\x8e\x16\xce\xde\xf6\x97\xf9\xf9\xb2\xaa\x2d\xb4\xc2\x25\x21\xe2\x5b\xb5\xe7\xa9\xd3\xb7\x6a\xb7\x5b\xb6\x61\x9c\xb1\xdc\xaa\xda\x18\xc3\x27\x51\x6d\x38\x92\xb8\x46\x21\x58\x40\x63\x87\xb1\x1e\x93\x5e\x9c\x47\x9c\x35\xdc\x2f\x91\x7d\xf9\xf5\x5b\xbd\xbe\x78\x07\xef\xd5\xca\x3c\x38\xd5\x97\xe8\x2a\xcf\x4c\xe8\x7e\x47\x14\x63\x0b\x16\xe0\xc7\xe4\xe1\xdd\x3a\x01\x4a\x82\x3c\x19\x0e\xe0\xb6\x10\x15\x41\x58\xca\xf4\x90\x30\x8f\xf3\x1e\x98\xd4\xde\xc9\x5a\xd7\xdb\x9d\xae\xe5\x9d\x64\xdd\xd4\xa6\xe3\x1b\xb5\x07\x56\x06\xf8\x63\xa7\xed\x7d\x15\xfe\x95\xa8\x49\x75\x2f\xed\x78\xf5\x00\x44\x52\x3d\xf2\xd2\xff\xde\xeb\xcc\xc7\x35\xbc\x03\xd0\x2e\x37\x81\x9d\x69\x48\xa5\xa9\x5e\x95\x51\x67\xc7\x0e\x58\xe8\xdf\x30\x24\xbb\x90\x12\x61\x33\x7e\x44\x43\x7e\x89\x1f\xc2\x95\x0a\xea\x0a\xc3\x63\xd7\xcb\x1c\x4b\xaa\x38\x71\x07\x62\x6b\x35\x8a\xe0\x0e\x43\xd8\xd2\x6c\x67\xd2\xec\x3d\x73\x97\x08\xbf\x9e\x7e\x34\x7d\x67\x4d\xe8\xa1\xb8\xe2\x08\x03\x2a\x3c\x61\x07\x1f\xff\x6b\x4e\xb0\xa9\xe7\xbf\x0a\x6a\x4d\x6c\xa9\x89\xe6\x52\x11\x25\x00\x2d\x2e\xf6\xb5\xaa\x2b\x7f\xbb\xea\xb6\x01\xea\x65\x2f\x6b\x05\x1c\x6e\x28\x76\x1d\x10\x05\xf8\x50\x5c\x31\x25\x09\x26\x40\x6b\x6a\x09\x34\x56\x49\x24\x30\x02\x15\x93\xa6\x02\x00\x49\x00\x8a\xff\x07\x00\x00\xff\xff\xf0\xa7\x0c\xb3\x98\x8f\x00\x00")

func compiledExecutorOpcodeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExecutorOpcode,
		"compiled/Executor.opcode",
	)
}

func compiledExecutorOpcode() (*asset, error) {
	bytes, err := compiledExecutorOpcodeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Executor.opcode", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\xd3\x41\x4b\xc3\x30\x14\x07\xf0\xef\xf2\xce\x39\x4d\x1d\x92\xa3\xe8\xc1\x83\x20\x6e\xe0\x61\xf4\xf0\xd2\xbe\x4a\x68\x9a\x84\xe4\x65\x2e\x8c\x7d\x77\x69\x99\x5b\x0f\xe2\x2a\xa2\xed\xad\xd0\xfc\x79\x3f\xfe\xbc\xb7\xd9\x43\xe9\x6c\x64\xb4\x0c\x92\x43\x22\x01\xda\xfa\xc4\x11\xe4\xa6\x10\x60\xb1\x25\x90\xc0\x8e\xd1\xac\x92\xf7\x26\x83\x00\x97\xf8\xf8\x62\xff\xf9\x00\x04\x70\xf6\xdd\x57\xd2\x96\x17\x37\x4b\x38\x14\x02\x3c\x66\x54\x86\x40\xd6\x68\x22\x09\x88\x8c\x4c\x4f\x89\x51\x69\xa3\x39\x83\x84\xad\xa6\xf7\x73\xb6\x4e\xb6\x64\xed\x2c\x1c\xc4\x37\xac\xd3\xd0\x0a\x19\xcf\x61\x95\x99\x62\x3f\xf6\xf8\x5b\x19\x6c\x68\xa1\x3a\xcc\x05\x73\x1f\xbd\x5a\xfc\x87\xd9\xa6\xf6\xeb\xae\x4e\x68\x57\x36\x6b\xdd\xd2\x8c\x7a\x1e\x65\x5e\xe9\x37\x4b\xe1\x92\x1a\xab\x2a\x50\x8c\xb3\x51\xaf\xfb\xc5\x2e\x5d\x18\xd5\xf7\xf2\xfa\x0f\xe1\x83\x6b\xdb\x3d\xec\xbc\x0e\xd8\x67\x26\x5f\x83\xa1\xeb\xf1\x7e\xfa\x53\x1a\x7a\x9e\x83\xdb\x52\xf5\xea\x42\x33\x7d\x4f\x3f\x5b\xbc\xb9\x35\x79\xd7\xa1\x5e\xa8\x1e\xa5\xba\xfd\x25\xaa\xf8\x08\x00\x00\xff\xff\x20\x8c\x4d\x0b\x76\x06\x00\x00")

func compiledExtensionAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionAbi,
		"compiled/Extension.abi",
	)
}

func compiledExtensionAbi() (*asset, error) {
	bytes, err := compiledExtensionAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Extension.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x0d\x52\xeb\x3c\x0c\xbc\xd2\x4a\xb2\x64\xf9\x38\xfe\xbd\xff\x11\xbe\x71\x9c\x02\x6d\xf8\xca\x4b\x1e\xaf\x0c\x61\x18\xe8\xc6\xd6\xcf\x6a\x2d\xb9\x06\x87\x21\x40\xd9\x80\x20\x46\x30\x02\x72\xd0\x68\x00\x44\x63\x05\xe1\xe2\x93\x80\x60\x32\xf6\x87\xcc\x61\x42\x4e\x86\xd6\x1a\x85\xcd\x4f\xd2\x38\x51\x89\x1c\xd4\x29\x2c\xb4\x85\x1d\x2d\x8e\xde\x33\x6f\x28\xe9\xbe\x36\x60\xa4\x91\x47\x5f\x68\xca\x3b\x4a\x23\x21\x32\x6d\x28\x23\x2e\xd4\xa0\x6d\x68\xaa\x0b\xd5\xba\xd0\x94\xab\x4a\x2b\x65\xa1\xbe\xaf\xad\x65\x58\x6b\x75\xd9\xe5\xb2\xdb\x6d\xca\xb1\x4b\x58\x91\x71\xd7\x85\x76\x87\xaa\xcb\xf2\x26\xdc\x35\x6a\x99\x7c\x39\x46\xd3\x22\xc1\x41\x3a\x33\x29\xba\x78\x5c\xb8\x6e\xdc\x96\x3e\xf7\xf8\x50\x9b\x7b\x02\x94\x1c\xce\x4e\xb3\x02\x0c\x50\x22\x85\xe2\xf6\x26\x11\x24\x61\xc8\x47\xab\x1d\x07\xab\x24\xd3\x7f\x70\x88\x41\x7c\xf2\x02\x87\x43\x34\x61\xb7\x0a\x67\xd0\x03\xb2\xd5\x9e\x06\x68\x22\x9b\xaf\x80\x3d\x8a\xe5\x3f\x61\xda\x5a\xfa\x70\x24\x49\x9c\x36\xec\x3d\x5a\x17\x97\x2d\xfe\x20\x71\x7a\x58\xd1\xdf\x7e\x12\x6d\x3b\x38\xed\x9f\x8d\x10\x44\xef\x33\x9f\x99\x50\x22\xbb\xfd\x3d\xc1\x04\xd9\x91\x5f\xf2\xf0\x15\x13\x2b\x8b\xb7\x88\x34\xb4\xcb\xb5\xa0\x6c\xc7\x08\xaa\x9e\x8c\xc0\xc8\xee\x23\x88\x6f\xa7\xe6\xab\x87\xec\xcc\xda\x13\x99\x31\xc9\x21\x33\x16\x3e\x9b\x59\x7b\xac\x76\x3c\x46\xf5\x19\x76\x26\x52\xf3\x63\xa4\x91\x8c\x10\x53\xb8\x5c\x59\x4e\x9f\xe4\x9f\xaa\x11\x3c\xe0\xdb\x14\xcc\xf5\xa8\x1f\xae\x63\x7a\xe9\x76\x3d\xf6\x41\x07\xab\x42\x38\x59\xbb\xe4\xf5\xdb\xf2\x14\xc9\xc7\x88\xb6\x71\x93\x43\x79\xd0\xfe\x41\x0d\x5f\xea\x3a\x91\x5d\xdb\xf5\x75\x06\xdb\x14\xc4\x99\x33\x66\xa2\x89\x8b\x78\xaa\xbb\x35\xfa\x38\x03\xff\x66\x9e\x62\xd7\x00\xc2\xea\xd8\x6f\x9c\xc9\xac\xe8\xc6\x6e\x74\x48\x21\xbd\xb1\x3e\x1e\xfa\xa3\xe6\x41\x6f\x6f\x03\x92\x46\x69\xeb\xbd\xf4\xf5\xdf\xbe\x0e\xef\x6c\x4c\x9c\xe1\x44\xfb\x2e\x1a\x1f\x6d\xbe\x2b\x69\x4e\x8b\xcf\x94\x94\xd6\xaf\x5d\xe3\x32\xc7\x8e\x9c\xd9\x5d\xf6\x6c\xf9\x5f\xb0\xb9\x26\xe1\x36\xcf\xd8\xe7\x74\x66\x65\x97\x6d\xce\xd1\xbd\x46\xee\xf3\x9c\xdc\xcf\xc8\x00\x2d\x73\xfd\x8d\xa3\x32\xe6\x3d\x61\xce\xc3\xb9\xdf\x03\x76\x1b\x8b\xad\x35\x07\xf3\xd6\x9b\xf4\x8e\xa5\xf5\x7e\xce\xe4\x79\x5b\x5a\xb6\x7a\xdd\x6d\xc9\xf4\x6d\xdb\xcc\xdd\xfc\xcf\xd3\x33\xb3\xcf\x90\x4f\xb4\x5c\x14\x89\x6f\x75\xfc\x03\xad\x28\xca\x13\xad\xe8\xac\xfa\x69\xad\xa8\xe8\x05\xad\xac\x4f\x17\xf5\xc2\x92\x7b\xf2\x9a\xfe\xb9\x5e\xee\xec\xde\xdd\x72\x0f\x3d\xe5\x4f\xd8\xaf\xf9\x19\xfb\xad\x5f\x61\x7f\x84\x73\xec\x7f\x36\x87\xbf\xa1\x22\x05\xcd\xc2\xe0\x5f\x56\x11\x7b\x9c\xff\x77\x15\xb1\x1c\x2f\x54\xc4\x4a\x7b\xf5\x79\xf0\xee\x15\x43\xfa\x2f\x63\x3f\x2a\x3f\x61\x3f\x9a\x5d\x60\x3f\xc6\xfa\x6a\xf6\x6b\x2a\xae\x0c\xfd\xf1\x9b\x40\x1c\xcf\xfa\x8b\xe3\x4a\x7f\x71\x3e\xdb\x5f\x3e\x64\xff\x77\xb7\x82\x96\x95\xb4\x87\x9f\xbf\x61\xf9\xe3\xf7\xbf\x7b\x5e\x4b\xbe\xc2\x6b\xc3\x2b\x6f\x58\xe2\x43\x22\x79\xf9\x71\x2e\x53\xa8\x4f\xb8\x4c\x86\x0b\x5c\xa6\x68\xaf\xe4\x92\x63\xc8\x21\xd6\xf8\xcb\xba\x6d\x9e\xdf\x04\xfe\x97\xf9\x4c\xed\x02\xf3\x59\xe4\xd5\xdd\x96\x46\x62\x31\xa1\x1f\x57\x72\x2e\xf4\x8c\xcf\xaa\x57\xf8\x6c\xe5\x9a\x92\x81\x4c\xa6\xc6\x31\xc7\x1c\x59\xa0\xce\x08\xea\x4c\x25\x24\xeb\x08\x35\x91\x6b\xc3\x88\x22\x69\x78\x66\x97\x06\xa4\x32\x58\x8b\x14\xd6\xda\x7a\x0e\x35\x06\x56\xcd\x91\x1a\x5a\xa4\xca\x00\xa7\xff\x02\x00\x00\xff\xff\x81\x38\x6a\x77\x3a\x16\x00\x00")

func compiledExtensionBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionBinRuntime,
		"compiled/Extension.bin-runtime",
	)
}

func compiledExtensionBinRuntime() (*asset, error) {
	bytes, err := compiledExtensionBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Extension.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionOpcode = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xed\x96\xa2\x38\x13\xbe\x95\x5c\x42\xe5\x8b\x24\x3f\x43\x3e\x66\x7c\x47\x5b\x5f\xc1\xde\xd9\xf9\xb7\x3b\xbb\xf7\xe0\xe5\xef\x21\x60\x00\x89\x36\xd8\xda\x36\xda\x9e\x33\x1e\x06\x1e\x8a\x4a\xd5\xf3\x54\x92\xc2\xde\xec\x8a\xef\x18\xc1\x5e\x02\x3a\x1c\x32\x40\xab\xa2\x5c\x6f\x1d\x32\x7a\xb9\x7c\xd5\xcb\x9d\x43\x76\xb7\xc1\x68\x51\xfc\x72\xdb\x75\xc0\x11\x04\x7b\x0c\xe8\x7f\xbb\xd5\x66\x11\x6f\x84\x1a\xb6\x75\xaf\x6e\x5b\x86\x6b\xd6\x15\x25\xda\xac\x37\xf1\x9e\x1c\xdb\x1a\x74\x38\x41\xa0\x73\xbb\x59\x5b\x67\xd6\x9b\x3f\x3b\xa7\xb6\xae\xdc\x6d\x5f\x50\x51\x36\x46\x4e\xfa\x1a\xcf\x04\xaf\xad\x2e\x75\xb1\xf8\xe5\xd0\xb2\x8c\x8f\xd2\x6c\xe0\xef\x01\xba\x5c\x6b\x5b\xe3\x54\x18\xd8\x85\x1f\x54\xfc\xa1\x37\x18\xd9\xc5\x6b\x30\xc6\x10\xec\x7d\xf3\x41\xfa\xa5\x33\xf2\xea\x0a\x96\x38\x03\x6b\x2d\x72\xff\x6f\x5d\x54\x8d\x8b\x3d\x24\x15\x84\x71\x89\x59\x17\x69\x59\x12\x99\x4b\x70\x4e\x93\x2e\x12\xf3\xa4\x51\x06\x5e\x79\xed\x5d\x0f\xaa\x74\x12\x8a\xbd\x02\x41\x70\x17\x4a\x40\xa4\xa0\x19\x70\xeb\xb9\x32\x3d\x28\x37\x29\xa8\xd2\x86\x53\x9b\xe7\x3d\xa8\x4c\x5a\x35\xb9\xcf\xac\x35\x3d\x5f\x49\x9e\xf4\xd5\x72\x22\x1c\x65\xbd\x58\x11\xc7\x53\x50\x27\x81\x73\x49\x7b\xc3\xa2\xc4\x35\xd0\x96\xbe\xe7\xd9\x7d\x5e\x23\x39\xbf\x40\x23\xae\x75\x47\xfa\x80\x19\x7a\x53\x11\x3f\xb0\x36\x98\xb3\xbb\x0d\xad\xbe\xc8\xb1\x1a\x08\x20\x6d\x6d\xe0\x25\xa9\x1f\xd2\xd1\x51\xdf\x46\x8d\x29\x76\x79\xc3\xe2\x46\x79\x23\x07\xea\x2e\x28\x06\x98\xe6\x1d\xd9\x06\x78\x4f\xbb\x95\x2f\x61\x50\x87\x21\xe0\x38\x5a\xdc\x97\x6e\x7d\x31\x31\xe8\x26\x34\xd5\x7f\xa7\xde\x85\x5b\xb6\x54\x97\xb1\x0f\x97\x3b\xe8\x4e\xd4\x2a\xc5\xaf\x76\xcb\x63\x5b\x83\x40\x47\xe3\x64\x70\xbd\xce\x5b\xb4\xc9\xc2\x37\x3d\x64\xa5\xbd\xef\x4c\x96\xed\x6e\xc3\xe2\x57\x4b\x0a\x1e\x47\x1d\x6a\x6b\x0c\xc8\x11\x29\x8e\xfe\xb5\x0f\xa6\x83\x63\xdc\x47\x37\xe9\x64\x94\x8f\x27\x6b\x4b\x93\x97\x75\x19\x8a\xe3\xf0\xcc\x5d\x09\x8d\xb3\x0b\xa4\x8b\x25\xbb\x3d\xa3\x87\xc4\x48\x65\x83\x33\x3b\x93\xd2\x81\x75\x76\x41\xa4\x0d\xff\x2c\x91\xce\x70\x36\x8d\xf7\x04\x3a\x0b\x83\xb7\x3e\x51\x1b\xd3\xef\xba\x6b\x56\x09\xa6\xd3\xb3\x4a\x28\xf9\x34\x59\xb5\x13\xab\x99\x4c\xa4\x27\x26\xef\xe4\xc5\xfb\xe6\x28\x93\x17\xe4\x48\xb4\xab\x77\xa1\xd8\x4c\x8a\x0c\x51\x97\xd0\x51\x99\x78\x2c\x19\x3c\xd0\xec\x46\xcc\x05\x35\x97\x18\xdf\x86\xc3\x4d\x28\x7a\xf7\x1d\xaa\xc7\xd3\x87\x4a\x31\x7c\x96\x42\xa4\xa4\x79\x20\xe2\x51\xaa\x2f\xc8\x06\xa3\x9d\x5d\x7c\x3e\x71\xb6\x65\x13\xe6\xcd\x58\x9b\xbb\xe1\x7b\x9f\x85\x1b\x87\xbb\x0d\xa3\xb6\x76\xeb\x8a\xe2\x1d\x4b\x8c\x6a\x9c\x5c\x91\x9c\xca\xa6\xf0\x1d\xbb\x43\xd2\x7d\x8d\x2b\x74\x4e\xaa\xdd\x53\x2a\x52\xec\x78\xd7\x75\x32\xdb\xac\x15\x65\x8f\x5a\xb2\x46\xb8\x9f\xa5\x59\x5b\x17\xd4\xdb\x70\x32\xc9\x4f\x3f\x61\xd9\xff\x4d\x17\x81\xee\xe7\x0c\x32\x38\xb4\x5f\xea\xcc\xc5\x12\x32\xb0\x7f\xb8\x1a\x76\x69\x27\xc1\x49\x9d\x1c\x95\x8d\x5e\x7c\x4e\x58\xaa\x37\xb0\x04\x2d\xcb\x81\xc7\xd8\x8f\x0b\xc1\xc9\x02\xb8\x7a\x5f\xe5\x6b\xcf\xd4\x47\x69\xb9\x5f\x8b\xf0\x5a\x38\xd0\x9a\xc8\x9a\x43\x29\x7a\xd1\x3b\xb1\x7e\xd8\x84\x68\x37\xfa\xcd\xa4\xda\x50\x9e\x76\xfa\x07\xac\xdb\x27\x68\x85\xfb\x56\x05\x1a\x97\xb8\x56\x6c\xbd\x68\x41\x8f\x14\xec\x24\xb3\x72\xdf\x6d\xc4\xc5\x4e\x44\xc7\xcd\xd0\xaf\x08\xe7\x06\xfe\x1e\xd1\xad\xd7\x7a\xd0\x83\x75\x68\xa2\x9d\xd1\xe5\xd4\xb1\xb1\x4e\x97\xe7\xd0\xa8\x3d\x76\xde\x99\x81\xf3\x4d\xf8\x0f\x81\x8b\x56\xfa\xd1\x21\x10\x80\x71\xeb\x0a\x80\xdc\xcf\x4d\x38\x37\x69\x92\xe8\x0d\xae\x96\x50\x4a\xf9\xb7\x2f\x92\x1c\xf2\xeb\x16\x49\x1e\x4b\xce\x5c\x8a\x24\xa7\x23\xe7\x89\x8f\x29\x92\x5d\xc4\x6d\xcb\x25\xa1\xda\x29\x69\xd4\xe7\x2d\x97\x67\x9e\x9f\x7a\x23\x33\x6d\x71\xf6\x01\xe2\x32\x13\x56\xc8\xa3\xc4\x65\xdd\xdc\xc4\xe5\x87\xaf\xea\x3e\x54\x5c\x67\x5b\x36\x77\x53\x5e\x0e\x36\x63\x9e\x7c\x29\xef\x46\xca\xcb\xa6\xf4\x88\xc6\x28\x2f\xd3\x62\x66\xca\xcb\x72\xfb\x9c\xd3\x9a\x74\xd2\x80\xa7\xee\x4b\x5c\x37\x12\x97\xe0\xe4\xba\xe2\x12\x59\x36\x33\x71\x09\x61\x9e\x53\x5c\x46\xe5\x92\x13\xe0\x4f\xda\x53\x12\xfe\xca\x2b\x3a\x09\x73\x5b\xd1\x49\xf2\x09\x56\x74\x03\x8e\x7d\x6c\xa3\xc9\x6a\x8e\xb9\x63\xcf\xda\x59\x95\x53\x5e\xf3\x8f\x52\x41\xfc\x05\xd8\x6c\x54\x60\x47\xfe\x4a\xea\x31\x3a\xab\x54\x7a\x2a\xb0\xcc\x9f\x94\xf0\x8a\x8d\x9c\xee\xc7\x12\x5e\x65\x30\x33\xc2\x2b\x31\x52\xf3\x8f\x41\x78\x22\x98\x66\xc2\x88\xaf\x4d\xc4\x8d\x24\xa5\xe3\xcb\xb4\x2b\x49\x4a\x63\x3b\x33\x49\x69\x3a\xb2\x49\xf1\x68\x9b\x08\xec\x15\xa1\x19\xc5\x4f\x3a\x9b\xe8\x7c\xc2\xcf\x58\x46\x51\xdf\xf0\xb9\x51\xdf\x8e\x7c\xed\xf4\xa1\xb3\x49\xf8\xd3\x94\xe5\xfa\x5b\x6d\x31\x43\xb0\xcf\x88\xd0\x42\x0b\x42\x81\x4b\xf4\xc3\x19\xa3\x7f\x10\x9e\x55\x49\x59\x2e\x56\x8b\xb2\xae\xc3\xc5\xf7\x65\x15\x0c\x55\xfb\xc1\xab\x63\xa3\xb0\xe4\x16\xbc\xa0\x54\x79\xa9\x89\xa4\x16\x40\xe5\x9e\xf0\x9c\x22\xd8\xff\x1d\x5a\xe3\xbf\x11\xec\xff\xf9\xb7\x7a\x60\xc5\xf6\xdf\x02\x95\x8b\x95\x2b\x4a\x5d\x79\x52\x33\x14\xf6\x7f\x09\x54\xe8\x6d\x05\xac\xad\xcb\x6a\x0f\x4e\x00\x88\x7a\x83\xec\xff\x05\x00\x00\xff\xff\xe5\xec\xea\x88\x0e\x34\x00\x00")

func compiledExtensionOpcodeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionOpcode,
		"compiled/Extension.opcode",
	)
}

func compiledExtensionOpcode() (*asset, error) {
	bytes, err := compiledExtensionOpcodeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Extension.opcode", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionnativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\x41\x4b\xc3\x40\x10\x85\xff\xcb\x9c\xf7\x14\xb5\x48\x8e\xa2\x07\x0f\x82\x58\xc1\x43\x09\x32\x49\x26\xb2\x64\x33\xbb\xec\xce\xc6\x86\xd2\xff\x2e\x09\xd5\xa2\x04\x1b\x04\xd3\xdc\x72\x98\x37\xf3\xe5\xf1\xde\x6e\x76\x50\x58\x0e\x82\x2c\x90\x8a\x8f\xa4\x40\xb3\x8b\x12\x20\xdd\x64\x0a\x18\x1b\x82\x14\x18\x45\xb7\xf4\x2a\xdb\x1b\x63\x8b\xfa\x89\x2a\x50\x60\xa3\x1c\xe6\x76\x9f\x63\xa0\x40\x3a\xd7\x7f\xe5\x9d\x50\xb8\x86\x7d\xa6\xc0\x61\x87\xb9\x21\x48\x2b\x34\x81\x14\x04\x41\xa1\x87\x28\x98\x6b\xa3\xa5\x83\x14\x5a\x4d\xef\x47\x69\x15\xb9\x10\x6d\x19\xf6\xea\x17\xb6\xaf\x9b\x1c\x9b\xa3\x36\x6a\x96\x8b\x64\x38\xfb\x9d\x3c\xef\xb9\x9f\x75\x43\xa7\xc0\xfb\x0d\xab\xcb\x85\x81\xdf\xdf\x4e\xf2\xfb\xb0\x60\x39\xdc\x6b\xfd\xc6\xe4\x4f\xb1\x63\x59\x7a\x0a\xe1\x1f\xd9\x47\x82\xfc\xe8\x6d\x4b\xe5\x8b\xf5\xf5\x94\x44\x24\x57\xab\x59\xf1\xac\xa0\x59\x47\xe7\x4c\x77\x7e\xba\x3f\x35\x6d\xf8\x81\xc2\xfa\x05\xf5\xad\x44\xc1\x1f\x85\x19\xc5\xc7\x9a\x92\xbc\xb7\xf4\xec\x95\x1b\x89\xed\xdd\xd6\x69\x8f\x83\x74\x82\xb1\x73\xd3\xcd\xf5\x4e\x65\x1f\x01\x00\x00\xff\xff\x46\xf2\x90\x9d\xb6\x06\x00\x00")

func compiledExtensionnativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionnativeAbi,
		"compiled/ExtensionNative.abi",
	)
}

func compiledExtensionnativeAbi() (*asset, error) {
	bytes, err := compiledExtensionnativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ExtensionNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionnativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledExtensionnativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionnativeBinRuntime,
		"compiled/ExtensionNative.bin-runtime",
	)
}

func compiledExtensionnativeBinRuntime() (*asset, error) {
	bytes, err := compiledExtensionnativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ExtensionNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionnativeOpcode = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledExtensionnativeOpcodeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionnativeOpcode,
		"compiled/ExtensionNative.opcode",
	)
}

func compiledExtensionnativeOpcode() (*asset, error) {
	bytes, err := compiledExtensionnativeOpcodeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ExtensionNative.opcode", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMeasureAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcd\x31\x0a\xc2\x40\x10\x85\xe1\xbb\xbc\x7a\x4e\xb0\x77\xf0\x04\x21\xc5\x24\x4c\x60\x20\xce\x2e\xbb\x6f\x94\x45\xbc\xbb\x58\xd9\x58\x88\xf5\x0f\xff\xb7\x3c\xb0\xd7\x18\xd4\x20\x0a\x7b\x9a\xc0\xa3\x25\x07\xca\xb2\x0a\x42\xaf\x86\x02\x8f\xb0\x0e\x41\x4d\x7e\x5a\xd3\xa9\xdb\x69\x28\x87\x9e\xc3\x04\x83\x4a\xbb\x24\x75\xf3\xd3\x39\x51\xd0\xb2\x1b\x04\x9c\xed\x3d\x39\x32\x76\x7a\x0d\x3c\xe5\x27\xb4\x26\xff\x41\x6f\x6e\xf7\x6f\xe8\xfa\x0a\x00\x00\xff\xff\x0a\x34\xa0\xdd\xeb\x00\x00\x00")

func compiledMeasureAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledMeasureAbi,
		"compiled/Measure.abi",
	)
}

func compiledMeasureAbi() (*asset, error) {
	bytes, err := compiledMeasureAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Measure.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMeasureBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x50\xd1\x71\xc5\x20\x0c\x5b\x49\xc6\xb6\xec\x8c\x03\xc1\xd9\x7f\x84\x1e\x21\xaf\xaf\xed\x4f\xef\x5a\xf9\x23\x41\xd6\x81\x24\x22\x41\x18\xbc\x11\x30\xa5\xac\xd3\xe1\x41\x00\xea\x71\x42\xf0\x47\x1c\x80\x51\xaf\x07\xc2\x04\xd5\xfa\x1c\x11\xed\x10\x23\xac\x3c\x16\x97\x71\xea\x1c\x83\x8b\x63\xf3\xf0\xb1\xde\x4e\x5c\xd3\x87\x5a\x42\x9c\xf0\xc7\xd1\x66\x1d\xbc\x27\xe8\xf4\x01\xbc\x75\x9c\x3f\x75\x61\x44\xe4\x4b\xb7\xbe\x8a\xf8\x74\xf5\x1b\x84\x6f\xcf\x77\x4b\x92\xf2\x35\xd3\x7f\xfa\x41\x4b\xd9\xad\x43\x96\xe7\xe7\x7e\xa4\x42\xf3\x66\x32\x12\x3a\xc4\x77\xb6\x39\xbe\x67\xf3\x7e\xc9\x6b\x57\xe5\xa1\x73\x6f\xb5\xf6\xdf\xa3\xda\x43\xa0\x0b\x9d\x2d\x7a\xf4\x68\x0a\xcf\x86\x56\x5e\x97\x9f\x51\xa3\xd9\xac\x4a\x45\xe5\x49\x9a\xb4\x2a\x6f\x7d\x66\xe6\xd1\x8c\x96\x56\xfd\xc0\xbc\x08\x3d\x43\x85\xca\xb0\x91\x7d\x45\x38\x3e\x02\x00\x00\xff\xff\xa7\xa8\xe1\xfd\x40\x02\x00\x00")

func compiledMeasureBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledMeasureBinRuntime,
		"compiled/Measure.bin-runtime",
	)
}

func compiledMeasureBinRuntime() (*asset, error) {
	bytes, err := compiledMeasureBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Measure.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMeasureOpcode = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x51\x72\x9c\x30\x0c\xbd\x8a\x8e\x20\x1c\xb0\xcd\xa7\x41\x4a\xba\x0d\x1b\x28\x86\x6d\x9b\xcf\xa6\xdb\x33\x70\xfc\x8e\x65\xc0\x64\xd8\xa5\x69\xa7\x9e\x59\x86\xb5\x9e\xe4\x87\xde\x93\xbb\xd1\x7f\xca\x00\x27\x8b\xb0\xbc\xe6\x08\x67\x3f\xb4\x3d\x43\xed\x9a\xe6\xe2\x9a\x91\x81\xc6\x2e\x83\x93\x7f\xe5\xbe\x15\x9c\x02\x9c\x32\x84\xcf\xe3\xb9\x3b\xad\x89\x18\x61\x3d\x5f\xb8\x1f\x24\x46\xec\x07\xe8\xda\x2e\xe5\xa8\x19\xb4\x6c\x28\xdc\xa4\xd7\x2d\x71\xdd\x76\xdf\x37\x5b\x3d\x0f\x63\xff\x02\x7e\x98\x8b\xdc\xe5\xba\xee\x08\x6b\x72\x83\xf3\xa7\x57\x86\x66\x48\x91\x72\xc7\x77\x81\x36\xad\xa3\x48\xa9\x94\x0f\xfb\xc7\x05\xfe\xab\xeb\x32\xa0\xd3\x45\x8a\xe5\x80\xd3\xe3\xbc\xc0\xbd\x50\xfa\xf2\x10\xc9\x1d\x55\xc6\xa8\x12\xf8\x4b\xa2\xc8\x33\xc5\x77\x48\x6b\xea\x07\xaa\x2a\xbd\x45\x6a\x35\x23\x53\x9b\x8f\x55\xb8\xaf\x65\x48\x2a\xf6\xbd\x39\xd4\x52\x28\x24\x19\x8c\x16\x48\xc2\x89\x5e\x1f\x3c\x5b\xd3\xdf\x9f\x6d\xf2\xf4\x6a\x0f\xcf\x7e\x1f\x73\x44\x3d\x7b\x1f\xb5\xc6\x8d\x3e\x7f\x5a\xa2\xdf\x4e\xba\xad\x0d\xc5\x43\x34\x76\xea\xb6\xf6\xff\xc1\x5d\xe7\xb1\x89\x07\xec\x2c\xef\x88\x36\xdd\xbb\xc5\x2a\x0b\x8f\x1c\xfc\x58\x25\x8e\x6b\xaf\x6d\x44\xf0\xb7\x21\x4c\xa0\xcc\xcd\xac\xd1\x2d\xbd\xa8\xfa\xb8\x5e\x4f\xce\x8b\xfa\x47\xf5\x78\x31\x7d\x9c\xf5\x75\x74\x77\xe5\x97\xa8\x5c\x11\x77\xc1\x37\x6d\xb3\xf9\x89\x21\xc4\x23\x4d\xfb\x14\x87\x4c\xcb\x40\x19\x67\x9c\x51\x0f\x58\x58\x78\xe6\xba\x76\xcf\xaa\x08\x01\x75\x0d\xf3\x11\x1e\xbf\x0a\xc0\xe9\xcd\x00\x4e\xd7\x1f\x21\x10\x34\xfe\x19\x02\x57\xbb\x1a\x4b\xfe\xe0\xf4\xa6\xa5\x70\x21\x57\x1e\x73\xa1\x1c\xd9\xd8\x65\x8c\x99\x4b\xd4\xe6\xec\x4a\xa4\x47\x8d\x4b\xfb\xd7\x0b\x50\xfc\x99\xe9\x07\x6d\xf2\xca\x3a\x44\x54\xe5\x81\x39\x7e\x07\x00\x00\xff\xff\x11\x8c\x08\x4a\xc9\x05\x00\x00")

func compiledMeasureOpcodeBytes() ([]byte, error) {
	return bindataRead(
		_compiledMeasureOpcode,
		"compiled/Measure.opcode",
	)
}

func compiledMeasureOpcode() (*asset, error) {
	bytes, err := compiledMeasureOpcodeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Measure.opcode", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMeterAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xcb\xaa\x14\x31\x10\xfd\x97\x5a\x67\x25\x28\xd2\x3b\x5d\xb8\x13\x17\xba\xbb\x0c\x52\xdd\x5d\x2d\x81\xa4\x2a\x24\x95\x19\x9b\xcb\xfd\x77\x99\xb9\xfd\x42\xfb\xe5\x38\x32\xb3\xea\x86\x7a\x9e\x53\x75\x92\x3c\x3d\x43\x25\x9c\x14\x59\xa1\xd0\x98\xc9\x80\xe5\x90\x35\x41\xf1\x74\x30\xc0\xe8\x09\x8a\xd7\x8f\x01\xc9\xda\x99\x9e\x7b\x0b\x18\xd0\x36\x9c\xff\x92\x46\xcb\x3f\xe0\xe5\x60\x20\x60\x8b\xa5\x23\x28\x1a\x74\x89\x0c\x24\x45\xa5\xcf\x59\xb1\xb4\xce\x6a\x0b\x05\x84\x1c\x69\x0c\x6d\x32\x57\x6a\x85\xe1\xc5\x4c\xdb\xe9\xa2\x87\x7e\x86\xa2\xdf\x53\x20\xae\x29\x8e\x19\xb0\xae\x23\xa5\x74\x49\xd0\x3b\x1d\xd1\xe5\x49\x91\x6c\x59\xdf\xbc\x7d\x77\x69\xb0\x73\xc1\x10\xa2\x1c\x17\x90\xa5\x5c\x55\xe7\x94\x43\x82\x52\xc4\xed\x84\xc7\xc2\xbd\xd3\x16\xc8\x45\xce\x55\x14\xdd\xd7\x1c\x82\x6b\xb7\xa8\x9f\x42\xdb\x6e\xee\x68\xe9\xf4\x0f\xdc\x37\x51\xfc\x3a\xf1\x2a\xeb\x76\xf4\x92\x59\x57\x27\xa3\x11\x39\x35\x14\x3f\xbd\x16\x7b\xc0\xf1\xd4\x54\x59\x8f\x2e\xed\x99\xcd\xfb\x5b\xaa\xe2\xb7\x8e\x46\x5a\xe5\xc4\xb3\x92\x18\x7b\x2e\xd1\x21\x57\xf4\xa5\x99\x6f\xba\x33\xff\xd7\xbd\x5a\xe4\x33\xb5\xbe\x14\xf7\x48\x87\xcc\x0d\xd7\xf8\xae\x2b\x7c\x67\x29\xfb\xc7\x3e\x61\x3f\xe6\xc8\x54\xdf\xe1\x84\xfd\x6b\x1d\x9b\x3d\xf7\xdf\xe4\x72\x73\x4e\x4e\x9d\x9e\x67\xb0\x45\xf2\x68\xf9\x2c\xa6\xdb\x83\x44\x16\x6e\xbd\xe4\x34\xb7\x7c\x96\x6b\xfa\x49\x75\x4f\xc0\xf6\x2e\x2e\x04\x2c\xad\xe6\xe0\xde\x95\xde\xff\x1c\xf8\x36\xaa\xb5\x73\xa2\x23\xb1\x5e\x0d\x69\x65\x90\x0b\x11\xab\xef\x9a\xeb\x81\x7d\xb8\xbc\x73\xd0\xfd\x01\xec\xf0\x2b\x00\x00\xff\xff\x66\xc7\x72\x63\xff\x09\x00\x00")

func compiledMeterAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledMeterAbi,
		"compiled/Meter.abi",
	)
}

func compiledMeterAbi() (*asset, error) {
	bytes, err := compiledMeterAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Meter.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMeterBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x0b\x76\xea\x38\x0c\xdd\x92\x3e\xd6\xc7\xcb\xf1\x77\xff\x4b\x98\xa3\x38\x50\x28\x7d\x94\xd0\xd2\xce\xcc\x4b\x0e\x94\x0a\x47\x96\xaf\xaf\xae\x64\x14\x1c\x14\x12\x08\x29\x40\x62\x45\x50\x04\x28\x53\x4c\x01\x80\xc5\x1a\x20\x3c\x79\x65\x80\xa4\x3c\xf7\x0b\xd5\x41\x19\x74\xf6\x3e\x80\x31\xc5\x3c\x35\x89\x6d\xd6\x2c\xa3\x58\x5d\x56\x4c\xbb\x15\x1d\x15\x7a\xef\xcb\x5a\xf2\xb2\x12\x57\x37\x3a\x59\xfb\x3e\x96\x91\xdb\x10\xb5\xcd\x4a\xb2\x8f\x35\x28\xe0\xc4\xb8\xac\x5e\x96\x35\x4b\xf7\x5c\xd3\x6e\x1d\xb8\xac\x25\x83\xe4\x56\xeb\x66\x65\xdb\xad\xb5\xb2\x98\xf3\x6e\xed\xba\xac\xdd\x33\xb2\xb4\x15\x43\x92\xba\x5b\xbb\xd2\xe8\x3c\x96\xd5\x55\x4c\x6a\xa0\xe8\x30\xbb\x54\x4e\x0e\x28\xb1\xea\x06\x0b\xdd\x65\x97\x0d\xf1\x96\xe3\x99\xd9\x45\xe3\x99\x04\x82\xbe\xed\x0c\x01\xa0\x93\x23\xb0\x93\x90\xb3\xa3\xa3\xc4\x8b\xd6\x77\x19\x05\x1c\x04\xf3\x3e\x36\x83\x83\xb3\x73\xf8\x97\x1a\xe3\x71\xcd\x8a\xb0\x61\xe2\x04\xdb\xf3\x9e\x60\xf7\xe1\x18\x4f\xad\x28\xc6\x88\xf9\x05\xd6\x9d\xb7\xd7\xfa\x5e\x01\xb7\x1d\x5c\xbe\x58\x77\x5f\x1c\x73\x6b\xc4\xc8\xdb\xfc\xbc\xcd\x04\x50\x80\x31\xa3\x5e\xc7\x19\x9e\x33\x2d\xdf\xa7\x35\x66\x04\xce\x30\xf9\x02\x9f\x18\xf9\x1e\x1f\xf4\x19\xfc\x74\x60\x05\x5e\x11\x05\x3e\x2c\x76\xe6\xd7\x67\x17\xea\x1b\x46\x99\xf2\xe6\x81\xe5\xbd\x6d\x8f\x0e\x41\xb8\x5c\xed\x05\xa1\xac\xfb\xdd\x9a\xee\xae\xa4\xca\xed\x4a\xea\x88\x24\xa3\x7a\xed\xfd\x88\xd7\x71\x8b\x0f\xf1\x8b\xf0\x79\x19\xbe\xda\xf1\xcb\xf8\x92\xde\xe2\x4b\x1a\xf8\xba\xca\xb5\x77\x85\x88\x70\xbd\x1f\x99\x21\xeb\xed\x0c\xad\x7e\x3f\xd6\x67\x5c\x5c\xc7\xd3\xcc\xa0\xd1\x6f\xa3\x9d\xaa\x08\x39\xbd\x4e\x59\xf8\xac\x06\x7f\x56\x16\xc6\xfa\x90\xb2\xb0\xf2\x0b\x95\x85\xed\x16\x1f\xae\xed\x87\x95\x25\xfb\xd7\x95\x85\x07\xdd\xac\x24\x25\xfc\x8f\x69\x40\x2e\x5f\xd7\x80\xa4\x76\x8b\x84\xc5\x7b\x55\x7b\x3a\x93\x52\xfe\x00\xdf\x61\xff\x3e\x7c\xcf\x58\x36\xe8\x47\x57\xab\xa0\x9b\x75\x65\x79\xac\x68\x75\x82\xa1\x0e\x70\xb1\x07\x36\x53\x34\x3e\x49\xc5\xe8\xb9\x4e\x30\x7c\x9d\xb2\x7e\x45\x19\xb6\x85\x2f\xf3\x91\xf5\x1f\x19\x7b\x81\x00\xbc\x7d\x8e\x59\x09\xb6\xb9\x0f\x21\xff\x5d\x33\x7b\xec\x9a\x08\x38\x1d\xf1\x78\x10\xa5\xe9\x4d\xea\xc0\x21\xa3\x8e\x66\x5d\x6a\xc7\x34\x0d\x13\x59\xc7\xe1\x69\x72\xef\xd1\x83\x37\x98\x56\x89\x32\x0e\xa9\x04\x50\x9a\x37\x6b\x5c\x33\x89\xa7\x47\x99\x54\xa2\x22\x6c\x4c\x0c\x46\x6e\x7c\xdc\x77\x98\xe1\x48\xcc\xca\x60\x3a\x58\xb1\xef\xfe\xf1\xf2\xec\xf0\x95\x73\x08\xec\x2b\x80\x14\x7b\x40\xe7\xf8\x9d\x23\x8f\x37\x26\x98\x03\x57\x94\x3d\xfb\x35\xe3\x75\xf6\x4b\x99\xf8\xf6\x6d\x11\x31\xee\x3b\x7b\xc7\xfa\xb4\x8f\xbb\xa8\x40\x61\x8f\xdd\xde\xab\xa4\xd6\x7a\xe9\xf3\x4d\x3f\x2e\x2b\xec\x65\x4e\x7f\x9c\x2d\x7e\x88\x87\xdf\x99\x2d\xbf\x93\xa7\x92\x02\xbf\xb8\x15\xc1\xda\xd6\x8d\x05\xba\x36\xc1\x1b\x5b\x2e\x4f\x93\xe2\x8d\x13\x1f\xf5\x43\xd1\x95\xbc\xc5\xe2\x60\x53\xc9\x44\xb3\x36\x4b\x9a\x75\x70\x21\x88\xbf\xc6\x26\x1a\x57\x56\xd6\xac\xa2\xc3\x12\x81\xa2\x36\x6d\x3a\xcd\x14\x75\x28\xab\x9c\x34\xf0\x8e\x22\x6f\xac\xf8\x3b\x77\x79\x5b\x35\x39\x49\x02\x5e\x7d\xdc\x49\x25\xa3\x23\x96\xe2\x29\xee\xa8\x72\x99\xf7\x8c\x58\x8a\xc3\xa7\xae\xef\x94\x27\x0a\x48\xd7\x99\x73\x58\x85\x04\xb1\x67\xd8\x3a\xdd\x6d\x7f\xe8\x15\x3a\xe4\x07\xf5\xff\x49\xa4\x77\x9e\x3d\xa0\x79\x19\xea\x1d\xcd\xcb\x38\x9f\xd0\xbc\xcc\xf2\x84\xe6\xad\xff\xf4\x93\xfe\x84\xaf\xfb\x13\x49\xf2\x64\x6f\x02\x7f\xe8\x4f\x22\xfe\x6c\xcc\x7f\x60\xde\xfb\x5a\x77\x28\x6f\x3c\x1d\x19\x8d\xc9\x23\x9a\xd2\xbb\x98\x1c\x9c\xe9\x38\xfb\x73\x16\x18\xd9\xf5\xaf\x62\x7f\xf1\x72\x87\xfd\x25\x8f\x27\xd8\x5f\x6a\x3a\xc6\xfe\x63\x9c\x90\xba\x57\xc5\x2a\xf8\x73\x55\x91\xe0\xb3\xaa\x68\xac\xa2\x4d\x95\x40\xa7\x11\x81\x76\x45\xe3\x75\x7a\x20\x30\x52\x31\x8c\x67\xe2\x93\xa6\x47\xaa\xe2\xb6\xc6\xf6\x78\x0d\x38\xca\xf9\xd6\x9a\xf5\x99\x7f\xbf\xef\xac\xad\xdf\x61\x61\x1d\xf8\x04\x0b\xeb\xb4\x2f\xf5\x9d\xab\x36\x1f\xd2\xab\x6f\xed\x0a\x7e\xa9\xeb\xfc\x48\xe3\x1d\x11\x37\x4c\x47\x29\x62\x47\x59\x36\x31\x69\x92\x29\x9e\xce\x9d\x05\xbf\x48\x5b\x7f\x00\xb3\xab\x53\xe1\xf9\x97\xb7\x07\x38\xde\x79\xde\xe1\x78\x17\x7e\x82\xe3\x5d\xf3\x31\x8e\xef\xca\xd9\xc7\xf8\xc1\xf3\x44\xff\xc2\x79\x82\xb6\x13\xc5\xf9\x2c\x01\xf0\xd8\x79\xe2\x28\x47\x2d\x41\x45\x91\xe9\xfc\xff\xe5\x28\x7c\xce\xd1\x71\xf7\xfc\x3f\x3e\x3b\xff\x07\x03\x0f\x45\x7c\xf0\xb7\x9d\xde\x27\x09\x95\x8e\x75\x50\xf3\x5c\x35\x37\xaa\xa0\x3e\x1b\x9b\xf7\x52\xb2\x50\x2d\x16\xcd\x5f\x4b\x05\x51\xc9\xa7\x48\x49\x7d\x0a\x71\xe5\x31\xcf\x7b\xfb\xc0\x6f\x3b\xa7\xca\x0a\x50\x50\x45\xc9\x8a\x15\x23\x06\x71\x82\x69\x69\x62\x4f\x8d\xca\x6c\x32\x42\xd6\x9c\x8c\x70\xa6\x46\xd4\x0b\xd0\x28\x82\xde\xd1\x6d\xd4\x5c\x86\x55\x54\x90\x36\x46\xd3\x31\xbd\x7a\x43\x00\xca\xff\x04\x00\x00\xff\xff\x08\x2d\xf4\x01\x80\x1e\x00\x00")

func compiledMeterBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledMeterBinRuntime,
		"compiled/Meter.bin-runtime",
	)
}

func compiledMeterBinRuntime() (*asset, error) {
	bytes, err := compiledMeterBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Meter.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMeterOpcode = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xeb\x76\x9b\xba\x12\x7e\x15\x1e\x41\xd7\x11\xfa\xa9\xcb\x90\x93\x53\xb7\x76\x7d\xe9\xe9\xe9\xbf\xbd\xbb\x76\x9f\x21\x8f\xbf\x17\x02\x04\x32\xb2\x83\xb1\x9d\x98\x36\x5e\x2b\x84\xcb\x68\x34\x1a\xcd\x7c\xfa\x24\xc1\xe6\xb0\xfb\x0f\x2d\xc8\x4b\x49\x8a\xee\x54\x90\xe2\xf3\x6e\xbf\xde\x62\xe1\xcc\x6a\xf5\xcd\xac\x0e\x58\xf8\xc3\x86\x16\xcf\xbb\x1f\xb8\x5d\x07\x39\x56\x90\x17\x4a\x8a\xff\x1e\x3e\x6f\x9e\x63\x41\xd2\x88\x6d\xf1\x1b\x6e\xf7\xe1\x99\xc7\xdd\xbe\xd8\xac\x37\xb1\x4c\x25\x5a\xa1\xee\x06\x23\x83\xe2\x6e\xed\xd1\xad\x37\xff\x1f\xdc\xda\xe2\xfe\xb0\xfd\x52\xec\xf6\xad\x92\x93\xb6\xc6\x3b\xc1\x6a\x6f\xf6\x66\xf7\xfc\x03\x8b\xd5\x3e\x56\x65\xaa\x91\xbd\x9d\xe8\x6a\x6d\x7c\x23\xa7\x43\xc3\x66\xfe\x8a\xdd\xff\xcc\x86\x16\xfe\xf9\x5b\x50\x26\xea\x06\xb7\xbf\xc2\x7c\xf1\x7d\xcb\xeb\x27\x50\x79\x8f\x84\x17\xf8\x35\x5a\x68\x45\x6b\x61\x22\xa8\x25\x1a\x65\x13\x41\x2a\xb2\x92\xb4\xa4\x40\xbc\xf7\x89\xa8\xd1\x39\x51\xc6\x6d\xa9\xd8\x91\xa8\xcf\x6a\xe5\x94\x3b\x94\xa0\x86\xa2\x4c\x66\xb5\x2a\x62\x48\xc9\x38\x4d\x44\x4b\x93\x6f\x95\x2f\xb5\x15\xa9\x28\xd2\x9c\xa8\xd1\x44\x6a\x67\xed\x50\x94\xab\xac\xa8\xb5\x5c\xaa\x92\xa7\xa2\x1e\x72\xa2\xbe\xd4\x94\x4b\x97\x78\x40\x48\x9b\x15\xf5\xc0\xd0\x73\x4c\x44\xcb\x4e\x6b\x1f\xe8\xe7\xf3\xe0\x7c\x36\xb9\x19\xd9\xe4\x74\x6f\x4e\xe5\x83\xcc\xd8\x9a\x3a\x45\x42\x7c\x07\x75\xb1\x5d\xb4\x49\x3e\xe3\xc3\x03\x5e\x1f\x58\xb1\x3b\xd8\xe6\xaa\x4d\x2a\x7f\xd8\x88\xe6\x49\x38\x44\x3d\xec\x38\xeb\x5a\x4d\x75\xfc\xb3\x60\x62\xa8\xa7\x91\x6f\x92\x22\x23\x49\xa3\x49\xa2\x39\xf4\x4d\x8f\xad\xe8\x2d\x58\xed\xc7\x00\x94\x04\x61\x30\xbc\xd6\x3d\x30\xd3\x1f\x36\xb2\xb9\x37\xb2\x37\x3c\xef\x4d\x19\xfa\x15\xf1\xd8\x97\xf5\xc3\xc1\x5f\x5f\x24\xb6\x23\xd1\xd5\xd6\x42\x07\x69\x7f\x6c\x3b\x87\x91\xed\xad\xf7\x3b\xbf\x45\x2d\xa9\x73\x18\x09\x82\xbd\x13\x48\x81\xdf\x37\xe1\xde\x97\xf5\xbe\xab\xf0\xf5\x1e\x4a\x1a\x57\xdf\xe6\x69\x33\xb3\xe1\xd3\x14\xaf\xeb\x6a\x5a\xda\xc2\xf3\xc4\x18\xa7\x72\x46\x90\xd3\xb2\x1a\x80\x7b\x10\x4f\x10\xbe\xf5\x1a\xcb\x84\x15\xcd\x00\x3c\x19\x80\xf2\x6b\xbf\xe0\xcc\x33\xe1\xdb\x78\xad\xf5\x49\x5f\x73\x52\xe9\x45\xc5\x8f\x3b\xa0\x6e\xbf\xe4\x66\x6a\x66\xf3\xce\xe1\xd9\x7f\x93\xa2\xe2\x6e\x5d\x6f\xe5\x8c\xae\xb7\x18\xcf\x81\xd9\xe9\x6e\x78\xdf\xa6\xe2\x8c\x28\x67\x7c\xd1\x51\xbe\xcc\xd4\x02\x4f\x7f\x83\xd4\x62\x30\x23\xb5\x18\xf4\xa9\x55\xb6\x0a\x26\xb9\xa1\x7b\xd4\x76\xe1\xd1\xe5\xfb\x3a\x42\xc3\x0c\x47\x38\xbb\x9c\xc4\xcb\x05\x71\x09\x23\xb6\xf2\xa0\xc0\xc8\xd0\xcf\xe8\x9f\x0a\xe2\xb9\x16\x7f\x1e\xc9\xe5\x19\xa2\x78\x13\x92\xcb\xe9\x68\x40\xbd\x39\xcb\xe5\xc0\xff\x3c\x96\xcb\xd5\x8c\x30\xe7\xd6\x2d\x07\x86\xee\x30\x14\xeb\xf2\x77\x60\xb9\x1c\xd9\xe5\x5d\x2f\x04\x5d\x72\xd7\x2f\x34\xde\xcc\xef\x40\xfd\x04\xa8\x19\xf1\xa6\x48\x3c\xb7\xad\x82\xc7\x27\x0f\x42\xcf\x49\x2d\x54\x1f\xa9\x75\x71\x6e\x38\x32\x99\x66\xdd\x3d\x28\xba\x52\x90\xac\xf9\x8f\x88\x57\xec\xc4\xcd\x68\x63\x20\x21\x83\xf2\x9c\xbd\xf5\x25\x0f\x61\xe3\x41\x2a\x01\x52\xb1\x99\xfb\x00\x49\x25\x19\x26\x95\xf7\x6e\x5b\xee\x28\xbe\xeb\x88\xc0\xed\xcc\x58\x98\x57\xea\x95\x3e\xa5\xaf\x39\xb1\xb1\xfe\x13\x3a\x67\x3e\x31\x09\x69\x8b\x60\xd1\x4d\x69\x66\x10\x4d\x32\xf5\xfd\x1b\x67\xc6\x97\x1b\x78\x75\xf7\x86\x88\x2d\x9d\xb4\x48\x51\xa2\x45\xa7\xbc\xb4\x9e\x8a\x4a\x51\xc1\x94\xa7\x58\x8a\x8a\x7b\x4f\x38\x15\x8e\x54\xca\x32\xa6\x29\x4a\xcb\x08\x31\xae\x74\xca\x71\xab\x99\x6c\xe6\x10\x6f\x97\xe6\xab\xf5\x13\x1f\x50\xff\x34\x3f\xf8\x91\xca\x53\xd9\x62\xbc\xdf\xe2\x6e\x77\x85\xef\xc2\x9e\x15\x20\x07\xea\xb3\x86\xb3\x28\x35\x2a\x7a\xe5\x4e\xe1\xe7\xc3\x2a\xeb\x53\x91\x44\x1e\x23\xa7\xfb\x44\xf4\xa3\x57\x92\x5f\x65\x23\x81\xdf\xf7\x6e\xed\x31\x0c\x73\x3d\x55\x19\x0d\xab\xa0\xe9\xf4\x61\xf5\xc9\xec\x42\xbc\x9e\x55\x68\xba\xd5\xa8\x06\xca\xe3\x58\x3b\xd2\xdf\x3d\x0d\x3b\xbe\x27\x85\xb3\xc3\xfb\xb9\x19\xdc\x09\x4d\xdd\x64\x78\x3c\xc3\x06\x6b\xa7\xb9\xe0\x24\x53\x78\x75\x09\xe0\xfc\xb8\x7b\xcd\xe8\xe0\x0f\x1b\xb5\x68\x40\xdd\x24\x9b\xf1\x0b\x1f\xe8\x76\x21\x10\xfa\x10\x4b\xff\x75\x01\xa7\xdc\xf1\x3a\x65\x0c\xde\x01\xa0\x73\xa5\xcd\x5c\x78\x21\x67\xb0\x65\xc6\x0a\xd9\x60\xa5\xe7\x8c\x43\xa2\x4e\xde\xec\xd7\x28\x09\x1a\x9c\x12\xa0\x01\xb9\x61\xa4\xfe\xaf\xb8\x92\x50\xff\x34\x70\xd0\x20\x01\x95\x60\x04\x28\x38\x70\x50\x29\x05\x14\x10\x38\xc8\x0c\x87\xba\x09\xb9\xcc\x24\xf4\x47\x42\x2d\xa2\x31\x5d\x74\xf2\x36\xc9\xba\x5e\xed\xd7\xf3\xf2\xd4\xac\x4b\xba\x52\x9a\x86\xe4\xf4\x87\x38\xdf\xd1\xfc\x04\xe6\x1e\x33\x13\x91\x59\x42\x3c\x85\xd6\x51\x07\x9b\x0c\xf0\xb7\x21\x34\x92\x52\xaf\x09\x4f\xd7\x53\x87\x89\xc1\xdf\x89\xd5\xa4\x9b\x48\x0f\x12\x92\x63\x0c\xb9\x3f\xe9\xd2\x64\x22\xe3\x98\x4a\xba\x34\xad\x16\x46\xba\x34\x9f\xb8\x69\xf9\x36\xa4\x6b\x28\x91\xcf\xce\x1b\x2d\x40\x9c\x9d\x49\x0d\x16\x20\xa4\x90\x33\x17\x1f\xc6\xc3\xff\x05\x14\x33\x76\x8f\x56\xdd\xf0\x71\x0d\x5e\x4e\x9d\xc9\x5d\x35\x52\xf5\xb6\x5d\x5c\x14\xbf\x16\xc9\xdb\xa8\x75\x27\xb4\x51\xb9\xde\x5c\x67\xd5\x8d\xb0\x5c\x6b\x49\x50\xf7\xac\xe4\x03\xcb\x1f\x0c\xcb\x4d\x7c\xbd\xf5\x46\x58\x6e\x34\x2e\x0c\xcb\x4d\x7c\x6f\xf9\x9d\xb0\x7c\x76\xf2\x47\xcb\xf2\x13\x35\x2b\x8f\x17\x47\x16\x32\x51\x63\x79\xbd\x13\x27\x6a\x8a\x83\x04\x07\xc0\x08\x54\x8a\x31\x02\x1e\xa8\xe2\xcd\x82\x38\x23\x8a\x81\x54\xb4\x2e\x53\x9f\x81\x78\x8b\x89\x5a\xdf\x21\xee\x6d\x49\xfc\x6d\x50\xdc\x39\xa7\x7c\xa5\xff\xd4\x35\x46\xeb\x2e\x78\x21\x62\x0a\x44\xda\xf8\x9d\xc0\x52\x20\xd2\x56\x13\x37\x6a\x1f\x60\x8d\x91\xa6\x97\x73\xb9\xd5\x03\x2e\x20\x88\x45\x37\x65\x37\x8c\x80\x0b\x09\x76\xa8\xea\x69\x14\x96\x68\x3a\xf2\x72\x1b\xa0\xab\xa8\x00\x21\xab\x1e\x9f\xf3\x0b\x10\xe2\x9d\x49\xeb\xc3\xc4\xc1\x94\xad\xb5\xfc\x0b\x6b\xf7\x47\x6d\xcf\xc7\xdf\xcb\x5d\x85\xda\x5e\xf2\x85\xa1\xb6\x07\xfd\xbe\xa8\x9d\xa7\xa5\x1e\x71\x99\xb4\x94\xbe\x96\x0c\x73\xf7\x0f\x58\xd8\x41\x88\x7b\x07\xe3\x16\xdc\x87\x96\xde\x68\x03\x5a\x10\x4b\xa5\xac\x8a\xf1\x3b\xc2\x1f\xa0\x79\x53\xd0\xbc\x3b\x66\xe2\xad\x77\xd3\xf1\x8d\x77\xd3\xc7\x5b\x63\xb3\xba\xee\x9a\x58\x09\xd9\xef\x7d\xc5\x24\x33\x9e\x5a\x64\xae\xd4\x16\xb4\x63\x96\x40\x59\x39\xae\x4a\x6f\x8c\x96\xcc\x1a\x55\x51\xe0\x4e\x18\x4a\x81\x95\x95\x94\x46\xf8\x4a\x32\x6e\x39\x56\xa7\xd3\xe8\x9e\xef\xb3\x1c\x4f\x28\xc3\x57\xeb\xab\xf5\x53\x03\x6b\xd0\xa0\x9a\x51\x46\x31\x4e\x64\x39\xa0\x76\xe4\xe5\x97\xaa\xeb\xf8\x55\xec\xcc\xb6\x3e\xf9\x59\x9b\xf3\x57\x7d\xbf\x3e\x93\xff\x84\x0f\x8e\xd3\x77\x17\xfb\xaf\x71\x42\xf6\x57\xc2\x31\xe6\x0d\x61\x68\x24\x2d\x3d\x2d\x15\x5a\x6d\x50\x59\x0a\x44\x3a\x44\x07\x58\x95\x05\x79\xf9\xbb\x3e\xfc\xa4\x8d\x6d\xe4\x85\xe9\xe2\xdf\x00\x00\x00\xff\xff\x89\xc6\x13\x6c\x03\x40\x00\x00")

func compiledMeterOpcodeBytes() ([]byte, error) {
	return bindataRead(
		_compiledMeterOpcode,
		"compiled/Meter.opcode",
	)
}

func compiledMeterOpcode() (*asset, error) {
	bytes, err := compiledMeterOpcodeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Meter.opcode", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMetergovAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xcb\xaa\x14\x31\x10\xfd\x97\x5a\x67\x25\x28\xd2\x3b\x5d\xb8\x13\x17\xba\xbb\x0c\x52\xdd\x5d\x2d\x81\xa4\x2a\x24\x95\x19\x9b\xcb\xfd\x77\x99\xb9\xfd\x42\xfb\xe5\x38\x32\xb3\xea\x86\x7a\x9e\x53\x75\x92\x3c\x3d\x43\x25\x9c\x14\x59\xa1\xd0\x98\xc9\x80\xe5\x90\x35\x41\xf1\x74\x30\xc0\xe8\x09\x8a\xd7\x8f\x01\xc9\xda\x99\x9e\x7b\x0b\x18\xd0\x36\x9c\xff\x92\x46\xcb\x3f\xe0\xe5\x60\x20\x60\x8b\xa5\x23\x28\x1a\x74\x89\x0c\x24\x45\xa5\xcf\x59\xb1\xb4\xce\x6a\x0b\x05\x84\x1c\x69\x0c\x6d\x32\x57\x6a\x85\xe1\xc5\x4c\xdb\xe9\xa2\x87\x7e\x86\xa2\xdf\x53\x20\xae\x29\x8e\x19\xb0\xae\x23\xa5\x74\x49\xd0\x3b\x1d\xd1\xe5\x49\x91\x6c\x59\xdf\xbc\x7d\x77\x69\xb0\x73\xc1\x10\xa2\x1c\x17\x90\xa5\x5c\x55\xe7\x94\x43\x82\x52\xc4\xed\x84\xc7\xc2\xbd\xd3\x16\xc8\x45\xce\x55\x14\xdd\xd7\x1c\x82\x6b\xb7\xa8\x9f\x42\xdb\x6e\xee\x68\xe9\xf4\x0f\xdc\x37\x51\xfc\x3a\xf1\x2a\xeb\x76\xf4\x92\x59\x57\x27\xa3\x11\x39\x35\x14\x3f\xbd\x16\x7b\xc0\xf1\xd4\x54\x59\x8f\x2e\xed\x99\xcd\xfb\x5b\xaa\xe2\xb7\x8e\x46\x5a\xe5\xc4\xb3\x92\x18\x7b\x2e\xd1\x21\x57\xf4\xa5\x99\x6f\xba\x33\xff\xd7\xbd\x5a\xe4\x33\xb5\xbe\x14\xf7\x48\x87\xcc\x0d\xd7\xf8\xae\x2b\x7c\x67\x29\xfb\xc7\x3e\x61\x3f\xe6\xc8\x54\xdf\xe1\x84\xfd\x6b\x1d\x9b\x3d\xf7\xdf\xe4\x72\x73\x4e\x4e\x9d\x9e\x67\xb0\x45\xf2\x68\xf9\x2c\xa6\xdb\x83\x44\x16\x6e\xbd\xe4\x34\xb7\x7c\x96\x6b\xfa\x49\x75\x4f\xc0\xf6\x2e\x2e\x04\x2c\xad\xe6\xe0\xde\x95\xde\xff\x1c\xf8\x36\xaa\xb5\x73\xa2\x23\xb1\x5e\x0d\x69\x65\x90\x0b\x11\xab\xef\x9a\xeb\x81\x7d\xb8\xbc\x73\xd0\xfd\x01\xec\xf0\x2b\x00\x00\xff\xff\x66\xc7\x72\x63\xff\x09\x00\x00")

func compiledMetergovAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledMetergovAbi,
		"compiled/MeterGov.abi",
	)
}

func compiledMetergovAbi() (*asset, error) {
	bytes, err := compiledMetergovAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/MeterGov.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMetergovBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x09\x76\xdb\x30\x0e\xbd\x12\x16\x62\xe1\x71\xb8\xde\xff\x08\xf3\x20\xca\x5b\x9c\x3a\x96\x9d\xa4\x33\x53\xe9\xc5\x75\x61\x0a\x04\x3f\x3f\x3e\x40\x29\x38\x28\x24\x10\x52\x80\xc4\x8a\xa0\x08\x50\xa6\x98\x02\x00\x8b\x35\x40\x78\xf1\xca\x00\x49\x79\xee\x17\xaa\x83\x32\xe8\xec\x7d\x00\x63\x8a\x79\x6a\x12\xdb\xac\x59\x46\xb1\xba\xac\x98\x76\x2b\x3a\x2a\xf4\xde\x97\xb5\xe4\x65\x25\xae\x6e\x74\xb2\xf6\x7d\x2c\x23\xb7\x21\x6a\x9b\x95\x64\x1f\x6b\x50\xc0\x89\x71\x59\xbd\x2c\x6b\x96\xee\xb9\xa6\xdd\x3a\x70\x59\x4b\x06\xc9\xad\xd6\xcd\xca\xb6\x5b\x6b\x65\x31\xe7\xdd\xda\x75\x59\xbb\x67\x64\x69\x2b\x86\x24\x75\xb7\x76\xa5\xd1\x79\x2c\xab\xab\x98\xd4\x40\xd1\x61\x76\xa9\x9c\x1c\x50\x62\xd5\x0d\x16\xba\xcb\x2e\x1b\xe2\x2d\xc7\x33\xb3\x8b\xc6\x33\x09\x04\x7d\xdb\x19\x02\x40\x27\x47\x60\x27\x21\x67\x47\x47\x89\x3f\x5a\xbf\x65\x14\x70\x10\xcc\xfb\xd8\x0c\x0e\xce\xce\xe1\x5f\x6a\x8c\xc7\x35\x2b\xc2\x86\x89\x13\x6c\xcf\x7b\x82\xdd\x87\x63\x3c\xb5\xa2\x18\x23\xe6\x17\x58\x77\xde\xfe\xd6\xef\x0a\xb8\xed\xe0\xf2\xc5\xba\xfb\xe2\x98\x5b\x23\x46\xde\xe6\xe7\x6d\x26\x80\x02\x8c\x19\xf5\x36\xce\xf0\x9c\x69\xf9\x3e\xad\x31\x23\x70\x86\xc9\x57\xf8\xc4\xc8\x8f\xf8\xa0\xcf\xe0\xa7\x03\x2b\xf0\x8a\x28\xf0\x61\xb1\x33\xbf\xbe\xba\x50\x2f\x18\x65\xca\x9b\x07\x96\x8f\xb6\x3d\x3a\x04\xe1\x72\xb3\x17\x84\xb2\xee\x0f\x6b\x7a\xb8\x92\x2a\xf7\x2b\xa9\x23\x92\x8c\xea\xad\xf7\x23\x5e\xc7\x3d\x3e\xc4\x3f\x84\xcf\x8f\xe1\xab\x1d\xdf\xc6\x97\xf4\x1e\x5f\xd2\xc0\xd7\x55\x6e\xbd\x2b\x44\x84\xeb\xf3\xc8\x0c\x59\xef\x67\x68\xf5\xfb\xb1\x3e\xe3\xe2\x3a\x5e\x66\x06\x8d\x7e\x1f\xed\x54\x45\xc8\xe9\xe7\x94\x85\xcf\x6a\xf0\x67\x65\x61\xac\x4f\x29\x0b\x2b\xff\xa0\xb2\xb0\xdd\xe3\xc3\xb5\xfd\xb2\xb2\x64\x7f\x5f\x59\x78\xd0\xdd\x4a\x52\xc2\xff\x31\x0d\xc8\xe5\x7d\x0d\x48\x6a\xf7\x48\x58\x7c\x56\xb5\x97\x33\x29\xe5\x4f\xf0\x1d\xf6\xdf\x87\xef\x19\xcb\x06\xfd\xe8\x6a\x15\x74\xb3\xae\x2c\x8f\x15\xad\x4e\x30\xd4\x01\xfc\xf2\xbc\xcd\x14\x8d\x4f\x52\x31\x4a\xa6\x73\x03\xe6\xd0\x15\xbe\x4e\x59\xbf\xa2\x0c\xdb\xc2\x97\xf9\xc8\xfa\x8f\x8c\xbd\x42\x00\x2e\xdf\x63\x56\x82\x6d\xee\x43\xc8\x7f\xd7\xcc\x1e\xbb\x26\x02\x4e\x47\x3c\x1e\x44\x69\x7a\x93\x3a\x70\xc8\xa8\xa3\x59\x97\xda\x31\x4d\xc3\x44\xd6\x71\x78\x9a\xdc\x7b\xf4\xe0\x0d\xa6\x55\xa2\x8c\x43\x2a\x01\x94\xe6\xcd\x1a\xd7\x4c\xe2\xe9\x59\x26\x95\xa8\x08\x1b\x13\x83\x91\x1b\x1f\xf7\x1d\x66\x38\x12\xb3\x72\x21\xd6\x01\x70\xf2\x8f\xd7\x67\x87\x77\xce\x21\xb0\xaf\x00\x52\xec\x01\x9d\xe3\x77\x8e\x3c\xde\x98\x60\x0e\x5c\x51\xf6\xec\xd7\x8c\xb7\xd9\x2f\x65\xe2\xe5\xd7\x22\x62\xdc\x77\xf6\x8e\xf5\x6d\x1f\x77\x55\x81\xc2\x1e\xbb\xbd\x57\x49\xad\xf5\xda\xe7\x45\x3f\xae\x2b\xec\x75\x4e\x7f\x9e\x2d\x7e\x88\x87\xdf\x99\x2d\x7f\x27\x4f\x25\x05\x7e\x71\x2b\x82\xb5\xad\x1b\x0b\x74\x6d\x82\x37\xb6\x5c\x5e\x26\xc5\x85\x13\x9f\xf5\x43\xd1\x95\x5c\x62\x71\xb0\xa9\x64\xa2\x59\x9b\x25\xcd\x3a\xb8\x10\xc4\xbf\xc6\x26\x1a\x57\x56\xd6\xac\xa2\xc3\x12\x81\xa2\x36\x6d\x3a\xcd\x14\x75\x28\xab\x9c\x34\xf0\x81\x22\x6f\xac\xf8\x37\x77\x79\x5b\x35\x39\x49\x02\x5e\x7d\xdc\x49\x25\xa3\x23\x96\xe2\x29\xee\xa8\x72\x99\xf7\x8c\x58\x8a\xc3\xa7\xae\xef\x94\x27\x0a\x48\xb7\x99\x73\x58\x85\x18\xca\x24\x83\xe8\x3b\xb7\xfd\xa1\x9f\xd0\x21\x3f\xa8\xff\x2f\x22\xbd\xf3\xec\x09\xcd\xcb\x50\x1f\x68\x5e\xc6\xf9\x82\xe6\x65\x96\x17\x34\x6f\xfd\x4f\xbf\xe8\x4f\xd2\x6d\x7f\x22\x49\x28\xd9\x3b\x5a\xf0\x51\x71\x23\xfe\x6c\xcc\x7f\x60\xde\xc7\x5a\x77\x28\x6f\x3c\x1d\x19\x8d\xc9\x23\x9a\xd2\xbb\x98\x1c\x9c\xe9\x28\xfb\x41\x72\x16\x18\xd9\xf5\x9f\x62\x7f\xf1\xf2\x80\xfd\x25\x8f\x17\xd8\x5f\x6a\x3a\xc6\xfe\x63\x9c\x90\xba\x57\xc5\x2a\xf8\x7b\x55\x91\xe0\xab\xaa\x68\xac\xa2\x4d\x95\x40\xa7\x11\x81\x76\x45\xe3\x75\x7a\x20\x30\x52\x31\x8c\x67\xe2\x9b\xa6\x67\xaa\xe2\xb6\xc6\xf6\x7c\x0d\x38\xca\xf9\x51\x4a\xe6\xa9\xf5\xaf\xf7\x9d\xb5\xf5\x07\x2c\xac\x03\x5f\x60\x61\x9d\xf6\x56\xdf\xb9\x6a\xf3\x21\xbd\xfa\xd6\xae\xe0\x2f\x75\x9d\x9f\x69\xbc\x23\xe2\x86\xe9\x28\x45\xec\x28\xcb\xa8\xd6\x91\xd4\x86\xa7\x73\x67\xc1\x3f\xa4\xad\xbf\x80\xd9\xcd\xa9\xf0\xfc\xe6\xed\x09\x8e\x77\x9e\x0f\x38\xde\x85\x5f\xe0\x78\xd7\x7c\x8c\xe3\xbb\x72\xf6\x31\x7e\xf1\x3c\xd1\xdf\x38\x4f\xd0\x76\xa2\x38\x9f\x25\x00\x9e\x3b\x4f\x1c\xe5\x68\x9f\x66\x45\x7b\x5a\xef\x79\xff\x3f\x39\x0a\x5f\x73\x74\x3c\x3c\xff\x8f\xaf\xce\xff\xc1\xc0\x43\x11\x1f\x7c\xb7\xd3\xfb\x24\xa1\xd2\xb1\x0e\x6a\x9e\xab\xe6\x46\x15\xd4\x67\x63\xf3\x5e\x4a\x16\xaa\xc5\xa2\xf9\x6b\xa9\x20\x2a\xf9\x14\x29\xa9\x4f\x21\xae\x3c\xe6\x79\x6f\x9f\x78\xb7\x73\xaa\xac\x00\x05\x55\x94\xac\x58\x31\x62\x10\x27\xd0\x24\xa3\x77\x4e\xe8\x2c\x58\x5d\x61\xd0\xac\xb5\x43\x1c\xd9\x33\xb9\xf1\x84\xa2\x95\xd3\x50\xa5\xee\x80\x09\xac\x3b\x56\x9c\xa3\xb7\x32\x61\x00\x50\xfe\x4f\x00\x00\x00\xff\xff\xbe\x33\x97\x05\x80\x1e\x00\x00")

func compiledMetergovBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledMetergovBinRuntime,
		"compiled/MeterGov.bin-runtime",
	)
}

func compiledMetergovBinRuntime() (*asset, error) {
	bytes, err := compiledMetergovBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/MeterGov.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMetergovOpcode = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xdb\x76\xda\xbc\x12\x7e\x15\x3f\x82\x8e\x23\xeb\x52\x87\x71\x9a\x5d\x1a\x28\x86\xee\xee\x5e\x76\xed\xbf\xcf\xc0\xe3\xff\xcb\xb2\x2d\xdb\x58\x10\x63\x20\xc1\x69\x58\x2b\x04\xec\xd1\x78\x66\x34\xf3\xe9\xd3\x81\xcd\xbe\xfc\x42\x33\x72\xc8\x49\xd6\x7e\x14\x24\xfb\x56\xee\xd6\x5b\xcc\x9c\x59\xad\x7e\x98\xd5\x1e\x33\xbf\xdf\xd0\xec\xb9\xfc\x85\xdb\x75\x90\x63\x19\x39\x50\x92\xfd\x67\xff\x6d\xf3\x1c\x1b\x92\x5a\x6c\x8b\x3f\x70\xbb\x0b\xf7\x3c\x96\xbb\x6c\xb3\xde\xc4\x36\x85\x68\x84\xda\x0b\x8c\xf4\x9a\xbb\xb5\x47\xb7\xde\xfc\xaf\x77\x69\x8b\xbb\xfd\xf6\x25\x2b\x77\x8d\x92\x93\xb6\xc6\x2b\xc1\x6a\x6f\x76\xa6\x7c\xfe\x85\xd9\x6a\x17\x1f\x65\x8a\x91\xbd\xad\xe8\x6a\x6d\x7c\x2d\xa7\x83\x63\x33\x5f\x59\xf9\x5f\xb3\xa1\x99\x7f\xfe\x11\x94\x89\xca\xe1\xe6\x95\x99\x17\xdf\x79\x5e\xdd\x81\xc2\x7b\x24\x3c\xc3\xef\xd1\x42\x2b\x1a\x0b\x07\x82\x5a\xa2\x51\x76\x20\x48\x45\x52\x92\xe6\x14\x88\xf7\x7e\x20\x6a\x74\x4a\x94\x71\x9b\x2b\x76\x24\xea\x93\x5a\x39\xe5\x0e\x25\xa8\xbe\x28\x93\x49\xad\x8a\x18\x92\x33\x4e\x07\xa2\xb9\x49\x7b\xe5\x73\x6d\xc5\x50\x14\x69\x4a\xd4\x68\x22\xb5\xb3\xb6\x2f\xca\x55\x52\xd4\x5a\x2e\x55\xce\x87\xa2\x1e\x52\xa2\x3e\xd7\x94\x4b\x37\x88\x80\x90\x36\x29\xea\x81\xa1\xe7\x38\x10\xcd\x5b\xad\x5d\xa2\x9f\xaf\x83\xf3\xd5\xe4\x66\x54\x93\xd3\x9d\x39\x85\x0f\x32\x63\x6b\xaa\x12\x09\xf9\x1d\xd4\x45\xbf\x68\x5d\x7c\xc6\x87\x1b\xbc\x7a\x63\x59\xb9\xb7\xf5\xb7\xa6\xa8\xfc\x7e\x23\xea\x3b\xe1\x2d\xea\x61\xc7\x55\xd7\x68\xaa\xf2\x9f\x05\x13\xc3\x73\x6a\xf9\xba\x28\x12\x92\x34\x9a\x24\xea\xb7\xce\xf5\xe8\x45\x67\xc1\x6a\x37\x06\xa0\x41\x12\x06\xc3\x2b\xdd\x3d\x33\xfd\x7e\x23\xeb\x6b\x23\x7b\xc3\xfd\xce\x94\x7e\x5c\x11\x8f\x63\x59\xdd\xec\xfd\x75\x4d\xa2\x1f\x03\x5d\xcd\x53\x68\xaf\xec\x8f\x6d\xe7\x30\xb2\xbd\x89\x7e\x1b\xb7\xa8\x65\x18\x1c\x46\x82\x60\x17\x04\x92\xe1\xcf\x4d\xb8\xf6\xb2\xde\xb5\x0f\x7c\xbd\x87\x06\xce\x55\x97\xf9\xd0\xcd\x64\xfa\xd4\xcd\xab\x67\xd5\x9e\x36\xf0\x3c\x31\xc7\xa9\x9c\x91\xe4\x34\x2f\x7a\xe0\x1e\xc4\x07\x08\xdf\x44\x8d\x25\xd2\x8a\x26\x00\x9e\xf4\x40\xf9\xb5\x57\x08\xe6\x99\xf4\xad\xa3\xd6\xc4\xa4\x7b\xf2\xe0\xa1\x17\x35\x3f\xee\x80\xca\x7f\xc9\xcd\xd4\xca\xe6\x6d\xc0\x93\xff\x26\x65\xc5\xdd\xba\xde\xca\x19\x5d\x6f\x31\x7e\x06\x66\xa7\x87\xe1\x7d\x5d\xc5\x19\x59\xce\xf8\xa2\xb3\x7c\x99\xa5\x05\x9e\x7e\x80\xd2\x62\x30\xa3\xb4\x18\x74\xa5\x95\x37\x0a\x26\x85\xa1\xbd\xd5\x74\xe1\xd1\xd7\xf7\x0d\x84\x86\x19\x81\x70\x76\x39\x85\x97\x4a\xe2\x1c\x46\x6c\xe5\x41\x81\x91\xa1\x9f\xd1\x3f\x05\xc4\xcf\x5a\xfc\x7d\x24\x97\x27\x88\xe2\x4d\x48\x2e\xa7\xa3\x01\xf5\xe6\x2c\x97\x03\xff\xfb\x58\x2e\x57\x33\xd2\x9c\x5b\xb7\x1c\x18\xba\xc3\x50\xac\xf3\x8f\xc0\x72\x39\xb2\xcb\xbb\x5e\x08\xba\xe4\xae\x5f\x68\xbe\x99\x8f\x40\xfd\x04\xa8\x19\xf9\xa6\x48\xfc\x6c\x1b\x05\x8f\x4f\x1e\x84\x9e\x53\x5a\xa8\x3e\x4b\xeb\xe2\xda\x70\x64\x32\xcd\xba\x7b\x52\xb4\xad\x60\xb0\xe6\x3f\x22\x5e\xb1\x13\x37\xa3\x8d\x81\x01\x19\xcc\xcf\xd9\x5b\x7d\xe5\x21\x6d\x3c\x48\x25\x40\x2a\x26\x14\x14\x0a\x2e\xde\x07\x18\x3c\x24\xc1\xa4\xd2\xd1\x6d\xda\x1d\xe5\x77\x95\x11\xb8\x9d\x99\x0b\xf3\x5a\xbd\xd2\xa7\xf4\xb5\x20\xd6\xd6\x7f\x45\xe7\xcc\x57\x26\x61\xe8\x11\x2c\xda\x95\x7a\x06\x51\x17\x53\xd7\xbf\x71\x66\x7c\xb9\x81\x57\x77\x6f\xc8\xd8\xdc\x49\x8b\x14\x25\x5a\x74\xca\x4b\xeb\xa9\x28\x14\x15\x4c\x79\x8a\xb9\x28\xb8\xf7\x84\x53\xe1\x48\xa1\x2c\x63\x9a\xa2\xb4\x8c\x10\xe3\x72\xa7\x1c\xb7\x9a\xc9\x7a\x0e\xf1\x76\x65\xbe\x5a\x3f\xf1\x1e\xf5\x1f\xd6\x07\x3f\x52\x79\xaa\x5a\x8c\xf7\x5b\x2c\xcb\x2b\x62\x17\x76\x97\x18\x07\xac\x8a\x36\x65\x39\x8b\x62\xa3\xb6\x57\x6e\x15\x7e\xdb\xaf\x92\x41\x15\x83\xd4\x63\x69\xb3\x9a\xc9\x52\x1c\xbe\x06\x05\x96\xd7\x12\xf8\x73\xe7\xd6\x1e\xc3\x38\xd7\x71\x95\xd1\xb8\x0a\x9a\x4e\x1f\x57\x9f\x4c\x19\x12\xf6\xac\x42\xd3\x2e\x47\xd5\x58\x1e\x07\xdb\x91\xfe\xf6\x6e\xd8\xf2\x3d\x29\x9c\x1c\xdf\xcf\x4d\xe1\x4e\x68\x6a\x67\xc3\xe3\x29\x36\x58\x3b\x2d\x04\x27\xa9\xc2\xab\x6b\x00\xe7\x07\xde\x6b\x86\x07\xbf\xdf\xa8\x45\x23\xea\x66\xb0\x1b\xbf\xf0\x91\xae\x0c\x89\xd0\xa5\xd8\xf0\x5f\x9b\x70\xca\x1d\x2f\x54\xc6\xe4\xed\x21\x3a\x57\xda\xcc\x85\x17\x72\x06\x5b\x66\x2c\x91\xf5\x96\x7a\xce\x04\x24\xea\xe4\xf5\x86\x8d\x92\xa0\xc1\x29\x01\x1a\x90\x1b\x46\xaa\xff\x8a\x2b\x09\xd5\x4b\x03\x07\x0d\x12\x50\x09\x46\x80\x82\x03\x07\x85\x52\x40\x01\x81\x83\x4c\x90\xa8\x9b\xb0\xcb\x44\x41\x7f\x16\xd4\x22\x9c\x69\xb3\x93\x37\x45\xd6\xf6\x6a\xb7\xa0\x97\xe6\x66\x6d\xd1\xe5\xd2\xd4\x2c\xa7\x7b\x8b\x13\x1e\xcd\x4f\x60\xee\x31\x35\x11\x89\x35\xc4\x53\x68\x1d\x75\xb0\xc9\x00\x7f\x23\x46\xc3\x89\x29\x98\x22\xc3\x15\xd5\x7e\x65\xf0\x77\xa2\x35\xc3\x6d\xa4\x07\xc9\xc9\x31\x88\xdc\x9f\x75\x69\x32\x91\x72\x4c\x65\x5d\x9a\x16\x0b\x63\x5d\x9a\x4f\xdc\xb6\x7c\x1b\xd6\xd5\x97\x48\x97\xe7\x8d\x96\x20\xc4\xc4\x25\x08\x29\x24\x13\xea\x36\xe3\xff\x05\x1c\x33\x76\x8f\x56\xed\xf8\x71\x0d\x60\x4e\x9d\xcb\x5d\x35\x54\x75\xb6\x5d\xdc\x14\xbf\x67\x83\xf3\xa8\x55\x27\x34\x59\xb9\xde\x5c\x67\xd5\x6d\xc0\x5c\x6a\x2d\x09\xea\x8e\x96\x7c\x62\xf9\x83\x61\xb9\x89\x07\x5c\x6f\x84\xe5\x46\xe3\xc2\xb0\xdc\xc4\x93\xcb\xef\x84\xe5\xb3\x8b\x3f\x5a\x96\x9e\xa9\x59\x79\xbc\x3a\xb2\x90\x99\x1a\x4b\xeb\x9d\x38\x53\x53\x1c\x24\x38\x00\x46\xa0\x50\x8c\x11\xf0\x40\x15\xaf\x97\xc4\x19\x51\x0c\xa4\xa2\x55\x9b\xea\x13\x88\xb7\x98\xa9\x75\x1d\xe2\xde\x96\xc5\xdf\x06\xc5\xd1\x18\xcd\x0b\xb0\x49\xef\x3f\xfe\x22\xa3\x75\x17\x1c\x89\x98\x02\x91\x36\xfe\x52\x60\x29\x10\x69\x8b\x89\x5b\xb5\x0f\xb0\xc8\x48\x87\x5f\xe7\x72\xab\x07\x5c\x41\x10\x8b\x76\xa5\xec\x67\xc0\x85\x04\x3b\x3c\xea\x69\x94\x96\x68\x5a\xf2\x72\x1b\xa0\x63\xd6\xa2\x00\x85\x11\x9f\xd3\x0b\x10\xe2\x9d\x49\xeb\xc3\xe4\xc1\x94\xcd\xb5\xf4\x91\xb5\xfb\xa3\xb6\xe7\xe3\x5f\xcc\x5d\x85\xda\x5e\xf2\x85\xa1\xb6\x07\xfd\xbe\xa8\x9d\xa6\xa5\x1e\x71\x99\xb4\x94\xbe\x56\x0c\x73\x37\x10\x58\xd8\x42\x88\x9b\x07\x63\x0f\xee\x43\x4b\x6f\x03\x9a\xbe\x50\xca\x80\x6f\x0e\x08\x7f\x82\xe6\xfd\x40\xf3\xee\x98\x89\xb7\xde\x4e\xc7\x37\xde\x4e\x1f\xef\x8d\xcd\xea\xba\x6b\x72\x25\x54\xbf\xf7\x05\x93\xcc\x78\x6a\x91\xb9\x5c\x5b\xd0\x8e\x59\x02\x79\xe1\xb8\xca\xbd\x31\x5a\x32\x6b\x54\x41\x81\x3b\x61\x28\x05\x96\x17\x52\x1a\xe1\x0b\xc9\xb8\xe5\x58\x9c\x2e\xa3\x7b\x9e\x68\x39\x9e\x50\x86\xdf\xad\xaf\xd6\x4f\x35\xac\x41\x8d\x6a\x46\x19\xc5\x38\x91\xf9\x11\x4b\x95\x19\x39\x48\xf4\x9e\x0b\x9a\x73\x99\x95\x5f\x56\xf5\xaa\x1f\x39\xfc\x53\xd9\xf6\x27\x23\x87\xdf\xbf\x33\x72\xf8\x3f\xc9\xdc\xfa\xf9\xc5\x9a\x12\x7b\xe9\x1e\x52\x95\x1c\xf8\x9f\x70\x50\x3e\x18\x1d\x8e\x24\x0b\x04\x60\x3e\x27\x54\x10\xe5\x73\x6a\x69\x81\xde\x99\x22\x68\x0d\xe6\x91\x03\xd3\xd9\xbf\x01\x00\x00\xff\xff\xf9\x09\xfe\xa9\x08\x40\x00\x00")

func compiledMetergovOpcodeBytes() ([]byte, error) {
	return bindataRead(
		_compiledMetergovOpcode,
		"compiled/MeterGov.opcode",
	)
}

func compiledMetergovOpcode() (*asset, error) {
	bytes, err := compiledMetergovOpcodeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/MeterGov.opcode", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMeternativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x94\x3f\x6b\xc3\x30\x10\xc5\xbf\xcb\xcd\x9a\x0a\xed\xe0\xb1\x7b\xa7\x8e\x21\x98\x73\x7c\x31\x02\xf9\x24\xa4\x77\x29\x26\xe4\xbb\x17\x4a\x8d\xfb\x27\x25\x1e\xdc\xc4\x64\x14\xdc\x1d\xef\xf7\x78\x7a\x9b\x23\xed\xa2\x16\xb0\x82\x2a\x64\x13\x47\x5e\x93\xa1\x50\xb5\x39\x92\x72\x2f\x54\x11\xb7\x6d\x26\x47\x18\xd2\xf8\x92\x52\xe8\xb4\x75\xe3\x80\x32\xfc\x41\xea\x1e\xb9\xee\x04\xe4\x28\x1a\x7e\x1e\x99\x0e\x98\x57\x3c\x3c\x3e\x7d\x1c\x48\x3c\x70\x13\x84\xaa\x3d\x87\x22\x8e\x0a\x18\xf2\x62\xe0\xc6\x07\x8f\x81\x2a\x3a\x78\x79\x9b\x76\xf7\xa6\x3b\xf8\xa8\x74\x72\x8b\x2a\xe7\x02\xc9\x97\x84\x7f\xdd\xff\x1f\xe1\x67\x2d\x45\x04\x87\x57\x4b\x29\x0c\x37\xb0\xf6\x73\x7b\xb6\xb7\x6e\x1a\xe8\xa3\x29\xce\x8b\xfb\x45\xd9\xd5\xc5\x9a\x4b\x78\x4d\x8c\x61\x26\x9b\x46\x1d\x87\x56\x42\x58\x73\xdb\x7e\x03\x5c\x9a\x63\x46\x96\xba\x1b\x87\x69\x81\x86\xe9\xd6\x51\x31\x7f\xff\xd4\x67\xcb\x2a\xed\x3d\xff\xd4\xf5\x04\xf9\xde\xbd\xbe\x6a\x29\x6e\xdf\x03\x00\x00\xff\xff\xeb\xb1\xae\x26\x0d\x08\x00\x00")

func compiledMeternativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledMeternativeAbi,
		"compiled/MeterNative.abi",
	)
}

func compiledMeternativeAbi() (*asset, error) {
	bytes, err := compiledMeternativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/MeterNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMeternativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledMeternativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledMeternativeBinRuntime,
		"compiled/MeterNative.bin-runtime",
	)
}

func compiledMeternativeBinRuntime() (*asset, error) {
	bytes, err := compiledMeternativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/MeterNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMeternativeOpcode = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledMeternativeOpcodeBytes() ([]byte, error) {
	return bindataRead(
		_compiledMeternativeOpcode,
		"compiled/MeterNative.opcode",
	)
}

func compiledMeternativeOpcode() (*asset, error) {
	bytes, err := compiledMeternativeOpcodeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/MeterNative.opcode", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xc1\x6a\xc3\x30\x0c\x86\xdf\xe5\x3f\xfb\xd4\xb1\x1d\xf2\x0e\x3b\xed\x58\xc2\x50\x12\x75\x98\xa5\x72\x88\xa4\xac\xa6\xe4\xdd\xc7\x4a\x12\xc3\xe8\x08\x65\x47\xe3\xcf\xbf\x3e\xa3\xff\x78\x45\x9b\x44\x8d\xc4\x50\x9d\xa8\x57\x0e\x88\x32\xb8\x29\xaa\xe3\x15\x42\x67\x46\x85\xf7\x4f\xce\x08\xb0\x3c\xfc\x9c\x9a\x6c\xac\x4f\x07\xcc\xa1\x00\x13\xf5\xce\x05\xf1\x28\x76\x78\x7e\xc1\x5c\x87\x15\x51\x36\x04\x24\xb7\x25\xbc\x0e\x18\x28\x53\xd3\xf3\x36\x58\x8d\x8c\x5f\xdd\xa8\x89\x7d\xb4\x8c\x0a\x92\x64\x85\xb6\xec\x93\x4b\x6b\x31\xc9\x6d\x7e\x91\xb7\xd1\x1f\x71\x2f\x62\x1f\xbf\xc4\xb6\x97\xf7\xbf\xb3\x2f\x3d\x45\xfe\x7a\x54\xb7\xe8\xf0\x85\x5b\xb7\x34\xee\x39\x51\xd7\x8d\xac\xfa\x7f\x27\x92\x24\xf9\x9c\x5c\xef\x15\x20\x4a\xc7\x17\xee\x56\xdf\xc5\xe2\xcf\x3a\x6c\xf8\x92\xb4\xf0\xfb\xed\x78\xbb\x2d\x61\xb9\xe7\x89\xc5\x30\xd7\xdf\x01\x00\x00\xff\xff\xfb\x8f\x43\xc8\x9d\x02\x00\x00")

func compiledParamsAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsAbi,
		"compiled/Params.abi",
	)
}

func compiledParamsAbi() (*asset, error) {
	bytes, err := compiledParamsAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsBin = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x09\x92\xeb\x3a\x08\xbc\x52\x03\x62\x3b\x8e\x24\x4b\xf7\x3f\xc2\x2f\xd9\x4e\x9c\x59\x7e\x66\x92\x57\x23\x57\x45\x0a\x60\x10\xdd\x80\x0d\x01\x43\x81\xb2\x94\x00\xa9\x11\x40\x50\x37\x00\x81\xb9\x69\x53\x18\xa1\x14\x8a\xb5\x83\xb1\x34\x92\xeb\x77\x0a\x70\xbd\x6f\x40\x11\xa3\xdd\x4a\xfd\xf0\x20\xea\x1d\x84\x37\x57\x02\xc5\x64\x9e\x8b\x2c\x60\xc2\x2e\xb3\x64\x01\x95\x3d\x4e\x57\x5f\xd2\x18\xb5\x5a\xed\xa7\x34\xfd\x90\x76\x29\x1d\x31\xf4\x90\x6e\x5d\x5d\xdb\x95\xd7\x95\xaf\xc5\x97\x7c\x91\xba\xf2\x09\x88\x41\x82\x40\x89\x40\x40\x96\x14\x94\x64\x09\x03\xaf\x23\x92\x73\xd7\x8a\x7e\x96\xe9\xfe\x18\x81\x44\xd4\xb4\x01\x8f\x51\xab\x7c\x8d\xda\xed\xb5\xa8\xf7\x08\xdc\xca\x8a\xb0\x33\x41\x81\xe0\xa0\xc5\xc8\x6e\x4b\xbb\xcd\xa9\x49\x82\x24\xa6\x3c\xde\x64\x7c\x93\xff\x24\x23\x88\xcd\x8f\x5e\xfd\xce\xc6\x4f\x8b\xec\x15\xdb\x9f\x6f\xbb\xa3\xd8\xae\x3b\xbd\xe2\x5d\xe4\x15\x6b\x2a\xa4\x3b\x2e\xb4\x6d\x0b\x97\x75\x13\x9f\x88\x2e\x9e\xf5\xdd\x52\xc6\x91\x21\x0a\x16\x8e\x27\x8b\x8b\x25\x48\xf0\xd2\x50\xbd\x30\x08\xf8\x34\x76\xb5\xb4\xee\xc5\xd2\x86\x54\x86\xa9\x87\xa9\x89\xab\x17\x9b\xce\x0c\x67\x53\xa7\x65\xb7\x4e\x56\x3e\xc7\x53\x3c\xc1\x74\x75\x00\x5e\xc1\xc5\x84\x4b\x5a\x4d\xa9\x21\x21\xa7\x37\x79\xec\xcf\x7f\xe9\x75\xf0\x07\x84\xe4\x56\xf1\xb7\xfd\x01\x9d\xc7\xda\xe6\xb3\x03\x80\x7b\x7e\x21\xab\x77\xf6\x7a\xf6\x80\x34\xd2\xb3\xce\x79\x4d\x8b\xc7\x3a\xd7\x3a\xe9\xd2\x3a\xd4\x65\x3b\xf4\x32\x8e\xd3\x69\xb7\x3f\x87\xcf\x75\x17\x9f\x1c\x43\xb8\xd8\x0c\x28\xe9\xd4\x4e\x63\xcb\xf0\x46\x22\x63\xf2\xa4\x94\x22\xd9\x58\x6b\x6f\xd5\xaa\x0e\xcb\xc9\x94\x23\xd2\x66\xcf\x8d\x3c\x83\x7f\xdb\xa9\xf5\xc8\xd0\x8e\xc9\xf5\x2a\x63\x6d\x23\xc5\x18\xf5\xce\x17\xff\x11\x5f\xfc\xff\x7c\xdd\xb2\xe2\x9f\x19\x12\xde\x9e\x30\x24\x85\x9e\x33\x74\xf8\x5f\x72\x46\x10\x9d\x6f\xdd\xbe\x45\x87\xcf\x6b\xaa\x2a\x7d\x3f\x4d\xd7\x7e\xfe\x7b\x13\xf5\xe4\x4a\x36\xb7\x7a\xe6\x4b\x7f\x81\xf9\xef\xf0\xdc\xf4\x19\x9e\x23\xdf\xc1\x73\xce\x37\xf0\xc4\xfa\x84\x55\x32\x35\xf6\xea\xd5\x59\xa0\xc1\x48\xa1\xc9\xbc\x46\x9c\xd5\xe9\x19\x1a\x04\x37\xd6\x52\xda\x18\x69\xa5\x0c\x55\xae\xd9\x7a\x4d\xe1\x39\x30\x25\x85\xa2\xd3\x68\x25\x3d\x6a\x05\x38\xff\x0b\x00\x00\xff\xff\xa4\xeb\x2c\x4e\xc2\x08\x00\x00")

func compiledParamsBinBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsBin,
		"compiled/Params.bin",
	)
}

func compiledParamsBin() (*asset, error) {
	bytes, err := compiledParamsBinBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.bin", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x59\x76\xe4\x30\x08\xbc\x52\x01\x62\x3b\x8e\x24\x4b\xf7\x3f\xc2\x3c\xd9\xee\x25\x99\x4c\x27\xee\x79\x91\x3f\xac\x06\x9a\xa5\x0a\xb0\x21\x60\x28\x50\x36\xa0\x88\x11\x8c\x00\x75\x75\x03\x20\xea\x1d\x84\x37\x4f\x02\xc5\x64\x9e\x87\x2c\x60\xc2\x2e\xb3\x64\x01\x95\x3d\x4e\x57\x5f\xd2\x18\xb5\x5a\xed\xa7\x34\xfd\x90\x76\x29\x1d\x31\xf4\x90\x6e\x5d\x5d\xdb\xca\x2a\x30\x37\x6d\x52\x02\xa4\x4b\x63\x71\x64\x7b\xc8\x75\xaf\x20\x75\xd5\x13\x10\x83\x04\x81\x12\x81\x80\x2c\x29\x28\xc9\x12\x06\x5e\x57\x24\xe7\xae\x15\xfd\x2c\xd3\xfd\x31\x02\x89\xa8\x69\x03\x9e\xa3\x56\xf9\x3b\x6a\xb7\x6b\x51\xef\x11\xb8\x95\x15\x61\x67\x82\x02\xc1\x41\x8b\x91\xdd\x96\x76\x9b\x53\x93\x04\x49\x4c\x79\xce\x64\x7c\x51\xff\x24\x23\x88\xcd\x8f\x5e\xfd\xce\xc6\x77\x87\xec\x8a\xed\xf7\xd9\xee\x28\xb6\x47\x4e\x57\xbc\x8b\x5c\xb1\xa6\x42\xba\xe3\x42\xdb\xb6\x70\x59\x99\xf8\x44\x74\xf1\xac\xef\xb6\x32\x8e\x0a\x51\xb0\x70\x3c\x59\x5c\x2c\x41\x82\x97\x86\xea\x03\x83\x80\x4f\x63\x57\x4b\xeb\x5e\x2c\x6d\x48\x65\x98\x7a\x98\x9a\xb8\x7a\xb1\xe9\xcc\x70\x36\x75\x5a\x76\xeb\x66\xe5\x73\x3c\xc5\x0b\x4c\xd7\x04\xe0\x0a\x2e\x26\x5c\xd2\x6a\x4a\x0d\x09\x39\xbd\xc9\xf3\x7c\xfe\xcf\xac\x83\x3f\x20\x24\xb7\x8e\xbf\xbd\x9f\xd0\x79\xee\x6d\x3e\x27\x00\xb8\xd7\x17\xb2\x66\x67\xef\x67\x0f\x48\x23\x3d\xfb\x9c\xd7\xb6\x78\xee\x73\xad\x93\x1e\x5a\x87\xba\x6c\x87\x5e\xc6\x71\x3b\xed\xf6\xe7\xf0\xb9\x72\xf1\xc9\x31\x84\x8b\xcd\x80\x92\x4e\xed\x34\xb6\x0c\x6f\x24\x32\x26\x4f\x4a\x29\x92\x8d\xb5\xf6\x56\xad\xea\xb0\x9c\x4c\x39\x22\x6d\xf6\xdc\xc8\x33\xf8\xa7\x93\x5a\x8f\x0a\xed\xd8\x5c\x57\x19\x6b\x1b\x29\xc6\xa8\x77\xbe\xf8\x97\xf8\xe2\x7f\xf3\x75\xab\x8a\xbf\x67\x48\x78\x7b\xc1\x90\x14\x7a\xcd\xd0\xe1\x7f\xc9\x19\x41\x74\xfe\xeb\xf6\x2d\x3a\x7c\x3e\xb6\xaa\xd2\xd7\xdb\x74\xbd\xcf\x5f\x6f\xa2\x9e\x5c\xc9\xe6\x56\xcf\x7a\xe9\x37\x30\xff\x19\x9e\x9b\xbe\xc2\x73\xe4\x3b\x78\xce\xf9\x06\x9e\x58\x9f\xb0\x4a\xa6\xc6\x5e\xbd\x3a\x0b\x34\x18\x29\x34\x99\xd7\x8a\xb3\x3a\x3d\x43\x83\xe0\xc6\x5a\x4a\x1b\x23\xad\x94\xa1\xca\x35\x5b\xaf\x29\x3c\x07\xa6\xa4\x50\x74\x1a\xad\xa4\x47\xad\x00\xe7\x9f\x00\x00\x00\xff\xff\x9e\xdf\xcb\xac\x82\x08\x00\x00")

func compiledParamsBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsBinRuntime,
		"compiled/Params.bin-runtime",
	)
}

func compiledParamsBinRuntime() (*asset, error) {
	bytes, err := compiledParamsBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsDocdev = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\xca\x4d\x2d\xc9\xc8\x4f\x29\x56\x52\xb0\x52\xa8\xae\xd5\x01\x89\x94\x64\x96\xe4\xa4\x82\xf8\x4a\x01\x89\x45\x89\xb9\xc5\x0a\x25\xf9\x0a\xb9\x89\x79\x89\xe9\xa9\x0a\xe9\xf9\x65\xa9\x45\x79\x89\x79\xc9\xa9\x0a\x05\x20\xb9\xd4\x92\xd4\xa2\x62\x3d\x25\xae\x5a\x40\x00\x00\x00\xff\xff\xc9\xe3\x4a\x70\x4b\x00\x00\x00")

func compiledParamsDocdevBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsDocdev,
		"compiled/Params.docdev",
	)
}

func compiledParamsDocdev() (*asset, error) {
	bytes, err := compiledParamsDocdevBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.docdev", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsDocuser = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\xca\x4d\x2d\xc9\xc8\x4f\x29\x56\x52\xb0\x52\xa8\xae\xe5\xaa\x05\x04\x00\x00\xff\xff\x2b\x19\xdb\x78\x14\x00\x00\x00")

func compiledParamsDocuserBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsDocuser,
		"compiled/Params.docuser",
	)
}

func compiledParamsDocuser() (*asset, error) {
	bytes, err := compiledParamsDocuserBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.docuser", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsOpcode = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\xeb\x72\xab\x38\x0c\x7e\x15\x3f\x82\x2d\xdf\xf0\x4f\x83\x45\x37\x5b\x52\x52\x2e\xdd\x6e\xff\x75\x77\x7a\x9e\x21\x8f\x7f\xc6\x36\xb7\x00\x49\x73\xe9\xed\x30\x13\x26\x23\xa4\xcf\xb2\xa4\x4f\x32\xec\xda\xfa\x2f\x46\xe8\x3e\xa1\xa4\xff\x2b\x28\xd9\xd6\x4d\x59\x21\xc9\x6c\x51\x3c\xd9\xa2\x45\xe2\xda\x1d\x23\x9b\xfa\x05\xab\x32\xe8\x01\xa1\x7b\x46\xc9\xdf\xed\x76\xb7\x19\x0c\x69\x54\xab\xf0\x09\xab\x26\x3c\x73\x58\x37\x64\x57\xee\x06\x1b\x21\x58\x54\xea\x05\x40\x27\xe6\x59\xe9\x30\x2b\x77\xff\x4e\x44\x15\x36\x6d\xf5\x40\xea\xa6\x03\x39\xea\xeb\x20\x09\x5e\x3b\xdb\xd8\x7a\xf3\x82\xa4\x68\x86\xa5\xa4\x5e\xf8\xdb\xab\x16\xa5\x75\x51\xcf\x84\x8d\x5d\x79\x91\xfa\x1f\xbb\x63\xc4\x6d\x9e\x02\x98\x20\x74\x9f\x77\x17\xb1\x0f\x6e\xdc\xb9\x7f\x02\x9a\xe7\xc2\x08\x4a\xf0\x71\x74\x31\xeb\x5c\x3c\xd0\x4c\xd0\x5a\x65\xb3\x03\x4d\xa3\xd7\x34\x33\x2e\x32\x9a\xa0\x9c\x6a\xba\x1e\x73\x4c\xc8\xe9\x7c\x9d\xce\xba\x4a\x2e\xcf\xba\x91\x93\xf4\x04\xed\x83\x1c\xd5\x6d\xea\xa5\x40\xac\x73\x7d\x08\xdb\xfe\xb6\x48\x51\x5c\xf3\xa1\x6c\x42\x48\xa3\x7a\x2f\x07\x3a\xc1\xf0\x77\x1e\xee\x30\x45\x3d\x00\xbc\xc8\x3c\x6c\xa9\xff\xf5\x24\xe0\x3c\xec\x79\xdc\x78\x28\xd5\x33\x83\x69\xf9\xe5\xc1\xcc\xd4\xcf\x08\xe6\x5a\x34\x20\x15\xb3\x68\x4c\x89\x1a\x56\xed\x9d\xe1\xd1\xcb\x19\x7b\x27\x6b\xc2\x01\xfa\x12\xa3\xf3\xa5\x4d\x3b\x7f\xba\x4e\x71\x66\xe4\xf1\x8a\x32\xce\xc7\xb6\xc5\x55\x7e\xfe\x46\x83\x11\x9d\x34\x83\xf7\xae\x90\x8c\xeb\xac\x3e\x39\xa8\x63\xd9\xa7\xef\xc4\xe2\x72\xd7\x7d\xc2\xb0\xba\xd2\x18\x1f\xfb\x0c\xcf\xa7\x94\x73\xb3\x4c\x0f\x3b\xf6\x02\xee\x75\x92\x8c\x6b\x63\xaf\xed\xfa\x74\x35\xe8\x22\xc4\x7c\xa4\xde\x2c\x19\x23\x03\x3a\xc2\xf2\x39\x00\xb3\xa7\x92\x39\x60\x86\x0d\x28\xd0\x52\x19\x95\x69\xa1\x8c\x42\x6e\x81\x2a\xa9\x13\x25\x15\xd7\x52\x0b\x95\x6b\x00\xaa\x41\x49\xcd\xbc\x9e\xff\xa7\xc4\xf1\x1d\x4c\xaa\xe3\xa6\xd2\x39\x64\x92\x75\xae\xc2\xba\xbe\x81\x0d\x61\x6a\x0a\xa3\xac\xe1\x21\x36\x22\xde\xd6\xdc\x11\xeb\x03\xf8\x03\x46\xfc\xb6\x2d\xce\xc8\xb7\x58\xe9\xae\x4b\xc9\xe9\xfc\xbe\xdb\x21\xf9\xa2\x07\x47\xf8\xa3\xad\x48\x8c\xd3\xe1\xa0\xed\x25\x51\x03\x9f\x1b\x7f\x02\x0b\x63\xa4\x63\xd1\x5a\xeb\x84\xe1\x94\x72\x46\xef\xbc\xb3\x75\x20\xf6\x49\x40\xdd\x9f\x24\x63\xbb\x19\x66\xd9\x02\xbf\x7f\x1a\x0e\x89\x47\x95\x57\x7b\xf8\xe4\x37\x0b\xc0\x34\x3f\x81\x4d\x90\x20\x07\xa1\xf2\x84\x4a\x26\x73\x99\x31\x74\x26\xd1\x29\xe3\x1c\x73\xc8\x99\xe1\x82\x9b\x14\xa4\xcd\x52\xab\xac\x44\x65\x72\x60\x06\x13\xa3\xf2\xcc\x38\xa6\xcd\xd8\xf5\xbf\x66\xf2\x15\xe5\xdd\x68\xb2\x3e\x95\xe8\x07\xd1\x2f\x75\x4c\x52\x44\x7b\x9c\x79\xfc\x9b\x99\xc7\x6f\x65\xde\x7a\x06\xe0\xd3\x69\xc5\x61\x3e\xa8\x6e\xa4\x15\x17\xec\x4b\x69\xb5\x88\xcf\x11\x24\xe8\xc6\x4d\xd1\x2c\x3c\x5e\x79\x45\x5b\x0d\xc1\xd1\x03\xee\xf6\xb6\x53\xfd\x28\x99\x6b\x7c\x2e\xad\x0c\x58\xa6\x72\x67\x57\x6b\x0c\xbe\x89\x51\x5f\x58\xfa\x4e\x7e\x70\xe9\xa3\xf9\xd3\x4a\x3f\xcf\x7f\x52\xe9\xc7\xce\x11\xdf\x65\x8b\xf2\x2e\x22\xaa\x78\xd2\xb4\xda\x6a\xe0\x54\x26\xe4\x1e\xb3\xcc\xde\x83\x54\xc1\xc6\x57\x28\xfb\xe5\x57\x0d\x5f\x7a\xa2\x50\x47\x5f\xbc\x33\xb9\x36\x89\x4c\x18\xd5\x0a\xa4\x10\x29\xa2\x51\x42\x20\xa9\x63\xed\xd1\x3d\xbc\xc6\xa5\xbd\xf5\xff\xaf\x03\x24\x78\xc8\xb7\xf1\x4b\x50\x10\x3f\x97\x95\xd7\xf2\xb0\x6f\xff\xf9\xd5\x4c\x8c\xa4\xf4\x2f\xd5\x96\x52\x30\x17\x11\xe1\x77\x00\x00\x00\xff\xff\x8a\x80\x97\x04\x06\x13\x00\x00")

func compiledParamsOpcodeBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsOpcode,
		"compiled/Params.opcode",
	)
}

func compiledParamsOpcode() (*asset, error) {
	bytes, err := compiledParamsOpcodeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.opcode", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsSignatures = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x36\x36\x49\x36\xb0\x48\x35\xb5\x52\x48\xad\x48\x4d\x2e\x2d\xc9\x2f\xd2\xd0\xe4\xb2\x48\x4d\x4c\x34\x4b\x4c\x36\xb0\x52\x48\x4f\x2d\xd1\x48\xaa\x2c\x49\x2d\x36\x36\xd2\xe4\x32\x32\x37\x4e\x33\xb1\x34\x31\xb0\x52\x28\x46\x08\xeb\x94\x66\xe6\x95\x18\x99\x9a\x69\x72\x01\x02\x00\x00\xff\xff\xcc\x58\x86\x4a\x4b\x00\x00\x00")

func compiledParamsSignaturesBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsSignatures,
		"compiled/Params.signatures",
	)
}

func compiledParamsSignatures() (*asset, error) {
	bytes, err := compiledParamsSignaturesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.signatures", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsnativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x41\x4e\xc3\x30\x10\x45\xef\x32\x6b\xaf\x8a\x60\x91\x3b\x70\x82\x2a\x42\x93\x74\x8a\x2c\xcc\x38\xca\xfc\x09\x58\x55\xef\x8e\x5a\x51\x27\x10\xa4\x88\x2e\x2d\x7f\xfb\xbf\xf7\xf7\x27\xea\xb3\x1a\x58\x41\xcd\x91\x93\x49\xa0\xa8\x83\xc3\xa8\xd9\x9f\x48\xf9\x5d\xa8\xa1\x37\x29\x14\x08\x65\xb8\x1c\xba\x02\xb1\x87\x1d\x9d\x43\xbd\x9f\x38\xb9\xcc\x09\x8f\x8a\xdd\xe3\x13\x9d\xdb\x70\x4b\x28\x23\x4e\xf2\x62\x02\x0a\x94\x1d\xdf\x0d\x6d\xa0\x81\x0b\x77\x49\x6a\xbb\x81\x21\xcf\x0e\xee\x62\x8a\x28\x97\xb7\x59\x6f\xa1\x5a\x71\x74\xed\x11\xb3\x5e\x29\x66\x03\x8c\xbe\x14\x58\xf5\xcb\xa7\xf4\x8e\x3c\xfe\x80\xa8\x1a\xf3\xf7\x7c\x38\x8c\x62\x76\x35\xd8\x06\x9c\xa2\x7c\xfc\x17\x6d\x63\xdb\x15\xf9\xeb\xaf\xe5\xfe\x80\x5e\xce\x7e\x3f\x74\xfb\x15\x00\x00\xff\xff\x4b\xb6\x04\x06\x13\x02\x00\x00")

func compiledParamsnativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsnativeAbi,
		"compiled/ParamsNative.abi",
	)
}

func compiledParamsnativeAbi() (*asset, error) {
	bytes, err := compiledParamsnativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ParamsNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsnativeBin = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledParamsnativeBinBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsnativeBin,
		"compiled/ParamsNative.bin",
	)
}

func compiledParamsnativeBin() (*asset, error) {
	bytes, err := compiledParamsnativeBinBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ParamsNative.bin", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsnativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledParamsnativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsnativeBinRuntime,
		"compiled/ParamsNative.bin-runtime",
	)
}

func compiledParamsnativeBinRuntime() (*asset, error) {
	bytes, err := compiledParamsnativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ParamsNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsnativeDocdev = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\xca\x4d\x2d\xc9\xc8\x4f\x29\x56\x52\xb0\x52\xa8\xae\xe5\xaa\x05\x04\x00\x00\xff\xff\x2b\x19\xdb\x78\x14\x00\x00\x00")

func compiledParamsnativeDocdevBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsnativeDocdev,
		"compiled/ParamsNative.docdev",
	)
}

func compiledParamsnativeDocdev() (*asset, error) {
	bytes, err := compiledParamsnativeDocdevBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ParamsNative.docdev", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsnativeDocuser = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\xca\x4d\x2d\xc9\xc8\x4f\x29\x56\x52\xb0\x52\xa8\xae\xe5\xaa\x05\x04\x00\x00\xff\xff\x2b\x19\xdb\x78\x14\x00\x00\x00")

func compiledParamsnativeDocuserBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsnativeDocuser,
		"compiled/ParamsNative.docuser",
	)
}

func compiledParamsnativeDocuser() (*asset, error) {
	bytes, err := compiledParamsnativeDocuserBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ParamsNative.docuser", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsnativeOpcode = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledParamsnativeOpcodeBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsnativeOpcode,
		"compiled/ParamsNative.opcode",
	)
}

func compiledParamsnativeOpcode() (*asset, error) {
	bytes, err := compiledParamsnativeOpcodeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ParamsNative.opcode", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsnativeSignatures = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x34\x4a\x34\x34\x4b\x4b\x49\xb4\x52\xc8\x4b\x2c\xc9\x2c\x4b\x8d\x4f\xad\x48\x4d\x2e\x2d\xc9\x2f\xd2\xd0\xe4\x4a\x4a\x31\x34\x35\x48\x4d\x45\xc8\xa5\xa7\x96\x68\x24\x55\x96\xa4\x16\x1b\x1b\x69\x72\x19\x99\x58\x9a\x25\x5a\x1a\x23\x64\x8b\x11\xb2\x3a\xa5\x99\x79\x25\x46\xa6\x66\x9a\x5c\x80\x00\x00\x00\xff\xff\x4e\x26\x66\xb1\x60\x00\x00\x00")

func compiledParamsnativeSignaturesBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsnativeSignatures,
		"compiled/ParamsNative.signatures",
	)
}

func compiledParamsnativeSignatures() (*asset, error) {
	bytes, err := compiledParamsnativeSignaturesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ParamsNative.signatures", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x4d\x8f\xda\x30\x10\xfd\x2f\x3e\xe7\x44\xd5\x1e\x72\x45\xea\x8d\xaa\x6a\xd5\x13\x42\xd5\xc4\x19\xa8\x85\x33\x8e\x3c\x63\x50\x84\xfa\xdf\x57\xa0\x25\x31\x4b\x84\x77\xf9\xd8\x84\x23\xe2\x4d\x3c\xcf\xf3\xde\xf3\xcc\x77\x4a\x3b\x62\x01\x12\x95\x2f\xc1\x32\x66\xca\x50\x1d\x84\x55\x3e\xdf\x29\x82\x0a\x55\xae\xfe\x32\xda\xa5\xca\x94\x34\xf5\xfe\x27\x94\xa5\x47\x66\xf5\x3f\xeb\x10\x84\xdb\x19\xb0\xa0\xef\x81\x2d\xb2\x23\x8c\x51\x5a\x94\x0b\xf2\x7a\xce\x22\x53\x35\x34\x50\x58\x6c\x7b\x60\x01\xc1\x59\x10\x28\x8c\x35\xd2\xa8\x5c\x91\xa3\x23\xa8\x3d\x61\x19\x48\x8b\x71\x74\xe8\xa4\xe3\x21\x3e\x5c\x4b\x23\x70\x82\x81\xe1\x3f\xfc\xa6\xfd\xb6\xba\x2b\x2c\x9c\xb3\x87\xaa\x34\xaf\x8d\xc1\xed\x23\x19\xad\xb1\x89\xfa\x6a\x04\xf9\xcb\xe4\x64\x24\xe2\x3c\xac\xf0\xbb\x4b\x93\x8a\x8a\x87\xe7\x55\x58\xa7\xd7\x3f\x42\x55\xc4\x03\x0b\x86\x64\xf2\xf5\x5b\xcc\x0f\x09\xfd\xaa\x49\x71\x8b\x0b\xef\xc4\xed\x16\x37\x25\x65\xe8\xb1\x72\x1b\x3c\x93\xe2\xd0\x4e\xea\x1a\xd4\xc1\x7b\x24\xf9\x5d\x3b\xe2\xb4\xb4\xe2\x0f\x8c\xe0\xfa\xb5\xc7\xd2\x48\x8f\x3a\x22\x8c\x47\xed\x36\xe8\x9b\x5f\x20\x78\x51\x80\x8c\x32\x3d\x7c\xef\xa7\x05\x7a\xe8\xb4\x6e\xa1\xcc\xed\xa0\x2e\xa5\xb7\x45\xdd\x3b\xd2\xa1\x75\x77\x45\x2e\x14\x60\x81\x34\x3e\x43\x30\x44\x13\x18\xe1\xdd\x47\x9e\xef\x97\xf9\xee\xf4\xff\x8b\xb6\x4a\xbb\x6a\x04\xf1\x90\x4c\x67\x28\xcb\x11\x47\xf3\x3f\xe0\xa9\x2b\x93\xca\x1f\x7a\x87\xe9\x1a\xae\xce\x57\xc6\xcf\x79\x43\x1e\xb9\x48\xee\x01\xd3\xa3\x21\x9e\x28\x82\x02\x8d\x31\x84\x3e\xf8\x92\x19\x7e\xe7\x62\x72\x07\x13\x2c\x5e\x02\x00\x00\xff\xff\xc1\xa7\x82\x58\x64\x0d\x00\x00")

func compiledPrototypeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeAbi,
		"compiled/Prototype.abi",
	)
}

func compiledPrototypeAbi() (*asset, error) {
	bytes, err := compiledPrototypeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Prototype.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x09\x72\xe3\xba\x0e\xbc\x12\x40\x2c\x04\x8f\xc3\xf5\xfe\x47\xf8\x45\x49\xf1\x12\x25\xb2\x28\x8f\xfc\x5d\x79\xb6\x6b\xca\x63\x58\x5c\xc0\x6e\x34\x08\x32\x0a\x06\x0a\x0c\xe2\x14\x80\x49\x11\x14\x01\x1a\x8a\x57\x00\x20\xf1\x19\x10\x0e\xbe\x02\x00\x2b\xb5\xe5\x85\x6a\xa0\x04\x48\xde\x92\x18\xf2\x34\x8e\x8a\x9f\xac\xae\x30\x95\x3c\x5b\x51\xc2\x62\xe5\xea\x23\x8b\x9f\xad\x85\x67\x2b\xd6\x20\xa9\xb2\x4c\x56\xc7\x38\x5b\x9d\x0b\xce\x8a\xa6\xd9\x1a\xdd\x62\xa5\x62\xd9\x97\xd9\x4a\x20\xb3\x95\x54\x42\xb3\x5a\x66\xab\xd9\x62\x35\x8f\x31\xb4\xe5\xd9\xd2\x66\xab\x16\xcb\x26\x21\x4e\x56\xe6\xa5\x5f\xaf\x9a\xb9\xd1\x3c\x33\x8e\x34\x5b\x0d\x4a\x63\x49\x3c\x5b\xeb\xe2\x9b\xe5\x48\x89\x79\xf6\x4d\x78\xf1\x22\x08\x59\xe6\x44\xb3\x35\xfa\xc5\x5a\x0b\x0a\x65\x98\xac\x0a\xcb\x68\x39\x64\x6e\x99\x71\xb6\xda\xe2\x45\x2e\xc5\xc5\x10\xda\x6c\x6d\x79\xb6\x16\xf3\x44\x14\xf3\x64\xf5\xd4\xc4\x4b\xea\x48\x1a\xb4\x22\x89\xd8\x00\xa5\xaf\x66\xef\xfb\x6a\x17\x98\xd6\xbd\x5b\xd8\x80\x14\xc8\x10\x30\x80\x81\x75\x0e\x5c\x30\x7c\xf4\x42\x0d\x7d\xda\xd0\xdb\x06\x17\xa6\x1e\x9e\x6b\x2f\xd3\xbb\xfb\x92\xa2\xa8\x24\x80\x5b\x2f\x54\xd6\x5e\xa4\xf8\xc6\x5e\x58\xac\xdd\x8b\x29\xe2\xd0\xc0\x1c\xca\xfc\x36\xec\x11\x38\xb5\xc1\xe9\xd9\xe5\x89\x80\x40\x01\x1a\xdd\x7a\x5d\x61\xe5\xb5\x73\x74\x8e\xd7\x7d\x1c\x0c\x1b\x1e\x85\xec\xee\x3d\xfa\x6a\xf1\xf5\x39\xe0\x99\xe3\xb2\xf6\xcc\xf2\x39\x9e\xfd\xea\x51\x4c\xdf\x3c\x1a\xf1\x20\xd6\x95\x07\x04\x27\x61\xf3\x4f\x18\x99\xa2\xae\xe2\x8a\x10\xd7\x5e\xb0\xfe\x7b\x2f\x2e\xb3\x28\x84\xf7\x6b\x3e\xd2\xeb\xc8\xb3\x03\x58\x52\xe0\xf5\x2a\x94\xf2\x1a\x36\x6e\x32\xb4\x22\xac\x31\xab\x69\x35\x5b\x66\x78\x63\xe6\xd5\x8a\x2b\x2f\x98\xd7\xf1\xc3\xf6\xa2\x35\xff\x9a\x19\x82\xe6\xc3\x0a\xc0\xb1\xad\x3d\xa8\x7c\x5e\xec\x20\xea\x9a\x0d\xdc\xd6\xf9\x5d\xdc\x09\xf9\xfd\x32\x0b\x57\xef\x23\x98\xae\x6b\x76\xb7\x7e\x6e\x69\xf1\xfb\x0a\x8a\xac\xf3\x9b\x44\x79\x5f\x26\x23\xe5\xbc\x42\x40\x12\xad\xbd\xa8\x76\x22\x02\x52\xf5\xe9\xbd\x85\xc2\x3a\xfe\x94\x4f\xc8\x5f\x97\x59\x6b\x96\xb7\x53\x7e\x0d\xeb\xfc\xa7\xf5\x84\xfc\xf7\xcf\x56\xb1\xd7\x49\x47\x15\xcb\x83\xad\xbc\xf5\x74\x82\xe6\x5e\x66\x6b\xc9\x56\xf1\xe2\x79\x9d\xbf\x7c\x7c\xe3\xfc\x85\x91\xc2\xd1\x78\xeb\xbe\x65\x32\xa7\x88\x89\x4b\xef\x85\x60\x64\x4e\x4a\x18\x2d\xb9\xe8\x9d\x91\xd1\xd2\x3f\xdd\xd6\xda\xcf\xd4\xed\xb0\xb0\x07\x18\x26\x25\x3f\x3f\x22\x5f\x12\xf5\x97\xcc\x03\x70\xcd\x52\x9d\x57\x13\xeb\xbc\x01\x25\x94\x85\x8d\x16\xbe\xe5\x4f\x89\x0d\xaf\xbf\x46\x95\x39\x42\x3a\x9b\xea\xfc\xbf\xe5\xb9\xeb\x5b\xe7\xca\x7b\x14\x59\x42\x25\x84\x50\x8c\x8d\x3f\xc8\xee\x19\xe3\x8a\xac\x7b\x8c\x6c\xf0\x6d\x03\xd9\x10\x68\x1b\xd9\xb9\xff\x6e\x77\x60\x88\x4b\xab\x18\x6e\xfb\xbc\x2a\x95\xe0\xcf\xea\xd1\x3f\xfb\xf7\x67\x78\xe2\x42\xa5\xda\x9a\xfb\x2b\x3c\xd9\x38\x37\x18\xc1\x37\xea\x16\xbe\xd1\x8e\xe0\x1b\xc3\xff\x01\x5f\x74\x45\xc0\xb5\x3f\xa3\x03\xb7\x73\xbf\x3b\x15\x3e\x86\x73\x52\xda\xc0\x39\x79\x7f\x00\xe7\x64\xe5\x49\x9c\x11\x52\x6c\xcf\xe4\xf5\x90\x8c\x5b\x0e\xe9\x93\xd7\xf7\x8e\x31\xc4\x9a\xec\xeb\x06\x6b\x72\xcf\xfa\xc3\xac\xc9\xd1\xc6\x58\xd3\xf7\x88\x8a\x50\xdc\xc4\xb6\xde\xa3\x6f\x60\x99\x7c\x88\x87\xa1\xbd\x43\x16\xae\x75\x37\x90\xb9\xfe\x0b\xde\xd6\xe3\xe0\x9b\x3a\x2f\x1a\x34\x7b\xd6\xa0\x95\xa2\xeb\x05\x4e\xf3\xec\x40\xd1\x41\x0f\x1e\x15\xef\xb6\xc7\x13\xd8\xd8\xe5\x7e\xad\xda\x41\xf5\x93\xea\x22\xfb\x78\x8d\x02\x77\x52\x14\xbc\xb0\xde\xdc\xc1\xcf\x92\xb7\xf8\x59\xea\x11\x7e\x96\x36\xc8\xcf\x49\xd5\xe6\x6f\xb3\xa6\x55\x0c\x46\xc7\x35\x4d\x13\x97\x0c\x29\xf7\x4c\x76\xc9\x65\x7c\x12\x9e\xfc\x02\x55\xfb\xed\x6c\x8b\xae\x38\xec\xa8\x31\x6a\xe6\x0d\xac\x6b\xb1\x1d\x35\xc6\x05\xa1\x1a\x9f\xc9\x3a\x2a\x51\x53\xd1\x4f\x35\xb9\x7b\x8c\xa1\xac\xd3\x52\xd8\x40\xba\xe5\x72\x20\xaa\x5b\xa5\x23\x59\x67\xba\x40\x7e\x5d\xd6\xd1\xa1\xac\x43\x1e\xb4\x69\xf5\xa4\xed\xe7\xdc\x73\x76\xd6\x49\x50\xd1\x8c\xe3\x67\xcf\xfd\x13\x8f\x11\xb1\xfc\xce\x63\x44\xc2\x71\x1e\x23\xb2\x7f\x6e\xcf\x3d\x8a\x71\x0d\x96\xa8\x19\x9b\xa3\x8f\xd6\xed\x1a\x63\x88\x23\xce\x6d\xd4\xdf\xe8\xf8\x40\xfd\x8d\x4e\x06\xeb\xef\x45\xeb\x5c\xa9\x2f\xd4\xba\xf8\x50\xeb\x50\xb3\x77\x2a\x8a\xca\x3e\x7c\xd7\x3b\x15\xe5\xef\xe3\xed\xd0\x3a\xfd\xfa\xfb\x9e\x71\xad\xcb\x9c\x5c\xb1\x8b\xd2\xfd\x81\x1d\x36\x4f\x9c\xd8\x60\x27\x6d\xd5\x7f\x48\xfb\xeb\x3f\xbe\xb2\x93\xf6\xd7\x7f\x1b\xaa\x86\x77\xff\xbe\x50\xc5\x91\xf5\x40\x9e\xef\x1f\x14\x91\x25\xbd\x90\xf9\xf2\x90\xf9\x41\xab\xd7\xce\x7f\x0d\xca\x8f\xea\xcb\x3d\xcc\xef\x3e\x2a\x3f\xb3\xe7\xb5\x80\xe5\x73\x83\x32\x32\xc6\x50\x1e\x10\xda\x38\x9f\x43\xe1\x03\xe7\x73\x28\x32\x78\x3e\xb7\x44\x83\x54\xf7\x56\x7b\xde\x6f\x79\xa0\x7f\x2a\x7f\xd7\xff\x91\x68\x78\xea\xa4\x25\x68\x6c\x2d\xc9\x7f\xeb\xa4\x05\xd5\xb6\xf8\xa9\xe1\x08\x3f\x35\x1e\x39\x3f\xbe\x9e\xb4\x1c\x40\x0f\x24\x04\x81\x1a\xfe\x63\xe8\x79\xdd\xb8\x9f\x45\xef\x1f\xdc\xcf\xfe\x88\x9e\xb7\xfc\x6a\xf4\x72\xe1\xe6\x1c\xd8\x5f\xa9\x37\xdf\x2c\x07\x99\x97\x0d\x96\x98\x85\x03\x2c\xb1\xd0\x5e\x5b\xaf\x02\x47\x5f\x8b\xb7\x4f\xbd\xba\x77\x8c\x21\x8e\x04\xf3\x1b\x1c\x09\x21\x1d\xe0\x48\x48\x78\x68\x9f\x12\xfb\xa6\xf8\x8d\xf6\x29\xcb\xd9\xdc\x76\x9d\x7a\x3b\xde\xfe\x7a\x75\xfc\x3e\xc8\x14\x1d\xa6\x8f\x52\xee\x1d\x63\x28\x0a\x12\xc4\x8d\x28\x48\x58\x0f\x44\x41\x22\x7e\x52\x29\x87\x90\x18\xad\x95\x0d\x14\x31\xf7\xe8\x17\x18\x1b\xe9\xb3\x47\xdb\xc5\xa9\x4c\x1b\xf7\x5b\x98\xf9\xc1\xfd\xd6\x8f\x9c\xca\x52\xc7\x38\x35\xc6\x09\x49\x8b\x12\xe7\xf6\xc2\xf3\x13\x07\x8f\x94\xd8\x93\x8a\x66\x55\x07\x5d\x81\x1d\x68\x51\xf4\xe4\x59\xa5\x7f\xeb\x9a\xec\xb1\xb7\x99\xd5\x79\xaf\x12\x03\x44\x54\x51\xe7\xa3\x8f\xde\x11\x88\x39\x48\xa6\xcd\x52\x69\xa2\x31\xa9\x4f\x11\x30\x15\xdf\x4c\x30\xe4\x8a\xb1\x3a\x8f\xc2\x26\x90\xcc\xb0\xb1\x26\x57\xd5\x55\x8f\x21\xe5\x64\x84\xbe\x19\x80\x0b\xff\x0b\x00\x00\xff\xff\x66\x57\xf4\x8c\x54\x3a\x00\x00")

func compiledPrototypeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeBinRuntime,
		"compiled/Prototype.bin-runtime",
	)
}

func compiledPrototypeBinRuntime() (*asset, error) {
	bytes, err := compiledPrototypeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Prototype.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeOpcode = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\xdb\x92\xda\x3c\x12\x7e\x15\x3f\x82\x8e\x2d\xe9\x52\x27\x67\x67\xc3\x0c\x84\x43\x36\x9b\xcb\xad\xca\x3e\x43\x1e\xff\x2f\xdb\x18\x6c\x23\x83\x6c\x8c\x41\x33\xa6\x2a\x0c\x31\x6d\xb9\xa5\xee\xef\x53\x77\x4b\x62\x73\xd8\xfd\x0b\x67\xe8\xaf\x44\x59\xfd\x91\xa1\xec\x7d\xb7\x5f\x6f\x7d\x66\xf5\x6a\xf5\x53\xaf\x0e\x3e\x73\x87\x0d\xce\xde\x76\xbf\xfd\x76\x5d\xca\x91\x0c\xfd\xc5\x28\xfb\xf7\xe1\x7d\xf3\x76\xba\x11\x55\x62\x5b\xff\xd3\x6f\xf7\xe5\x77\xce\xef\xf6\xd9\x66\xbd\x39\xdf\xe3\x88\xae\xa4\xea\x2b\x04\x35\xee\xb7\x6b\xe7\xed\x7a\xf3\xdf\xc6\xa5\xad\xdf\x1f\xb6\x1f\xd9\x6e\x7f\x6c\xa5\x57\xd9\xd3\x95\x52\x6d\xa7\xf7\x7a\xf7\xf6\xdb\x67\xab\xfd\xe9\x51\x39\xbe\x50\xb8\x16\x5d\xad\xb5\xab\xe4\x54\xd9\xb3\x91\xaf\x6c\xf7\x1f\xbd\xc1\x99\x7b\xfb\x59\x36\xc6\x8a\x87\x1e\x5f\x99\xfe\x70\xe7\x9e\x17\xdf\x60\x2a\xa4\xe1\x32\xf3\x3f\xce\x1a\xc2\x51\xc3\x96\x20\x71\x8c\x3a\xdb\x12\xc4\x5c\x85\x24\x99\x17\x9a\x71\xd1\x92\x74\x2c\x24\x89\xbd\xe2\xc6\x33\xde\x14\x25\x0c\x07\x1f\x4f\x14\x91\x0e\x4c\x4b\x54\x93\xa0\x28\x75\xd2\x0a\xd7\x12\xa5\x88\x87\x44\x29\x70\x95\x4b\xef\x5a\xa2\x52\x06\x45\xa5\xc0\x5a\xe5\xed\x56\x5d\x1e\x12\x05\x27\xad\xe4\x4a\x37\x45\x19\x0b\xea\x2a\x00\x2c\xcb\x69\x6b\xb0\x98\xa6\x21\x51\x89\x5c\xce\xb8\x61\x2d\x51\x1f\xb4\x95\xb4\x9a\x1a\xc6\x5a\xc6\xe2\x2c\x68\x02\xc5\xa9\xb4\xcc\xd0\x96\xa8\x16\x41\x51\xef\x30\xa7\x16\x35\x45\x01\x05\xbb\x65\x95\x65\xb9\x65\xb8\x25\x2a\x83\x26\xb0\xce\x11\xad\x54\xde\x12\xcd\x6d\x48\xd4\x49\x41\x29\xd5\xb6\x29\x2a\x68\x6d\x82\x33\xd4\xaf\x33\xc1\x2d\x3e\x21\x23\x08\x85\x8b\x06\xf2\x4b\xf1\x16\xfc\x77\x07\x53\x5c\x25\x99\x76\xae\x46\xe7\xa1\x7e\xbb\x44\x3f\x6a\x20\xf6\xd6\xab\x44\x74\xd5\x64\xad\x01\x41\x8d\xe7\x14\xef\xb4\x7c\x27\xcd\x27\xcf\xfd\xd0\x72\xb4\xea\x7f\xb5\xe9\x8c\x2e\x87\xf3\x3c\xa6\x25\xbf\xc6\x1a\x0a\xf8\x08\x43\x19\xbd\x18\x6a\xb0\xa1\xa4\xf6\x1d\x43\x35\x27\xbe\x52\xb3\x7a\x94\x68\x6d\xa6\xe0\x9f\x72\x68\x3b\x33\x65\x43\x1f\xd2\x7a\xf2\x65\xfb\x47\x3d\x0f\xe6\xa8\xeb\x71\x56\x8e\x75\x18\x3f\x22\x54\x20\x84\xa6\xee\x30\x55\x4f\x3f\xd6\xfb\x69\x9c\x41\x59\x12\xef\x0c\x97\xcf\xbf\xbc\xf2\x54\xa7\x20\xcc\x8d\x70\x0a\x69\x53\x76\x8a\xbb\x5d\x40\x9b\x01\x2e\xf0\x5c\xf3\x1e\x99\x6b\x90\x79\x29\x4a\x1e\xf3\x4f\x98\x24\x8c\x86\x3b\x66\x73\x8a\x2f\xd3\xa2\xdb\x86\x62\x90\x8e\xa1\x42\x63\xe6\x28\x1e\xc6\xa5\xc3\x75\x1c\x77\xd7\x53\x41\x4b\x15\x1b\xe1\x0b\xce\xa5\xe3\x0b\x77\x72\xf2\x03\x28\xdd\x1f\xeb\x28\x23\xd1\xeb\xcd\x70\x8b\x31\x86\x52\xb6\xd8\x93\x28\xc3\xfb\x2e\x65\x0c\x31\x14\x63\x23\xe6\x43\x26\xbf\x0e\xb4\x42\x43\x8e\x11\xd8\x44\xe2\x1d\xa6\xf3\x11\xf6\xf5\x2c\x1d\xfb\x06\x0d\x84\xe1\x1e\xf6\x62\xf9\x88\x92\x0f\x27\x09\x95\x7c\x82\x83\x46\x2e\x98\xa4\xd7\xab\xd9\x35\xaf\x8e\xf1\x7a\x7a\xa1\xc2\xd4\x9e\xcf\xf9\x88\xec\x9e\x6b\x9e\x8e\x11\x5f\xc7\x73\xa8\xed\xf2\xe1\x10\xb8\x71\x43\x47\x58\xca\xcb\x74\x2c\x15\x1c\x34\xee\xbb\xf9\x51\x8a\x45\x34\x40\x23\x02\x08\x60\x09\x25\xd4\x41\xe3\x81\xe5\x4b\xa2\x76\xe9\x0c\x6a\x44\xd2\x0e\x3e\xa1\xa4\xfd\x75\x3c\x50\x68\x96\x48\x0c\x2a\x90\x1c\xee\x15\x82\x26\x94\x63\x04\x0d\x24\x8d\xbc\x63\x52\x14\x6c\x44\x06\x2d\xf4\x92\x41\x8f\xb0\x94\xa6\x2a\x89\x99\xf8\x64\x66\x4b\x1b\x13\x4b\xb9\x8a\x79\x5c\xb5\x38\xcb\x6a\xe7\xb6\x7e\xb7\xbb\x63\xee\x29\xf7\x63\x68\x69\x88\x16\xe4\x14\xf3\xb3\xa0\xea\xec\x74\xc3\x45\x2b\x77\xee\x5c\x79\x3f\xac\x82\xa3\xca\xea\x4c\x03\x9f\x9f\xff\x02\x53\xec\xab\x4d\xf7\xe1\x34\x0b\x5d\x4b\xec\x4e\x1c\xd1\xe2\x1d\x59\x49\xf8\x5f\x7b\xbb\x76\xbe\x24\x93\xb3\xcf\x5f\x90\x97\x54\x03\x12\xe8\x6f\x7a\x57\xd2\xc0\xd5\x06\x75\xbd\xad\xa5\xc2\xc4\x89\xd1\x2e\xda\xaf\xbf\x2d\xf7\x6b\xf5\x0a\x07\x49\x34\xf0\x2f\xcc\x0a\x68\x22\x74\x51\x0c\x14\x23\x55\x8e\x3e\xaf\xde\x16\x74\x25\x8f\x2e\xf2\x70\x78\x29\x31\xa0\xa8\x17\x03\x2f\xa5\xe8\xbc\xf0\xea\x8e\x4f\x4f\x4b\x04\x55\x63\xb5\xda\x5f\x68\xac\x55\xdc\x10\xf4\x86\x3b\xef\xf7\xd5\x82\xcf\x57\x9a\x72\xf3\xf0\x06\x51\x9e\xfa\x3c\x27\x0b\x6f\xc4\x61\x75\xaa\x9d\x27\xcf\xc2\xbb\x86\x89\xf1\xae\x65\x6a\x78\xd7\xea\x0b\xe3\x1d\x13\xc7\x11\xc9\x97\x38\x61\x28\xde\x83\x63\x11\xda\xfe\xfe\x8a\xa8\x37\x30\xa0\x2c\x1e\x83\x7a\x23\x44\x62\xa8\x37\x32\x72\x33\xde\xab\xa0\xbe\xda\xf7\x94\xcf\x94\x9d\x2b\x23\x59\x6e\x95\x59\xb2\xf3\x81\xbc\xf0\x02\xba\x3c\x93\x59\xac\x18\xb0\x66\x13\xc3\x2c\xf6\x94\xef\xa7\xc2\x2c\x56\x47\xd6\xa4\x1f\xc5\x2c\xed\xc2\x61\xad\x96\x23\x5d\xc2\x3b\x75\xb1\xb8\x40\xcb\x5a\x88\xa5\x42\xe9\xb1\x98\x45\x11\x80\xbd\xe8\xd0\x79\x0d\xe1\xe8\x7e\xb4\xdb\x00\xbe\xba\xc6\x70\x6a\xb3\xec\x00\x10\xc1\x41\x81\x15\x0c\x14\x78\xaa\x09\x02\x0f\xb9\x60\x04\x01\x26\x48\x70\x41\x81\x0b\x12\xdb\x83\x36\x72\xc6\x97\x5a\xc3\x1e\xf7\xd8\xc0\x8e\x7b\xa2\x99\xd0\xb4\x9f\xbb\xaf\xc4\x31\xb3\x70\xf7\x4b\xf1\xe5\xa5\x51\x1f\xcf\x95\xce\x4e\xcc\x95\xce\xa7\xc6\x95\x2e\x7f\x32\x57\xb6\xa3\xb0\xa6\x44\x38\x02\xf3\x58\x35\xe2\x8e\x47\x46\x60\x60\x98\xb3\xc8\xd8\x46\x66\xd6\x9b\x9e\xf1\x27\x43\x99\xbf\x0a\x94\xa7\xd8\x3f\xc6\x7a\xfd\xfc\xe1\x8c\xe0\xed\x80\xdd\xe8\x31\x8c\xe0\x9d\x7c\xca\xe2\xc6\x15\x00\x79\x3d\x53\x0a\x03\x5c\x83\x71\xb0\x2c\x30\xc6\x63\xe7\xa5\xa6\xe4\x67\xa5\x30\xb9\x89\xac\x07\xc6\x82\x30\xb7\x2e\xb1\x69\x39\xf7\x91\xf5\xa1\x79\x53\x18\x8c\xa0\x1b\x2e\xa4\x92\xc3\xc0\x64\x39\x0c\x15\x08\x72\xf0\x82\x42\x1e\xce\x64\x3e\x4f\x0e\x63\x90\xc7\x52\x32\x7d\x23\xfa\x59\x18\xfc\x53\x15\xa7\x31\xc6\x03\xce\x49\xc7\x10\x30\xc6\x14\x27\xc6\xc0\x18\x33\xf1\x4a\x99\xd1\xf5\xfa\xf4\x34\x70\xf7\x4a\x1a\x9a\x4b\x56\xf9\x71\x61\x54\xbf\x5d\x00\xbf\x84\x6c\x11\x94\x41\xc8\xc4\xcb\xd8\x98\xb0\xd4\xd6\xb1\x31\xe1\x4f\x5e\xc8\xee\x89\xda\x88\xeb\xd6\xb9\x52\x89\xda\xf4\x5d\x51\x1b\x06\x2b\x08\x70\xc0\xc0\x84\xea\x46\x6e\xc0\x81\xf5\xf7\xe0\x71\x51\x5b\x5f\xc4\x56\x36\x30\x55\xd8\x66\x99\x21\x4e\xf6\x47\x6c\x4b\xe9\xf9\x96\x55\x1b\x70\x9c\x98\x2a\xe9\xd4\x2b\x74\x98\xbe\xe8\x12\x1d\xeb\xa7\x4a\xfa\x8c\x35\xba\xa9\xa2\x32\x72\xe3\xd3\x15\x88\x93\x91\x2e\xec\x7f\x84\x4f\x25\x9c\x06\x94\xf1\xee\x99\x92\x54\x38\x9e\xdf\xc5\xf1\x0a\xbc\x80\x82\xe9\x41\x01\xbb\xb5\xc2\x38\x0b\xc7\x9f\x2c\x02\x6c\xa6\x42\xab\x54\xd8\x2d\x27\x39\x3a\x77\x2d\x51\xfb\xed\xa9\x88\xd3\x89\xb7\xa1\x61\xce\x52\xdb\x87\x86\x39\x7f\xf2\x46\xb4\x1e\x46\xe7\xbe\x7b\xd0\x26\x15\x46\xbf\xaf\xd6\xda\x89\xda\x8b\xbf\xc0\xba\xd1\xfa\xac\x8c\x3e\xcf\x7e\x11\x05\x3a\xcf\x0d\xef\xe7\xef\x25\x68\x7f\xf2\x7e\x11\x0c\x72\x6a\xbe\x04\x95\x1c\x5f\x82\x7e\xa9\x8d\xbb\xd7\xb7\x8c\x4c\x8b\x50\xc5\x91\x57\x0b\x40\x5f\x17\xa0\x02\x26\x3e\x9c\x8a\x85\x98\xf9\x74\xea\xfd\x00\x15\xd2\x7e\x4d\x80\x5a\xc7\x72\x42\xd0\xb1\xee\xb5\x2c\x57\x2e\x79\x50\x24\x6d\x48\x31\xe0\xe7\xe5\xa3\x68\x43\x4a\x95\x1a\x6d\x48\x15\xb9\x84\xf3\x79\x16\x3c\x99\x16\xde\x09\x99\x2d\xeb\x9d\x91\x28\x5d\x18\xe3\x08\x16\x25\x23\x77\x07\x44\x33\x86\x52\x26\x35\xc6\x50\x26\xf2\x27\xc1\x66\xae\x9c\x68\x0a\x5f\xb2\x72\x72\xdc\xa5\x76\x7d\x9d\x33\xdc\x83\xf9\xd7\x3b\xa7\x3a\x65\x23\x01\x13\x6c\x96\x90\x2f\x8e\x34\x17\x02\xaf\xd7\x62\x90\x9e\x98\xc0\x0d\xf6\xa9\x11\xb8\xa1\x91\xc7\x1d\x5e\x21\xe4\x6b\xc4\x67\x23\xdd\x70\xdc\xad\xfe\xc7\x99\x79\xcb\x51\xb3\xe7\xb9\x7f\xbd\xb9\x4f\xad\xa5\x30\x75\xb3\x83\x9f\xa3\x30\x65\x63\x91\x16\x4d\x37\x96\xcd\x7c\xb2\xe8\x7e\xba\xb1\x3c\x72\xe7\xcb\xa3\xe8\x66\x34\x01\x9c\x34\xeb\x89\x38\x6d\x9e\xe8\xee\x0b\x12\x6e\x37\x32\xe2\x14\x14\x38\x58\x00\x82\x8a\x48\x93\x20\x70\x80\x05\x15\x0c\x78\xf1\xbf\x22\xf6\x14\xb8\xb8\xa7\x8a\x42\x67\x8d\x38\xcb\xdf\x63\x5d\xad\xbf\x55\xfa\x43\xa5\xbe\x16\x5a\x10\x8a\xb8\xcc\xbe\x7b\x6b\xf5\x77\xc2\x8b\x2f\xfe\x77\xfc\xb5\xf1\xe2\xb3\x34\x2e\xe7\xa0\x0d\x08\xa3\x11\x36\x4e\xe4\x92\x63\x65\x3d\xd6\x9e\x08\xcc\xcb\x3e\x40\xb6\x7b\xfb\xf6\xe1\x7f\xed\x7d\x45\x36\x25\x83\xfe\xbf\x50\xb5\x6c\xad\x18\xaa\x3f\xc5\x27\xf2\xa7\x6a\x57\x96\x3f\xe7\x61\x8d\xa4\x58\xe4\x12\x21\xa2\x7a\x2c\xfc\x4f\x00\x00\x00\xff\xff\xa5\x13\xa7\x31\x1a\x77\x00\x00")

func compiledPrototypeOpcodeBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeOpcode,
		"compiled/Prototype.opcode",
	)
}

func compiledPrototypeOpcode() (*asset, error) {
	bytes, err := compiledPrototypeOpcodeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Prototype.opcode", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeeventAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\x3f\x6b\x84\x40\x10\xc5\xbf\xcb\x90\xd2\xca\x90\x14\xb6\xa9\x03\x21\x21\x95\x58\xcc\xb9\x73\xb0\xa0\xb3\xb2\x33\xeb\xdd\x22\x7e\xf7\xe3\xe4\xf0\x1f\xda\x78\xd7\xee\xce\xfb\xbd\x1f\x2f\xef\x00\xd9\x71\xac\x5d\x10\xc8\xce\x58\x09\x25\x60\xb9\x09\x2a\x90\xe5\x1d\x58\x36\x74\x25\x33\x7e\x31\xd6\x04\x19\x30\x5d\xbe\x51\x94\x3c\x24\xa0\xb1\xb9\x3f\xa1\x31\x9e\x44\xa0\x2f\xc6\xab\xb7\xf5\x0d\xb5\xc4\x0a\x7d\x72\xac\xb4\xf4\x64\xac\x4e\xb4\x60\x59\xd3\x8f\xcf\x81\xb7\x13\xf1\x54\xba\x96\x7c\xfc\x45\xa5\x8d\xe0\x4c\xf5\x6b\x80\xff\x54\xc8\xc7\x75\xd5\x87\xa9\x3a\xc8\xe6\x3a\xfb\xae\x58\xaa\x75\xb3\xf6\x53\x54\x92\xf7\x74\x61\xf9\x2f\xcf\xcc\xb9\xf0\x93\xc6\xb1\xb8\xd7\x2b\xfe\xad\xb9\x0f\xcb\xe2\x16\x00\x00\xff\xff\xa4\xcf\xdd\xbb\x6b\x02\x00\x00")

func compiledPrototypeeventAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeeventAbi,
		"compiled/PrototypeEvent.abi",
	)
}

func compiledPrototypeeventAbi() (*asset, error) {
	bytes, err := compiledPrototypeeventAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeEvent.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeeventBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x01\x01\x00\x21\x08\x03\xc0\x4a\x13\x64\x42\x9c\xf1\x68\xff\x08\x7f\x44\x82\xd8\x08\x23\x80\xc4\x1b\x40\x8b\x41\x3b\x3a\x3a\xe6\x88\x34\xac\xae\xa1\x37\x2f\x77\xbe\x2f\xb4\x8b\xbe\x9a\x5e\x47\xfa\x5a\x21\x7f\xe7\x8d\x75\x66\xf8\xd5\x40\xc3\xf2\x51\xed\x6b\xbd\x5e\x36\x60\xf5\x07\x00\x00\xff\xff\xfe\x47\x63\xed\x6a\x00\x00\x00")

func compiledPrototypeeventBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeeventBinRuntime,
		"compiled/PrototypeEvent.bin-runtime",
	)
}

func compiledPrototypeeventBinRuntime() (*asset, error) {
	bytes, err := compiledPrototypeeventBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeEvent.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeeventOpcode = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x4d\x72\x83\x30\x0c\x85\xaf\xf2\x8e\x20\x1b\x30\xb0\x14\x46\xf9\x69\x48\xed\xb1\x21\x9d\x76\x97\x34\xed\x19\x7c\xfc\x8e\xa1\x30\x2c\xb2\x93\xac\xef\xf9\x7d\x7e\x8a\x27\x05\x4a\x0d\x61\x1d\x4b\xc2\x35\x8e\x2e\x08\x2c\x0f\xc3\x8d\x87\x49\xd0\x4f\x5e\xe1\x1c\xbf\x24\xb8\x8d\x3b\xe0\x6d\xba\xfa\xf3\xb6\xd3\x42\x05\xb9\x49\x18\xe7\x5b\x2f\x71\x84\x77\x7e\x43\x8a\x6a\x61\xd6\x5d\xf5\xbb\xb4\x75\xbd\x58\xe7\x3f\x77\x4f\x41\xc6\x29\xbc\x23\x8e\xbb\x3f\x5e\x9a\xbe\x76\x98\x73\x83\x3b\x2e\x85\x06\x94\x8c\xae\xb9\xe6\x5a\x17\x54\x35\xb8\x88\xb5\x7c\xd1\x95\x41\x3c\x0d\x88\x1f\xec\x55\x39\x93\x25\x28\x75\x46\x4c\xd9\x1c\x2c\x8e\x1c\x73\x55\xbb\x5d\x54\x67\x8a\xb6\x66\x06\xa5\xef\x07\x28\xdd\xab\xdc\x51\x80\xd2\x6f\xbd\x36\x53\xd2\x8f\xac\xd2\xfe\x0b\x36\xa0\xf4\x73\x07\xa5\x27\xe5\xc4\x73\x11\xce\x73\xd1\x73\x5b\x8a\xee\xd4\xa1\xe9\x88\x74\x4b\x44\x84\xbf\x00\x00\x00\xff\xff\xd6\x75\xdb\x6b\x96\x01\x00\x00")

func compiledPrototypeeventOpcodeBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeeventOpcode,
		"compiled/PrototypeEvent.opcode",
	)
}

func compiledPrototypeeventOpcode() (*asset, error) {
	bytes, err := compiledPrototypeeventOpcodeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeEvent.opcode", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypenativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x4f\xeb\x9b\x40\x10\xfd\x2e\x7b\xf6\xf4\x2b\xed\x21\xb7\x36\xd0\x5b\x4a\x69\xe9\x29\x84\x32\xae\x93\x74\xc9\x3a\x2b\x3b\xb3\x06\x09\xfd\xee\xc5\x80\x51\xaa\x54\x4d\xfd\x93\x1c\x85\x99\xf1\x3d\xde\xec\x7b\xb3\xbf\x2a\xed\x88\x05\x48\xd4\xe6\x08\x96\x31\x52\x86\xb2\x20\xac\x36\xfb\xab\x22\x48\x51\x6d\x14\xa3\x3d\xaa\x48\x49\x91\x95\x5f\x90\x24\x1e\x99\xd5\xef\xa8\x2e\xc8\x1c\xb1\xf3\x1d\x35\x87\xa8\xaa\x21\x10\x93\xe3\xcf\x40\x75\xb1\x0b\xf2\xf7\xaf\xea\x11\xb1\x73\xf6\xd6\x9f\x41\x01\xb1\xc5\x3b\x3e\x16\x10\xdc\x05\x81\xd8\x58\x23\x45\x39\xda\x51\x55\x74\x6f\x3f\x06\xd2\x62\x1c\xdd\x60\xd6\x1c\xc5\x87\x31\x14\x5b\xf0\x53\x60\xc1\x5e\xec\xcd\xfe\x7e\xf8\xb9\xc1\xcb\xd4\xc0\x6b\x6d\x62\xeb\xf4\xf9\x4b\x48\x63\x6c\xe8\x13\x0c\xc9\xbb\xb7\x0e\x7e\x48\xe8\x4f\xc5\x47\xf9\x54\x76\xf5\xd1\x2c\xa7\xbc\xbd\xff\x30\x25\xcd\xc7\x77\x90\xf0\xb2\xab\xc4\xe9\x95\x91\x51\x76\x6d\x25\x57\x5e\xb6\x9a\xcb\x19\x8b\xc6\x43\x28\x04\xb9\x53\x2c\x16\xe7\xe1\x84\x9f\x07\x3c\xa6\xc6\x8c\xb5\x17\x32\xf0\x30\x8d\x0c\xff\xe0\xfe\xa7\x36\xc2\x26\xe6\xa0\xd5\x42\xfd\x0b\x78\xeb\x12\x7c\x35\xd8\x3a\x78\x8f\x24\xdf\x87\x79\xf3\x33\xf9\xdb\x88\xec\x31\x3c\x90\xdf\xd4\xea\x2c\x92\xac\x8c\x16\xf5\x50\x05\xe7\x49\xd7\xc7\x79\x6a\x8f\x89\x91\x8e\x68\xa9\x4b\x3c\x6a\x97\xa3\x2f\xbe\x81\x60\x77\x06\xb5\x3c\x7e\x7b\x9b\xfa\xd5\x02\xcd\xea\xf3\x8f\xd3\x1e\xea\x85\x90\x24\x13\x9b\xe1\x53\xd1\xf3\x98\xba\x1c\xd7\x63\xf8\xdf\xee\xd9\xbd\x67\xff\x3a\x99\xa2\x65\xee\xa9\x85\xce\xc6\x18\x2c\x90\xc6\xf5\xee\xc6\xd9\xaf\x91\xb2\x6e\x5b\x99\xd4\xeb\x5c\xc5\x63\xf2\x63\xe1\xe4\x38\xfc\x09\x00\x00\xff\xff\xb1\x59\x01\xf8\x7d\x0e\x00\x00")

func compiledPrototypenativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypenativeAbi,
		"compiled/PrototypeNative.abi",
	)
}

func compiledPrototypenativeAbi() (*asset, error) {
	bytes, err := compiledPrototypenativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypenativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledPrototypenativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypenativeBinRuntime,
		"compiled/PrototypeNative.bin-runtime",
	)
}

func compiledPrototypenativeBinRuntime() (*asset, error) {
	bytes, err := compiledPrototypenativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypenativeOpcode = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledPrototypenativeOpcodeBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypenativeOpcode,
		"compiled/PrototypeNative.opcode",
	)
}

func compiledPrototypenativeOpcode() (*asset, error) {
	bytes, err := compiledPrototypenativeOpcodeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeNative.opcode", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"compiled/Executor.abi": compiledExecutorAbi,
	"compiled/Executor.bin-runtime": compiledExecutorBinRuntime,
	"compiled/Executor.opcode": compiledExecutorOpcode,
	"compiled/Extension.abi": compiledExtensionAbi,
	"compiled/Extension.bin-runtime": compiledExtensionBinRuntime,
	"compiled/Extension.opcode": compiledExtensionOpcode,
	"compiled/ExtensionNative.abi": compiledExtensionnativeAbi,
	"compiled/ExtensionNative.bin-runtime": compiledExtensionnativeBinRuntime,
	"compiled/ExtensionNative.opcode": compiledExtensionnativeOpcode,
	"compiled/Measure.abi": compiledMeasureAbi,
	"compiled/Measure.bin-runtime": compiledMeasureBinRuntime,
	"compiled/Measure.opcode": compiledMeasureOpcode,
	"compiled/Meter.abi": compiledMeterAbi,
	"compiled/Meter.bin-runtime": compiledMeterBinRuntime,
	"compiled/Meter.opcode": compiledMeterOpcode,
	"compiled/MeterGov.abi": compiledMetergovAbi,
	"compiled/MeterGov.bin-runtime": compiledMetergovBinRuntime,
	"compiled/MeterGov.opcode": compiledMetergovOpcode,
	"compiled/MeterNative.abi": compiledMeternativeAbi,
	"compiled/MeterNative.bin-runtime": compiledMeternativeBinRuntime,
	"compiled/MeterNative.opcode": compiledMeternativeOpcode,
	"compiled/Params.abi": compiledParamsAbi,
	"compiled/Params.bin": compiledParamsBin,
	"compiled/Params.bin-runtime": compiledParamsBinRuntime,
	"compiled/Params.docdev": compiledParamsDocdev,
	"compiled/Params.docuser": compiledParamsDocuser,
	"compiled/Params.opcode": compiledParamsOpcode,
	"compiled/Params.signatures": compiledParamsSignatures,
	"compiled/ParamsNative.abi": compiledParamsnativeAbi,
	"compiled/ParamsNative.bin": compiledParamsnativeBin,
	"compiled/ParamsNative.bin-runtime": compiledParamsnativeBinRuntime,
	"compiled/ParamsNative.docdev": compiledParamsnativeDocdev,
	"compiled/ParamsNative.docuser": compiledParamsnativeDocuser,
	"compiled/ParamsNative.opcode": compiledParamsnativeOpcode,
	"compiled/ParamsNative.signatures": compiledParamsnativeSignatures,
	"compiled/Prototype.abi": compiledPrototypeAbi,
	"compiled/Prototype.bin-runtime": compiledPrototypeBinRuntime,
	"compiled/Prototype.opcode": compiledPrototypeOpcode,
	"compiled/PrototypeEvent.abi": compiledPrototypeeventAbi,
	"compiled/PrototypeEvent.bin-runtime": compiledPrototypeeventBinRuntime,
	"compiled/PrototypeEvent.opcode": compiledPrototypeeventOpcode,
	"compiled/PrototypeNative.abi": compiledPrototypenativeAbi,
	"compiled/PrototypeNative.bin-runtime": compiledPrototypenativeBinRuntime,
	"compiled/PrototypeNative.opcode": compiledPrototypenativeOpcode,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"compiled": &bintree{nil, map[string]*bintree{
		"Executor.abi": &bintree{compiledExecutorAbi, map[string]*bintree{}},
		"Executor.bin-runtime": &bintree{compiledExecutorBinRuntime, map[string]*bintree{}},
		"Executor.opcode": &bintree{compiledExecutorOpcode, map[string]*bintree{}},
		"Extension.abi": &bintree{compiledExtensionAbi, map[string]*bintree{}},
		"Extension.bin-runtime": &bintree{compiledExtensionBinRuntime, map[string]*bintree{}},
		"Extension.opcode": &bintree{compiledExtensionOpcode, map[string]*bintree{}},
		"ExtensionNative.abi": &bintree{compiledExtensionnativeAbi, map[string]*bintree{}},
		"ExtensionNative.bin-runtime": &bintree{compiledExtensionnativeBinRuntime, map[string]*bintree{}},
		"ExtensionNative.opcode": &bintree{compiledExtensionnativeOpcode, map[string]*bintree{}},
		"Measure.abi": &bintree{compiledMeasureAbi, map[string]*bintree{}},
		"Measure.bin-runtime": &bintree{compiledMeasureBinRuntime, map[string]*bintree{}},
		"Measure.opcode": &bintree{compiledMeasureOpcode, map[string]*bintree{}},
		"Meter.abi": &bintree{compiledMeterAbi, map[string]*bintree{}},
		"Meter.bin-runtime": &bintree{compiledMeterBinRuntime, map[string]*bintree{}},
		"Meter.opcode": &bintree{compiledMeterOpcode, map[string]*bintree{}},
		"MeterGov.abi": &bintree{compiledMetergovAbi, map[string]*bintree{}},
		"MeterGov.bin-runtime": &bintree{compiledMetergovBinRuntime, map[string]*bintree{}},
		"MeterGov.opcode": &bintree{compiledMetergovOpcode, map[string]*bintree{}},
		"MeterNative.abi": &bintree{compiledMeternativeAbi, map[string]*bintree{}},
		"MeterNative.bin-runtime": &bintree{compiledMeternativeBinRuntime, map[string]*bintree{}},
		"MeterNative.opcode": &bintree{compiledMeternativeOpcode, map[string]*bintree{}},
		"Params.abi": &bintree{compiledParamsAbi, map[string]*bintree{}},
		"Params.bin": &bintree{compiledParamsBin, map[string]*bintree{}},
		"Params.bin-runtime": &bintree{compiledParamsBinRuntime, map[string]*bintree{}},
		"Params.docdev": &bintree{compiledParamsDocdev, map[string]*bintree{}},
		"Params.docuser": &bintree{compiledParamsDocuser, map[string]*bintree{}},
		"Params.opcode": &bintree{compiledParamsOpcode, map[string]*bintree{}},
		"Params.signatures": &bintree{compiledParamsSignatures, map[string]*bintree{}},
		"ParamsNative.abi": &bintree{compiledParamsnativeAbi, map[string]*bintree{}},
		"ParamsNative.bin": &bintree{compiledParamsnativeBin, map[string]*bintree{}},
		"ParamsNative.bin-runtime": &bintree{compiledParamsnativeBinRuntime, map[string]*bintree{}},
		"ParamsNative.docdev": &bintree{compiledParamsnativeDocdev, map[string]*bintree{}},
		"ParamsNative.docuser": &bintree{compiledParamsnativeDocuser, map[string]*bintree{}},
		"ParamsNative.opcode": &bintree{compiledParamsnativeOpcode, map[string]*bintree{}},
		"ParamsNative.signatures": &bintree{compiledParamsnativeSignatures, map[string]*bintree{}},
		"Prototype.abi": &bintree{compiledPrototypeAbi, map[string]*bintree{}},
		"Prototype.bin-runtime": &bintree{compiledPrototypeBinRuntime, map[string]*bintree{}},
		"Prototype.opcode": &bintree{compiledPrototypeOpcode, map[string]*bintree{}},
		"PrototypeEvent.abi": &bintree{compiledPrototypeeventAbi, map[string]*bintree{}},
		"PrototypeEvent.bin-runtime": &bintree{compiledPrototypeeventBinRuntime, map[string]*bintree{}},
		"PrototypeEvent.opcode": &bintree{compiledPrototypeeventOpcode, map[string]*bintree{}},
		"PrototypeNative.abi": &bintree{compiledPrototypenativeAbi, map[string]*bintree{}},
		"PrototypeNative.bin-runtime": &bintree{compiledPrototypenativeBinRuntime, map[string]*bintree{}},
		"PrototypeNative.opcode": &bintree{compiledPrototypenativeOpcode, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

